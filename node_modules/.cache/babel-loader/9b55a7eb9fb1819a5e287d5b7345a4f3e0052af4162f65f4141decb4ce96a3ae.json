{"ast":null,"code":"import * as d3 from \"d3\";\nexport default {\n  name: \"PageOne\",\n  data() {\n    return {\n      svg: null,\n      // SVG 对象\n      projection: null,\n      // 存储地图投影对象\n\n      chapters: [],\n      // 存储章节名\n      activeChapter: null,\n      // 当前选中的章节索引\n\n      locations: [],\n      // 存储地点信息\n      selectedLocations: [],\n      // 存储选中的地点数据\n\n      timeData: [],\n      // 存储有时间信息的数据\n      selectedTimeData: [],\n      // 存储选中的时间数据\n\n      lines: [],\n      // 动态存储曲线数据\n\n      placeInfoDisplay: \"这里会显示地点信息\",\n      // 默认信息\n      placeImpoDisplay: \"这里会显示重要事件信息\" // 默认信息.\", // 默认重要事件信息\n    };\n  },\n  async mounted() {\n    await Promise.all([this.loadChapters(),\n    // 异步加载章节数据\n    this.loadLocationData(),\n    // 异步加载地点数据\n    this.loadTimeData() // 异步加载时间数据\n    ]);\n    this.initMap();\n  },\n  methods: {\n    // 加载章节名\n    async loadChapters() {\n      try {\n        const response = await fetch(\"/data/chapters.json\"); // JSON 文件路径\n        const data = await response.json();\n        this.chapters = data.chapters;\n      } catch (error) {\n        console.error(\"Failed to load chapters:\", error);\n      }\n    },\n    // 提取时间中的第一个年份\n    extractDate(timeString) {\n      if (timeString == null) {\n        return new Date(1940, 0, 1); // 如果没有时间，默认为 1940 年 1 月 1 日\n      }\n\n      // 1. 提取年份（括号中的四位数字）\n      const yearRegex = /[（(](\\d{4})[）)]/;\n      const yearMatch = timeString.match(yearRegex); // 获取年份匹配结果\n      const year = yearMatch ? parseInt(yearMatch[1], 10) : 1940; // 如果找到年份，返回年份，否则默认为 1940 年\n\n      // 2. 提取月份（如果有月字）\n      const monthRegex = /(\\d+)(?=月)/; // 匹配数字和后面的\"月\"\n      const monthMatch = timeString.match(monthRegex);\n      const month = monthMatch ? parseInt(monthMatch[1], 10) - 1 : 0; // 月份从0开始，没找到则默认为1月\n\n      // 3. 提取日期（如果有日字）\n      const dayRegex = /(\\d+)(?=日)/; // 匹配数字和后面的\"日\"\n      const dayMatch = timeString.match(dayRegex);\n      const day = dayMatch ? parseInt(dayMatch[1], 10) : 1; // 没找到则默认为1日\n\n      // 返回构造的日期对象\n      return new Date(year, month, day); // 返回根据提取的年份、月份、日期生成的日期对象\n    },\n    // 加载地点数据\n    async loadLocationData() {\n      try {\n        const response = await fetch(\"/data/dataset_total.json\"); // 数据文件路径\n        const data = await response.json();\n        // 只提取地名和经纬度\n        this.locations = data.map(item => ({\n          name: item[\"地名\"],\n          lon: item[\"地点经度（默认东经）\"],\n          lat: item[\"地点纬度（默认北纬）\"],\n          chapter: item[\"所属篇目\"],\n          // 添加“所属篇目”字段\n          route: item[\"详细路线\"] // 添加“详细路线”字段\n          // time: this.extractYear(item[\"游历时间\"])  // 提取年份\n        }));\n      } catch (error) {\n        console.error(\"Failed to load location data:\", error);\n      }\n    },\n    // 加载时间数据\n    async loadTimeData() {\n      try {\n        const response = await fetch(\"/data/dataset_time.json\"); // 数据文件路径\n        const data = await response.json();\n        // 只提取地名和经纬度\n        this.timeData = data.map(item => ({\n          name: item[\"地名\"],\n          lon: item[\"地点经度（默认东经）\"],\n          lat: item[\"地点纬度（默认北纬）\"],\n          chapter: item[\"所属篇目\"],\n          // 添加“所属篇目”字段\n          route: item[\"详细路线\"],\n          // 添加“详细路线”字段\n          time: this.extractDate(item[\"游历时间\"]),\n          // 提取年份\n          info: item[\"地点信息补充（来自百科）\"],\n          impo: item[\"重要事件\"]\n        }));\n        console.log(\"Original data length:\", data.length);\n        console.log(\"Processed timeData length:\", this.timeData.length);\n      } catch (error) {\n        console.error(\"Failed to load location data:\", error);\n      }\n    },\n    // 选择章节\n    selectChapter(index) {\n      this.activeChapter = index;\n      const selectedChapter = this.chapters[index];\n      console.log(\"1\");\n      // 筛选出\"所属篇目\"为选中章节的数据\n      this.selectedLocations = this.locations.filter(item => item.chapter === selectedChapter);\n      // 筛选出\"所属篇目\"为选中章节的数据\n      this.selectedTimeData = this.timeData.filter(item => item.chapter === selectedChapter);\n      // 关联地点和时间数据\n      this.relate();\n    },\n    // 绘制地图路径\n    async drawMapPath(svg, projection) {\n      return new Promise((resolve, reject) => {\n        d3.json(\"/data/china.geo.json\").then(mapData => {\n          const path = d3.geoPath().projection(projection);\n          svg.append(\"g\").selectAll(\"path\").data(mapData.features).enter().append(\"path\").attr(\"d\", path).style(\"fill\", \"#404466\").on(\"mouseover\", (event, d) => {\n            d3.select(event.currentTarget).style(\"fill\", \"#2CD8FF\");\n            this.createTooltip(svg, d, event);\n          }).on(\"mousemove\", event => {\n            this.removeTooltip();\n            this.createTooltip(svg, null, event);\n          }).on(\"mouseout\", event => {\n            d3.select(event.currentTarget).style(\"fill\", \"#404466\");\n            this.removeTooltip();\n          });\n\n          // 绘制完成后调用 resolve\n          resolve();\n        }).catch(reject); // 如果失败，则调用 reject\n      });\n    },\n    // 在选择章节时关联地图上的点和时间标尺\n    async relate() {\n      const container = this.$refs.mapContainer;\n      // const width = container.clientWidth;\n      const height = container.clientHeight;\n      // const centerX = width / 2;\n      const centerY = height / 2;\n      const svg = d3.select(this.$refs.mapContainer).select(\"svg\"); // 选择地图的 svg 容器\n      svg.selectAll(\"circle\").remove(); // 清除之前绘制的地点圆圈\n      svg.selectAll(\".location-line\").remove();\n      svg.selectAll(\".tick\").remove();\n      // 高亮当前章节的地点，灰色其他地点\n      await this.drawLocationCircles(svg, this.projection, this.selectedLocations);\n      await this.drawLocationLines(svg, this.projection, this.selectedLocations);\n\n      // 获取时间标尺容器的 g 元素\n      const timelineGroup = svg.select(\".timeline-group\");\n      const timelineWidth = svg.node().getBoundingClientRect().width;\n      const timelineHeight = 60; // 时间标尺的高度\n      // 1. 清除之前的时间连接线和时间点\n      svg.selectAll(\".timeline-link\").remove();\n      svg.selectAll(\".location-circle\").remove(); // 清除之前绘制的地点圆圈\n      timelineGroup.selectAll(\".timeline-point\").remove(); // axis-label清除之前的时间点\n      svg.selectAll(\".axis-label\").remove();\n      timelineGroup.selectAll(\".timeline-text\").remove();\n      // 清除之前绘制的时间轴\n      timelineGroup.select(\".timeline-axis\").remove();\n\n      // 时间数据范围\n      const minDate = d3.min(this.selectedTimeData, d => new Date(d.time));\n      const maxDate = d3.max(this.selectedTimeData, d => new Date(d.time));\n\n      // 计算时间跨度（以毫秒为单位）\n      const timeSpan = maxDate - minDate;\n\n      // 根据时间跨度动态调整最小和最大日期\n      let adjustedMinDate, adjustedMaxDate;\n      if (timeSpan <= 365 * 24 * 60 * 60 * 1000) {\n        // 小于一年\n        adjustedMinDate = d3.timeMonth.offset(minDate, -1); // 最小日期为实际最小日期的前1个月\n        adjustedMaxDate = d3.timeMonth.offset(maxDate, 1); // 最大日期为实际最大日期的后1个月\n      } else {\n        // 大于一年\n        adjustedMinDate = d3.timeYear.offset(minDate, -1); // 最小日期为实际最小日期的前1年\n        adjustedMaxDate = d3.timeYear.offset(maxDate, 1); // 最大日期为实际最大日期的后1年\n      }\n\n      // 2. 根据选中的时间数据，更新时间标尺\n      const xScale = d3.scaleTime().domain([adjustedMinDate, adjustedMaxDate]).range([30, timelineWidth - 30]);\n\n      // 动态设置时间刻度的间隔\n      const interval = timeSpan <= 365 * 24 * 60 * 60 * 1000 // 小于一年\n      ? d3.timeMonth.every(1) // 每月一个刻度\n      : d3.timeYear.every(1); // 每年一个刻度\n\n      // 绘制时间轴刻度\n      const axisBottom = d3.axisBottom(xScale).ticks(interval).tickFormat(d3.timeFormat(\"%Y-%m\"));\n      timelineGroup.append(\"g\").attr(\"class\", \"timeline-axis\").attr(\"transform\", `translate(0, ${centerY + 20 + timelineHeight / 2})`).call(axisBottom).selectAll(\".tick line\") // 修改刻度线的颜色\n      .attr(\"y1\", -30).attr(\"y2\", timelineHeight - 30).style(\"stroke\", \"#8918cf4a\") // 红色\n      .style(\"stroke-width\", \"1\"); // 调整线宽\n\n      // 隐藏横轴线 (即 path 元素)\n      timelineGroup.select(\".timeline-axis path\").style(\"display\", \"none\"); // 隐藏横轴线\n\n      // 绘制时间轴上的每个点\n      timelineGroup.selectAll(\".timeline-point\").data(this.selectedTimeData).enter().append(\"circle\").attr(\"class\", \"timeline-point\").attr(\"cx\", (d, i) => {\n        const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\n        const offsetX = i * 5; // 根据索引为点添加水平偏移（你可以调整这个值）\n        return baseX + offsetX; // 添加偏移后的X坐标\n      }).attr(\"cy\", centerY + 20 + timelineHeight / 2) // 在时间标尺中居中显示\n      .attr(\"r\", 6).attr(\"fill\", \"#FF0000\").style(\"opacity\", 0.7);\n      // 2. 绘制时间文本\n      timelineGroup.selectAll(\".timeline-text\").data(this.selectedTimeData).enter().append(\"text\").attr(\"class\", \"timeline-text\").attr(\"x\", (d, i) => {\n        const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\n        const offsetX = i * 5; // 根据索引为点添加水平偏移\n        return baseX + offsetX;\n      }).attr(\"y\", centerY + 40 + timelineHeight / 2) // 文字位置稍微在点的下方\n      .attr(\"dy\", -30) // 微调文字的垂直位置\n      .attr(\"text-anchor\", \"middle\") // 文字居中显示\n      .text(d => new Date(d.time).toLocaleDateString()) // 格式化时间为日期\n      .style(\"font-size\", \"12px\").style(\"fill\", \"#000000\");\n\n      // 3. 添加坐标轴名称（时间轴名称）\n      svg.append(\"text\").attr(\"class\", \"axis-label\").attr(\"x\", timelineWidth * 0.95) // 将文本放置在画布的中心\n      .attr(\"y\", centerY + 50 + timelineHeight / 2) // 放置在时间轴下方\n      .attr(\"text-anchor\", \"middle\").text(\"时间轴\") // 设置坐标轴的名称\n      .style(\"font-size\", \"16px\").style(\"font-weight\", \"bold\");\n\n      // 4. 绘制时间连接线（从每个地点到时间点）\n      const lineGroup = svg.append(\"g\").attr(\"class\", \"timeline-link\");\n\n      // 创建一个时间轴上的点与地图上地点之间的连接曲线\n      lineGroup.selectAll(\"path\") // 使用path而不是line来绘制曲线\n      .data(this.selectedTimeData).enter().append(\"path\").attr(\"class\", \"timeline-link\").attr(\"d\", (d, i) => {\n        // 为终点添加偏移量，避免重叠\n        const offsetX = i * 5; // 可以根据索引调整偏移量（例如 5px）\n        const offsetY = 0; // 可以根据需要在y方向上加偏移，调整终点的y位置\n\n        // 定义曲线的起点和终点以及控制点\n        const start = [xScale(new Date(d.time)) + offsetX, centerY + 20 + timelineHeight / 2 + offsetY]; // 时间点的x坐标和y坐标\n\n        // 地点的x坐标和y坐标，添加偏移量\n        const end = this.projection([d.lon, d.lat]);\n\n        // 定义控制点用于绘制曲线 (你可以根据需要调整控制点的位置)\n        const controlPoint = [(start[0] + end[0]) / 2,\n        // 控制点的x坐标\n        (start[1] + end[1]) / 2 - 50 // 控制点的y坐标，偏移使曲线有弯曲\n        ];\n\n        // 使用贝塞尔曲线进行绘制\n        return d3.line().curve(d3.curveCardinal).x(d => d[0]).y(d => d[1])([start, controlPoint, end]);\n        // 曲线的起点、控制点和终点\n      }).attr(\"fill\", \"none\").attr(\"stroke\", \"#FF0000\").attr(\"stroke-width\", 2).style(\"opacity\", 0.5).style(\"stroke-dasharray\", \"4,4\"); // 添加虚线效果\n      // 绘制每个时间点下方的圆角矩形\n      const rectWidth = 30; // 设置矩形宽度\n      const rectHeight = 80; // 设置矩形高度\n\n      lineGroup.selectAll(\".timeline-rect\").data(this.selectedTimeData).enter().append(\"rect\").attr(\"class\", \"timeline-rect\").attr(\"x\", (d, i) => {\n        const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\n        const offsetX = i * 5; // 根据索引为点添加水平偏移\n        return baseX + offsetX - rectWidth / 2; // 确保矩形居中\n      }).attr(\"y\", (d, i) => {\n        const baseY = centerY + 150; // 根据时间绘制位置\n        const offsetY = (-1) ** i * 60; // 根据索引为每个矩形添加垂直偏移\n        return baseY + offsetY; // 确保矩形有足够的垂直间距\n      }).attr(\"width\", rectWidth).attr(\"height\", rectHeight).attr(\"rx\", 8) // 圆角矩形\n      .attr(\"ry\", 8).attr(\"fill\", \"#FFD700\").on(\"click\", (event, d) => {\n        // 使用箭头函数\n        const placeImpo = d.impo;\n        const placeInfo = d.info;\n        this.placeImpoDisplay = placeImpo ? placeImpo : \"无\";\n        this.placeInfoDisplay = placeInfo ? placeInfo : \"无\";\n      }).on(\"mouseover\", function () {\n        d3.select(this) // 选择当前的矩形\n        .transition() // 添加过渡效果\n        .duration(300) // 设置过渡时间为300ms\n        .attr(\"fill\", \"#FF6347\") // 鼠标经过时改变矩形颜色\n        .attr(\"cursor\", \"pointer\") // 改变鼠标光标为手形\n        .style(\"opacity\", 0.8); // 改变透明度\n      }).on(\"mouseout\", function () {\n        d3.select(this) // 选择当前的矩形\n        .transition() // 添加过渡效果\n        .duration(300) // 设置过渡时间为300ms\n        .attr(\"fill\", \"#FFD700\") // 恢复原来的颜色\n        .style(\"opacity\", 1); // 恢复透明度\n      });\n\n      // 绘制每个矩形和时间点之间的连接线\n      lineGroup.selectAll(\".timeline-line\").data(this.selectedTimeData).enter().append(\"line\").attr(\"class\", \"timeline-line\").attr(\"x1\", (d, i) => {\n        const baseX = xScale(new Date(d.time)); // 时间点x坐标\n        const offsetX = i * 5; // 水平偏移\n        return baseX + offsetX;\n      }).attr(\"y1\", centerY + 20 + timelineHeight / 2) // 时间点y坐标\n      .attr(\"x2\", (d, i) => {\n        const baseX = xScale(new Date(d.time)); // 时间点x坐标\n        const offsetX = i * 5; // 水平偏移\n        return baseX + offsetX;\n      }).attr(\"y2\", (d, i) => {\n        const baseY = centerY + 150; // 根据时间绘制位置\n        const offsetY = (-1) ** i * 60; // 根据索引为每个矩形添加垂直偏移\n        return baseY + offsetY; // 确保矩形有足够的垂直间距\n      }).attr(\"stroke\", \"#FF0000\").attr(\"stroke-width\", 2).style(\"opacity\", 0.5);\n\n      // 在矩形中添加文本\n      lineGroup.selectAll(\".timeline-text\").data(this.selectedTimeData).enter().append(\"text\").attr(\"class\", \"timeline-text\").attr(\"x\", (d, i) => {\n        const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\n        const offsetX = i * 5; // 根据索引为点添加水平偏移\n        return baseX + offsetX;\n      }).attr(\"y\", (d, i) => {\n        const baseY = centerY + 170; // 根据时间绘制位置\n        const offsetY = (-1) ** i * 60; // 根据索引为每个矩形添加垂直偏移\n        return baseY + offsetY; // 确保矩形有足够的垂直间距\n      }).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"12px\").attr(\"fill\", \"#000\").text(d => d.name); // 显示选中的name字段\n\n      console.log(\"Relating data completed\");\n    },\n    // 绘制地点圆圈\n    async drawLocationCircles(svg, projection, locations) {\n      return new Promise(resolve => {\n        svg.append(\"g\").selectAll(\"circle\").data(this.locations).enter().append(\"circle\").attr(\"cx\", d => projection([d.lon, d.lat])[0]) // 经度和纬度转为坐标\n        .attr(\"cy\", d => projection([d.lon, d.lat])[1]).attr(\"r\", 5) // 圆圈半径\n        .attr(\"fill\", d => {\n          // 如果该地点属于当前章节，显示为红色，否则为灰色\n          return locations.includes(d) ? \"#FF0000\" : \"#808080\";\n        }) // 圆圈颜色为红色\n        .on(\"click\", d => {\n          console.log(`Clicked on location: ${d.name}`);\n        });\n\n        // 圆圈绘制完成后调用 resolve\n        resolve();\n      });\n    },\n    // 绘制地点之间的连接线\n    async drawLocationLines(svg, projection, locations) {\n      return new Promise(resolve => {\n        const lineGroup = svg.append(\"g\");\n        for (let i = 0; i < this.locations.length - 1; i++) {\n          const start = this.locations[i];\n          const end = this.locations[i + 1];\n          lineGroup.append(\"line\").attr(\"class\", \"location-line\") // 为每条线添加一个 class，便于后续清除\n          .attr(\"x1\", projection([start.lon, start.lat])[0]).attr(\"y1\", projection([start.lon, start.lat])[1]).attr(\"x2\", projection([end.lon, end.lat])[0]).attr(\"y2\", projection([end.lon, end.lat])[1]).attr(\"stroke\", locations.includes(start) && locations.includes(end) ? \"#FF0000\" : \"#808080\")\n          // 线的颜色\n          .attr(\"stroke-width\", 2); // 线的宽度\n        }\n\n        // 连接线绘制完成后调用 resolve\n        resolve();\n      });\n    },\n    async initMap() {\n      try {\n        // 获取 `mapContainer` 的 DOM 元素\n        const container = this.$refs.mapContainer;\n\n        // 定义地图投影\n        this.projection = d3.geoMercator().center([107, 20]) // 地图中心位置\n        .scale(400) // 设置缩放量\n        .translate([container.clientWidth / 2, container.clientHeight / 2]);\n\n        // 创建 SVG，宽高使用 CSS 控制\n        this.svg = d3.select(container).append(\"svg\").attr(\"preserveAspectRatio\", \"xMidYMid meet\") // 保持宽高比\n        .attr(\"viewBox\", `0 0 ${container.clientWidth} ${container.clientHeight}`);\n\n        // 绘制地图路径、地点圆圈、连接线等\n        await this.drawMapPath(this.svg, this.projection);\n        await this.drawLocationCircles(this.svg, this.projection, this.locations);\n        await this.drawLocationLines(this.svg, this.projection, this.locations);\n\n        // 初始化时间标尺\n        this.initTimeline(this.svg, container.clientHeight / 2); // 调整时间标尺的位置\n      } catch (error) {\n        console.error(\"地图数据加载失败:\", error);\n      }\n    },\n    initTimeline(mapSvg, mapHeight) {\n      // 检查 mapSvg 是否有效\n      if (!mapSvg || !mapSvg.node()) {\n        console.error('SVG is not initialized correctly.');\n        return;\n      }\n      const svg = mapSvg.append(\"g\").attr(\"class\", \"timeline-group\");\n      const timelineWidth = mapSvg.node().getBoundingClientRect().width;\n      const timelineHeight = 60; // 高度设置为固定的 60px\n\n      // 设置时间标尺的 y 坐标，使其位于地图下方\n      const timelineYPosition = mapHeight + 20; // 调整时间标尺的位置，放置在地图下方\n\n      // 创建一个时间轴的比例尺\n      const xScale = d3.scaleTime().domain([d3.min(this.timeData, d => new Date(d.time)), d3.max(this.timeData, d => new Date(d.time))]).range([0, timelineWidth]);\n\n      // 绘制时间线的路径\n      const line = d3.line().x(d => xScale(new Date(d.time))) // 根据时间来定位位置\n      .y(timelineHeight / 2) // 固定在垂直中心\n      .curve(d3.curveMonotoneX); // 平滑曲线\n      svg.append(\"path\").data([this.timeData]) // 将所有地点数据作为路径\n      .attr(\"d\", line).attr(\"fill\", \"none\").attr(\"stroke\", \"#8918cfc9\").attr(\"stroke-width\", 3).attr(\"marker-end\", \"url(#arrow)\") // 为路径添加箭头标记\n      .attr(\"transform\", `translate(0, ${timelineYPosition})`); // 设置时间标尺的位置\n\n      console.log(xScale(new Date(this.timeData[50].time))); // 打印时间对应的X坐标\n\n      // 可选：添加时间轴刻度\n      const ticks = xScale.ticks(d3.timeYear.every(1)); // 每年一格\n      svg.selectAll(\".tick\").data(ticks).enter().append(\"line\").attr(\"class\", \"tick\").attr(\"x1\", d => xScale(d)).attr(\"x2\", d => xScale(d)).attr(\"y1\", 0).attr(\"y2\", timelineHeight).attr(\"stroke\", \"#8918cf4a\").attr(\"stroke-width\", 1).attr(\"transform\", `translate(0, ${timelineYPosition})`); // 设置刻度的位置\n\n      // 定义箭头的marker\n      svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrow\") // 给箭头设置ID\n      .attr(\"viewBox\", \"0 0 10 10\") // 设置箭头的视口\n      .attr(\"refX\", 8) // 设置箭头的位置偏移量\n      .attr(\"refY\", 5) // 设置箭头的Y偏移量\n      .attr(\"markerWidth\", 4) // 箭头宽度\n      .attr(\"markerHeight\", 4) // 箭头高度\n      .attr(\"orient\", \"auto\") // 自动旋转以适应路径\n      .attr(\"transform\", `translate(0, ${timelineYPosition})`) // 设置刻度的位置\n      .append(\"path\").attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\") // 绘制箭头路径\n      .attr(\"fill\", \"#8918cfc9\"); // 设置箭头颜色\n    },\n    createTooltip(svg, d, event) {\n      const {\n        x,\n        y\n      } = this.mouseXY(svg, event);\n      svg.append(\"rect\").attr(\"id\", \"tooltip-box\").attr(\"x\", x).attr(\"y\", y).attr(\"width\", 100).attr(\"height\", 40).attr(\"fill\", \"#000\").attr(\"opacity\", 0.6);\n      svg.append(\"text\").attr(\"id\", \"tooltip-text\").attr(\"x\", x + 50).attr(\"y\", y + 25).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"14px\").attr(\"fill\", \"#fff\").text(d ? d.properties.name : \"\");\n    },\n    removeTooltip() {\n      d3.select(\"#tooltip-box\").remove();\n      d3.select(\"#tooltip-text\").remove();\n    },\n    mouseXY(svg, event) {\n      const rect = svg.node().getBoundingClientRect();\n      return {\n        x: event.clientX - rect.left,\n        y: event.clientY - rect.top\n      };\n    }\n  }\n};","map":{"version":3,"names":["d3","name","data","svg","projection","chapters","activeChapter","locations","selectedLocations","timeData","selectedTimeData","lines","placeInfoDisplay","placeImpoDisplay","mounted","Promise","all","loadChapters","loadLocationData","loadTimeData","initMap","methods","response","fetch","json","error","console","extractDate","timeString","Date","yearRegex","yearMatch","match","year","parseInt","monthRegex","monthMatch","month","dayRegex","dayMatch","day","map","item","lon","lat","chapter","route","time","info","impo","log","length","selectChapter","index","selectedChapter","filter","relate","drawMapPath","resolve","reject","then","mapData","path","geoPath","append","selectAll","features","enter","attr","style","on","event","d","select","currentTarget","createTooltip","removeTooltip","catch","container","$refs","mapContainer","height","clientHeight","centerY","remove","drawLocationCircles","drawLocationLines","timelineGroup","timelineWidth","node","getBoundingClientRect","width","timelineHeight","minDate","min","maxDate","max","timeSpan","adjustedMinDate","adjustedMaxDate","timeMonth","offset","timeYear","xScale","scaleTime","domain","range","interval","every","axisBottom","ticks","tickFormat","timeFormat","call","i","baseX","offsetX","text","toLocaleDateString","lineGroup","offsetY","start","end","controlPoint","line","curve","curveCardinal","x","y","rectWidth","rectHeight","baseY","placeImpo","placeInfo","transition","duration","includes","geoMercator","center","scale","translate","clientWidth","initTimeline","mapSvg","mapHeight","timelineYPosition","curveMonotoneX","mouseXY","properties","rect","clientX","left","clientY","top"],"sources":["D:\\desk\\数据可视化\\project\\xuxiake\\src\\components\\PageOne.vue"],"sourcesContent":["<template>\r\n  <div class=\"page-container\">\r\n    <!-- 左侧章节容器 -->\r\n    <div class=\"chapter-list\">\r\n      <div\r\n        v-for=\"(chapter, index) in chapters\"\r\n        :key=\"index\"\r\n        class=\"chapter-item\"\r\n        :class=\"{ active: activeChapter === index }\"\r\n        @click=\"selectChapter(index)\"\r\n      >\r\n        {{ chapter }}\r\n      </div>\r\n    </div>\r\n    <!-- 中间章节容器 -->\r\n    <div class=\"page-content\">\r\n      <!-- 矢量容器 -->\r\n      <div ref=\"mapContainer\" class=\"map-container\">\r\n        <img src=\"/images/south_china_sea.jpg\" alt=\"南海\" class=\"south-china-sea-image\" />\r\n      </div>\r\n    </div>\r\n    <!-- 右侧故事容器 -->   \r\n    <div class=\"story-content\">\r\n      <div id=\"place-impo-container\" class=\"top-content\">\r\n        <!-- 上面的内容 -->\r\n        <h3 class=\"title\">地点信息</h3>\r\n        <p class=\"inner-content\" v-html=\"placeInfoDisplay\"></p>\r\n      </div>\r\n      <div id=\"place-info-container\" class=\"bottom-content\">\r\n        <!-- 下面的内容 -->\r\n        <h3 class=\"title\">重要事件</h3>\r\n        <p class=\"inner-content\" v-html=\"placeImpoDisplay\"></p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from \"d3\";\r\n\r\nexport default {\r\n  name: \"PageOne\",\r\n  data() {\r\n    return {\r\n      svg: null,        // SVG 对象\r\n      projection: null, // 存储地图投影对象\r\n\r\n      chapters: [], // 存储章节名\r\n      activeChapter: null, // 当前选中的章节索引\r\n\r\n      locations: [], // 存储地点信息\r\n      selectedLocations: [], // 存储选中的地点数据\r\n\r\n      timeData: [], // 存储有时间信息的数据\r\n      selectedTimeData: [], // 存储选中的时间数据\r\n\r\n      lines: [],  // 动态存储曲线数据\r\n\r\n      placeInfoDisplay: \"这里会显示地点信息\", // 默认信息\r\n      placeImpoDisplay: \"这里会显示重要事件信息\", // 默认信息.\", // 默认重要事件信息\r\n    };\r\n  },\r\n  async mounted() {\r\n    await Promise.all([\r\n      this.loadChapters(), // 异步加载章节数据\r\n      this.loadLocationData(), // 异步加载地点数据\r\n      this.loadTimeData(),// 异步加载时间数据\r\n    ]);\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    // 加载章节名\r\n    async loadChapters() {\r\n      try {\r\n        const response = await fetch(\"/data/chapters.json\"); // JSON 文件路径\r\n        const data = await response.json();\r\n        this.chapters = data.chapters;\r\n      } catch (error) {\r\n        console.error(\"Failed to load chapters:\", error);\r\n      }\r\n    },\r\n    // 提取时间中的第一个年份\r\n    extractDate(timeString) {\r\n      if (timeString == null) {\r\n        return new Date(1940, 0, 1); // 如果没有时间，默认为 1940 年 1 月 1 日\r\n      }\r\n\r\n      // 1. 提取年份（括号中的四位数字）\r\n      const yearRegex = /[（(](\\d{4})[）)]/;\r\n      const yearMatch = timeString.match(yearRegex); // 获取年份匹配结果\r\n      const year = yearMatch ? parseInt(yearMatch[1], 10) : 1940;  // 如果找到年份，返回年份，否则默认为 1940 年\r\n\r\n      // 2. 提取月份（如果有月字）\r\n      const monthRegex = /(\\d+)(?=月)/;  // 匹配数字和后面的\"月\"\r\n      const monthMatch = timeString.match(monthRegex);\r\n      const month = monthMatch ? parseInt(monthMatch[1], 10) - 1 : 0;  // 月份从0开始，没找到则默认为1月\r\n\r\n      // 3. 提取日期（如果有日字）\r\n      const dayRegex = /(\\d+)(?=日)/;  // 匹配数字和后面的\"日\"\r\n      const dayMatch = timeString.match(dayRegex);\r\n      const day = dayMatch ? parseInt(dayMatch[1], 10) : 1;  // 没找到则默认为1日\r\n\r\n      // 返回构造的日期对象\r\n      return new Date(year, month, day);  // 返回根据提取的年份、月份、日期生成的日期对象\r\n    },\r\n\r\n    // 加载地点数据\r\n    async loadLocationData() {\r\n      try {\r\n        const response = await fetch(\"/data/dataset_total.json\"); // 数据文件路径\r\n        const data = await response.json();\r\n        // 只提取地名和经纬度\r\n        this.locations = data.map(item => ({\r\n          name: item[\"地名\"],\r\n          lon: item[\"地点经度（默认东经）\"],\r\n          lat: item[\"地点纬度（默认北纬）\"],\r\n          chapter: item[\"所属篇目\"],  // 添加“所属篇目”字段\r\n          route: item[\"详细路线\"],    // 添加“详细路线”字段\r\n          // time: this.extractYear(item[\"游历时间\"])  // 提取年份\r\n        }));\r\n        \r\n      } catch (error) {\r\n        console.error(\"Failed to load location data:\", error);\r\n      }\r\n    },\r\n    // 加载时间数据\r\n    async loadTimeData() {\r\n      try {\r\n        const response = await fetch(\"/data/dataset_time.json\"); // 数据文件路径\r\n        const data = await response.json();\r\n        // 只提取地名和经纬度\r\n        this.timeData = data.map(item => ({\r\n          name: item[\"地名\"],\r\n          lon: item[\"地点经度（默认东经）\"],\r\n          lat: item[\"地点纬度（默认北纬）\"],\r\n          chapter: item[\"所属篇目\"],  // 添加“所属篇目”字段\r\n          route: item[\"详细路线\"],    // 添加“详细路线”字段\r\n          time: this.extractDate(item[\"游历时间\"]),  // 提取年份\r\n          info: item[\"地点信息补充（来自百科）\"],\r\n          impo: item[\"重要事件\"],\r\n        }));\r\n        console.log(\"Original data length:\", data.length);\r\n        console.log(\"Processed timeData length:\", this.timeData.length);\r\n\r\n      } catch (error) {\r\n        console.error(\"Failed to load location data:\", error);\r\n      }\r\n    },\r\n\r\n    // 选择章节\r\n    selectChapter(index) {\r\n      this.activeChapter = index;\r\n      const selectedChapter = this.chapters[index];\r\n      console.log(\"1\");\r\n      // 筛选出\"所属篇目\"为选中章节的数据\r\n      this.selectedLocations = this.locations.filter(item => item.chapter === selectedChapter);\r\n      // 筛选出\"所属篇目\"为选中章节的数据\r\n      this.selectedTimeData = this.timeData.filter(item => item.chapter === selectedChapter);\r\n      // 关联地点和时间数据\r\n      this.relate();\r\n    },\r\n    // 绘制地图路径\r\n    async drawMapPath(svg, projection) {\r\n      return new Promise((resolve, reject) => {\r\n        d3.json(\"/data/china.geo.json\").then(mapData => {\r\n          const path = d3.geoPath().projection(projection);\r\n          svg.append(\"g\")\r\n            .selectAll(\"path\")\r\n            .data(mapData.features)\r\n            .enter()\r\n            .append(\"path\")\r\n            .attr(\"d\", path)\r\n            .style(\"fill\", \"#404466\")\r\n            .on(\"mouseover\", (event, d) => {\r\n              d3.select(event.currentTarget).style(\"fill\", \"#2CD8FF\");\r\n              this.createTooltip(svg, d, event);\r\n            })\r\n            .on(\"mousemove\", (event) => {\r\n              this.removeTooltip();\r\n              this.createTooltip(svg, null, event);\r\n            })\r\n            .on(\"mouseout\", (event) => {\r\n              d3.select(event.currentTarget).style(\"fill\", \"#404466\");\r\n              this.removeTooltip();\r\n            });\r\n\r\n          // 绘制完成后调用 resolve\r\n          resolve();\r\n        }).catch(reject); // 如果失败，则调用 reject\r\n      });\r\n    },\r\n    // 在选择章节时关联地图上的点和时间标尺\r\n    async relate() {\r\n      const container = this.$refs.mapContainer;\r\n      // const width = container.clientWidth;\r\n      const height = container.clientHeight;\r\n      // const centerX = width / 2;\r\n      const centerY = height / 2;\r\n\r\n      const svg = d3.select(this.$refs.mapContainer).select(\"svg\");  // 选择地图的 svg 容器\r\n      svg.selectAll(\"circle\").remove();  // 清除之前绘制的地点圆圈\r\n      svg.selectAll(\".location-line\").remove();\r\n      svg.selectAll(\".tick\").remove();\r\n      // 高亮当前章节的地点，灰色其他地点\r\n      await this.drawLocationCircles(svg, this.projection, this.selectedLocations);\r\n      await this.drawLocationLines(svg, this.projection, this.selectedLocations);\r\n      \r\n      // 获取时间标尺容器的 g 元素\r\n      const timelineGroup = svg.select(\".timeline-group\");\r\n      \r\n      const timelineWidth = svg.node().getBoundingClientRect().width;\r\n      const timelineHeight = 60;  // 时间标尺的高度\r\n      // 1. 清除之前的时间连接线和时间点\r\n      svg.selectAll(\".timeline-link\").remove();\r\n      svg.selectAll(\".location-circle\").remove();  // 清除之前绘制的地点圆圈\r\n      timelineGroup.selectAll(\".timeline-point\").remove(); // axis-label清除之前的时间点\r\n      svg.selectAll(\".axis-label\").remove();\r\n      timelineGroup.selectAll(\".timeline-text\").remove();\r\n      // 清除之前绘制的时间轴\r\n      timelineGroup.select(\".timeline-axis\").remove();\r\n\r\n      // 时间数据范围\r\n      const minDate = d3.min(this.selectedTimeData, d => new Date(d.time));\r\n      const maxDate = d3.max(this.selectedTimeData, d => new Date(d.time));\r\n\r\n      // 计算时间跨度（以毫秒为单位）\r\n      const timeSpan = maxDate - minDate;\r\n\r\n      // 根据时间跨度动态调整最小和最大日期\r\n      let adjustedMinDate, adjustedMaxDate;\r\n      if (timeSpan <= 365 * 24 * 60 * 60 * 1000) {  // 小于一年\r\n        adjustedMinDate = d3.timeMonth.offset(minDate, -1);  // 最小日期为实际最小日期的前1个月\r\n        adjustedMaxDate = d3.timeMonth.offset(maxDate, 1);   // 最大日期为实际最大日期的后1个月\r\n      } else {  // 大于一年\r\n        adjustedMinDate = d3.timeYear.offset(minDate, -1);   // 最小日期为实际最小日期的前1年\r\n        adjustedMaxDate = d3.timeYear.offset(maxDate, 1);    // 最大日期为实际最大日期的后1年\r\n      }\r\n\r\n      // 2. 根据选中的时间数据，更新时间标尺\r\n      const xScale = d3.scaleTime()\r\n        .domain([adjustedMinDate, adjustedMaxDate])\r\n        .range([30, timelineWidth - 30]);\r\n\r\n      // 动态设置时间刻度的间隔\r\n      const interval = timeSpan <= 365 * 24 * 60 * 60 * 1000 // 小于一年\r\n        ? d3.timeMonth.every(1)  // 每月一个刻度\r\n        : d3.timeYear.every(1);  // 每年一个刻度\r\n\r\n      // 绘制时间轴刻度\r\n      const axisBottom = d3.axisBottom(xScale).ticks(interval).tickFormat(d3.timeFormat(\"%Y-%m\"));\r\n      timelineGroup.append(\"g\")\r\n          .attr(\"class\", \"timeline-axis\")\r\n          .attr(\"transform\", `translate(0, ${centerY + 20 + timelineHeight / 2})`)\r\n          .call(axisBottom)\r\n          .selectAll(\".tick line\") // 修改刻度线的颜色\r\n          .attr(\"y1\", -30)\r\n          .attr(\"y2\", timelineHeight -30)\r\n          .style(\"stroke\", \"#8918cf4a\") // 红色\r\n          .style(\"stroke-width\", \"1\"); // 调整线宽\r\n\r\n      // 隐藏横轴线 (即 path 元素)\r\n      timelineGroup.select(\".timeline-axis path\")\r\n          .style(\"display\", \"none\"); // 隐藏横轴线\r\n\r\n      // 绘制时间轴上的每个点\r\n      timelineGroup.selectAll(\".timeline-point\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"class\", \"timeline-point\")\r\n        .attr(\"cx\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\r\n          const offsetX = i * 5;  // 根据索引为点添加水平偏移（你可以调整这个值）\r\n          return baseX + offsetX; // 添加偏移后的X坐标\r\n        })\r\n        .attr(\"cy\", centerY + 20 + timelineHeight / 2) // 在时间标尺中居中显示\r\n        .attr(\"r\", 6)\r\n        .attr(\"fill\", \"#FF0000\")\r\n        .style(\"opacity\", 0.7);      \r\n      // 2. 绘制时间文本\r\n      timelineGroup.selectAll(\".timeline-text\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"text\")\r\n        .attr(\"class\", \"timeline-text\")\r\n        .attr(\"x\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\r\n          const offsetX = i * 5;  // 根据索引为点添加水平偏移\r\n          return baseX + offsetX;\r\n        })\r\n        .attr(\"y\", centerY + 40 + timelineHeight / 2) // 文字位置稍微在点的下方\r\n        .attr(\"dy\", -30) // 微调文字的垂直位置\r\n        .attr(\"text-anchor\", \"middle\") // 文字居中显示\r\n        .text(d => new Date(d.time).toLocaleDateString()) // 格式化时间为日期\r\n        .style(\"font-size\", \"12px\")\r\n        .style(\"fill\", \"#000000\");\r\n\r\n      // 3. 添加坐标轴名称（时间轴名称）\r\n      svg.append(\"text\")\r\n        .attr(\"class\", \"axis-label\")\r\n        .attr(\"x\", (timelineWidth *0.95))  // 将文本放置在画布的中心\r\n        .attr(\"y\", centerY + 50 + timelineHeight / 2) // 放置在时间轴下方\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .text(\"时间轴\")  // 设置坐标轴的名称\r\n        .style(\"font-size\", \"16px\")\r\n        .style(\"font-weight\", \"bold\");\r\n\r\n      // 4. 绘制时间连接线（从每个地点到时间点）\r\n      const lineGroup = svg.append(\"g\").attr(\"class\", \"timeline-link\");\r\n\r\n\r\n      // 创建一个时间轴上的点与地图上地点之间的连接曲线\r\n      lineGroup.selectAll(\"path\")  // 使用path而不是line来绘制曲线\r\n          .data(this.selectedTimeData)\r\n          .enter()\r\n          .append(\"path\")\r\n          .attr(\"class\", \"timeline-link\")\r\n          .attr(\"d\", (d, i) => {\r\n            // 为终点添加偏移量，避免重叠\r\n            const offsetX = i * 5;  // 可以根据索引调整偏移量（例如 5px）\r\n            const offsetY = 0;  // 可以根据需要在y方向上加偏移，调整终点的y位置\r\n\r\n            // 定义曲线的起点和终点以及控制点\r\n            const start = [xScale(new Date(d.time)) + offsetX, centerY + 20 + timelineHeight / 2 + offsetY];  // 时间点的x坐标和y坐标\r\n            \r\n\r\n            // 地点的x坐标和y坐标，添加偏移量\r\n            const end = this.projection([d.lon, d.lat]);\r\n            \r\n\r\n            // 定义控制点用于绘制曲线 (你可以根据需要调整控制点的位置)\r\n            const controlPoint = [\r\n                (start[0] + end[0]) / 2, // 控制点的x坐标\r\n                (start[1] + end[1]) / 2 - 50  // 控制点的y坐标，偏移使曲线有弯曲\r\n            ];\r\n\r\n              // 使用贝塞尔曲线进行绘制\r\n            return d3.line().curve(d3.curveCardinal).x(d => d[0]).y(d => d[1])([start, controlPoint, end]);\r\n              // 曲线的起点、控制点和终点\r\n          })\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", \"#FF0000\")\r\n          .attr(\"stroke-width\", 2)\r\n          .style(\"opacity\", 0.5)\r\n          .style(\"stroke-dasharray\", \"4,4\");  // 添加虚线效果\r\n      // 绘制每个时间点下方的圆角矩形\r\n      const rectWidth = 30;  // 设置矩形宽度\r\n      const rectHeight = 80; // 设置矩形高度\r\n\r\n      lineGroup.selectAll(\".timeline-rect\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"class\", \"timeline-rect\")\r\n        .attr(\"x\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\r\n          const offsetX = i * 5;  // 根据索引为点添加水平偏移\r\n          return baseX + offsetX - rectWidth / 2; // 确保矩形居中\r\n        })\r\n        .attr(\"y\", (d, i) => {\r\n          const baseY = centerY + 150; // 根据时间绘制位置\r\n          const offsetY = (-1)**i * 60;  // 根据索引为每个矩形添加垂直偏移\r\n          return baseY + offsetY;  // 确保矩形有足够的垂直间距\r\n        })\r\n        .attr(\"width\", rectWidth)\r\n        .attr(\"height\", rectHeight)\r\n        .attr(\"rx\", 8)  // 圆角矩形\r\n        .attr(\"ry\", 8)\r\n        .attr(\"fill\", \"#FFD700\")\r\n        .on(\"click\", (event, d) => {  // 使用箭头函数\r\n          const placeImpo = d.impo;\r\n          const placeInfo = d.info;\r\n          this.placeImpoDisplay = placeImpo ? placeImpo : \"无\";\r\n          this.placeInfoDisplay = placeInfo ? placeInfo : \"无\";\r\n        \r\n        })\r\n        .on(\"mouseover\", function() {\r\n          d3.select(this)  // 选择当前的矩形\r\n            .transition()  // 添加过渡效果\r\n            .duration(300)  // 设置过渡时间为300ms\r\n            .attr(\"fill\", \"#FF6347\")  // 鼠标经过时改变矩形颜色\r\n            .attr(\"cursor\", \"pointer\")  // 改变鼠标光标为手形\r\n            .style(\"opacity\", 0.8);  // 改变透明度\r\n        })\r\n        .on(\"mouseout\", function() {\r\n          d3.select(this)  // 选择当前的矩形\r\n            .transition()  // 添加过渡效果\r\n            .duration(300)  // 设置过渡时间为300ms\r\n            .attr(\"fill\", \"#FFD700\")  // 恢复原来的颜色\r\n            .style(\"opacity\", 1);  // 恢复透明度\r\n        });\r\n\r\n\r\n      // 绘制每个矩形和时间点之间的连接线\r\n      lineGroup.selectAll(\".timeline-line\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"line\")\r\n        .attr(\"class\", \"timeline-line\")\r\n        .attr(\"x1\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 时间点x坐标\r\n          const offsetX = i * 5;  // 水平偏移\r\n          return baseX + offsetX;\r\n        })\r\n        .attr(\"y1\", centerY + 20 + timelineHeight / 2) // 时间点y坐标\r\n        .attr(\"x2\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 时间点x坐标\r\n          const offsetX = i * 5;  // 水平偏移\r\n          return baseX + offsetX;\r\n        })\r\n        .attr(\"y2\", (d, i) => {\r\n          const baseY = centerY+ 150; // 根据时间绘制位置\r\n          const offsetY = (-1)**i * 60;  // 根据索引为每个矩形添加垂直偏移\r\n          return baseY + offsetY;  // 确保矩形有足够的垂直间距\r\n        })\r\n        .attr(\"stroke\", \"#FF0000\")\r\n        .attr(\"stroke-width\", 2)\r\n        .style(\"opacity\", 0.5);\r\n\r\n      // 在矩形中添加文本\r\n      lineGroup.selectAll(\".timeline-text\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"text\")\r\n        .attr(\"class\", \"timeline-text\")\r\n        .attr(\"x\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\r\n          const offsetX = i * 5;  // 根据索引为点添加水平偏移\r\n          return baseX + offsetX;\r\n        })\r\n        .attr(\"y\", (d, i) => {\r\n          const baseY = centerY + 170; // 根据时间绘制位置\r\n          const offsetY = (-1)**i * 60;  // 根据索引为每个矩形添加垂直偏移\r\n          return baseY + offsetY;  // 确保矩形有足够的垂直间距\r\n        })\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"font-size\", \"12px\")\r\n        .attr(\"fill\", \"#000\")\r\n        .text(d => d.name);  // 显示选中的name字段\r\n\r\n\r\n      console.log(\"Relating data completed\");\r\n    },\r\n\r\n    // 绘制地点圆圈\r\n    async drawLocationCircles(svg, projection, locations) {\r\n      return new Promise((resolve) => {\r\n        svg.append(\"g\")\r\n          .selectAll(\"circle\")\r\n          .data(this.locations)\r\n          .enter()\r\n          .append(\"circle\")\r\n          .attr(\"cx\", (d) => projection([d.lon, d.lat])[0]) // 经度和纬度转为坐标\r\n          .attr(\"cy\", (d) => projection([d.lon, d.lat])[1])\r\n          .attr(\"r\", 5) // 圆圈半径\r\n          .attr(\"fill\", d => {\r\n            // 如果该地点属于当前章节，显示为红色，否则为灰色\r\n            return locations.includes(d) ? \"#FF0000\" : \"#808080\";\r\n          }) // 圆圈颜色为红色\r\n          .on(\"click\", (d) => {\r\n            console.log(`Clicked on location: ${d.name}`);\r\n          });\r\n\r\n        // 圆圈绘制完成后调用 resolve\r\n        resolve();\r\n      });\r\n    },\r\n\r\n    // 绘制地点之间的连接线\r\n    async drawLocationLines(svg, projection, locations) {\r\n      return new Promise((resolve) => {\r\n        const lineGroup = svg.append(\"g\");\r\n        for (let i = 0; i < this.locations.length - 1; i++) {\r\n          const start = this.locations[i];\r\n          const end = this.locations[i + 1];\r\n          lineGroup.append(\"line\")\r\n            .attr(\"class\", \"location-line\") // 为每条线添加一个 class，便于后续清除\r\n            .attr(\"x1\", projection([start.lon, start.lat])[0])\r\n            .attr(\"y1\", projection([start.lon, start.lat])[1])\r\n            .attr(\"x2\", projection([end.lon, end.lat])[0])\r\n            .attr(\"y2\", projection([end.lon, end.lat])[1])\r\n            .attr(\"stroke\", locations.includes(start)&&locations.includes(end) ? \"#FF0000\" : \"#808080\")\r\n           // 线的颜色\r\n            .attr(\"stroke-width\", 2); // 线的宽度\r\n        }\r\n\r\n        // 连接线绘制完成后调用 resolve\r\n        resolve();\r\n      });\r\n    },\r\n    async initMap() {\r\n      try {\r\n        // 获取 `mapContainer` 的 DOM 元素\r\n        const container = this.$refs.mapContainer;\r\n\r\n        // 定义地图投影\r\n        this.projection = d3.geoMercator()\r\n          .center([107, 20]) // 地图中心位置\r\n          .scale(400) // 设置缩放量\r\n          .translate([container.clientWidth / 2, container.clientHeight / 2]);\r\n\r\n        // 创建 SVG，宽高使用 CSS 控制\r\n        this.svg = d3\r\n          .select(container)\r\n          .append(\"svg\")\r\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\") // 保持宽高比\r\n          .attr(\"viewBox\", `0 0 ${container.clientWidth} ${container.clientHeight}`);\r\n\r\n        // 绘制地图路径、地点圆圈、连接线等\r\n        await this.drawMapPath(this.svg, this.projection);\r\n        await this.drawLocationCircles(this.svg, this.projection, this.locations);\r\n        await this.drawLocationLines(this.svg, this.projection, this.locations);\r\n\r\n        // 初始化时间标尺\r\n        this.initTimeline(this.svg, container.clientHeight / 2); // 调整时间标尺的位置\r\n      } catch (error) {\r\n        console.error(\"地图数据加载失败:\", error);\r\n      }\r\n    },\r\n    initTimeline(mapSvg, mapHeight) {\r\n      // 检查 mapSvg 是否有效\r\n      if (!mapSvg || !mapSvg.node()) {\r\n        console.error('SVG is not initialized correctly.');\r\n        return;\r\n      }\r\n      const svg = mapSvg.append(\"g\").attr(\"class\", \"timeline-group\");\r\n\r\n      const timelineWidth = mapSvg.node().getBoundingClientRect().width;\r\n      const timelineHeight = 60;  // 高度设置为固定的 60px\r\n\r\n      // 设置时间标尺的 y 坐标，使其位于地图下方\r\n      const timelineYPosition = mapHeight + 20; // 调整时间标尺的位置，放置在地图下方\r\n\r\n      // 创建一个时间轴的比例尺\r\n      const xScale = d3.scaleTime()\r\n        .domain([d3.min(this.timeData, d => new Date(d.time)),\r\n          d3.max(this.timeData, d => new Date(d.time))])\r\n        .range([0, timelineWidth]);\r\n\r\n      // 绘制时间线的路径\r\n      const line = d3.line()\r\n        .x(d => xScale(new Date(d.time)))  // 根据时间来定位位置\r\n        .y(timelineHeight / 2)  // 固定在垂直中心\r\n        .curve(d3.curveMonotoneX);  // 平滑曲线\r\n      svg.append(\"path\")\r\n        .data([this.timeData]) // 将所有地点数据作为路径\r\n        .attr(\"d\", line)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", \"#8918cfc9\")\r\n        .attr(\"stroke-width\", 3)\r\n        .attr(\"marker-end\", \"url(#arrow)\")  // 为路径添加箭头标记\r\n        .attr(\"transform\", `translate(0, ${timelineYPosition})`); // 设置时间标尺的位置\r\n\r\n      console.log(xScale(new Date(this.timeData[50].time))); // 打印时间对应的X坐标\r\n\r\n      // 可选：添加时间轴刻度\r\n      const ticks = xScale.ticks(d3.timeYear.every(1)); // 每年一格\r\n      svg.selectAll(\".tick\")\r\n        .data(ticks)\r\n        .enter().append(\"line\")\r\n        .attr(\"class\", \"tick\")\r\n        .attr(\"x1\", d => xScale(d))\r\n        .attr(\"x2\", d => xScale(d))\r\n        .attr(\"y1\", 0)\r\n        .attr(\"y2\", timelineHeight)\r\n        .attr(\"stroke\", \"#8918cf4a\")\r\n        .attr(\"stroke-width\", 1)\r\n        .attr(\"transform\", `translate(0, ${timelineYPosition})`); // 设置刻度的位置\r\n\r\n      // 定义箭头的marker\r\n      svg.append(\"defs\").append(\"marker\")\r\n        .attr(\"id\", \"arrow\")  // 给箭头设置ID\r\n        .attr(\"viewBox\", \"0 0 10 10\")  // 设置箭头的视口\r\n        .attr(\"refX\", 8)  // 设置箭头的位置偏移量\r\n        .attr(\"refY\", 5)  // 设置箭头的Y偏移量\r\n        .attr(\"markerWidth\", 4)  // 箭头宽度\r\n        .attr(\"markerHeight\", 4)  // 箭头高度\r\n        .attr(\"orient\", \"auto\")  // 自动旋转以适应路径\r\n        .attr(\"transform\", `translate(0, ${timelineYPosition})`) // 设置刻度的位置\r\n        .append(\"path\")\r\n        .attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\")  // 绘制箭头路径\r\n        .attr(\"fill\", \"#8918cfc9\");  // 设置箭头颜色\r\n        \r\n    },    \r\n\r\n    \r\n    createTooltip(svg, d, event) {\r\n      const { x, y } = this.mouseXY(svg, event);\r\n\r\n      svg\r\n        .append(\"rect\")\r\n        .attr(\"id\", \"tooltip-box\")\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"width\", 100)\r\n        .attr(\"height\", 40)\r\n        .attr(\"fill\", \"#000\")\r\n        .attr(\"opacity\", 0.6);\r\n\r\n      svg\r\n        .append(\"text\")\r\n        .attr(\"id\", \"tooltip-text\")\r\n        .attr(\"x\", x + 50)\r\n        .attr(\"y\", y + 25)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"font-size\", \"14px\")\r\n        .attr(\"fill\", \"#fff\")\r\n        .text(d ? d.properties.name : \"\");\r\n    },\r\n    removeTooltip() {\r\n      d3.select(\"#tooltip-box\").remove();\r\n      d3.select(\"#tooltip-text\").remove();\r\n    },\r\n    mouseXY(svg, event) {\r\n      const rect = svg.node().getBoundingClientRect();\r\n      return { x: event.clientX - rect.left, y: event.clientY - rect.top };\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.page-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-start;  /* 内容从左侧开始 */\r\n  padding-top: 50px; /* 给顶部导航栏留空间 */\r\n  padding-bottom: 0px;\r\n  width: 100vw;\r\n  height: calc(100vh - padding-top - padding-bottom); /* 减去顶部和底部 padding */\r\n  overflow: hidden;\r\n   /* 根据需要调整此值，避免与导航栏重叠 */\r\n}\r\n.chapter-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 20%; /* 动态调整宽度 */\r\n  max-width: 250px; /* 最大宽度限制 */\r\n  min-width: 150px; /* 最小宽度限制 */\r\n  padding-top: 15px;\r\n  padding-bottom: 15px;\r\n  height: calc(100% - padding-top - padding-bottom);\r\n  overflow-y: auto;\r\n  background-color: #ffadad;\r\n  border-right: 1px solid #ddd;\r\n  box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);\r\n  flex-shrink: 0; /* 防止缩小 */\r\n}\r\n.chapter-item {\r\n  padding: 10px;\r\n  margin: 5px 10px 5px 12px;\r\n  border-radius: 8px;\r\n  background-color: #ffffff;\r\n  color: #333;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s, color 0.3s;\r\n}\r\n.chapter-item:hover {\r\n  background-color: #e0f7fa;\r\n  color: #00796b;\r\n}\r\n\r\n.chapter-item.active {\r\n  background-color: #00796b;\r\n  color: #ffffff;\r\n}\r\n.story-content{\r\n  flex-direction: column;  /* 子容器上下排列 */\r\n  width: 30%;\r\n  max-width: 340px; /* 最大宽度限制 */\r\n  min-width: 250px; /* 最小宽度限制 */\r\n  flex-shrink: 0; /* 防止缩小 */\r\n  padding-right: 40px; \r\n  padding-top: 40px;\r\n  padding-bottom: 40px;\r\n  padding-left: 45px;\r\n  height: calc(100% - padding-top - padding-bottom);\r\n  display: flex;\r\n  justify-content: center; /* 垂直方向居中 */\r\n  align-items: center;\r\n  background-color: #3cdb9b7a;\r\n}\r\n.page-content {\r\n  flex-direction: column;  /* 子容器上下排列 */\r\n  flex-grow: 1; /* 填充剩余空间 */\r\n  width: 50%;  /* 不设置固定宽度 */\r\n  height: 100%;            /* 父容器占满可用空间 */\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  background-color: #8918cf4a;\r\n}\r\n.map-container {\r\n  position: relative; /* 保证子元素可以相对定位 */\r\n  margin: 0;\r\n  width: 100%; /* 使用百分比宽度适配父容器 */\r\n  height: 100%; /* 使用百分比高度适配父容器 */\r\n  display: flex; /* 使用 flex 布局 */\r\n  justify-content: center; /* 水平方向居中 */\r\n  align-items: flex-start; /* 垂直方向顶部对齐 */\r\n  overflow: hidden; /* 隐藏超出的部分 */\r\n  background-color: #3cb1db4a;\r\n  z-index: 2;\r\n}\r\n.map-container svg {\r\n  width: 60%; /* 宽度占比 */\r\n  height: 90%; /* 高度占比 */\r\n}\r\n\r\n.south-china-sea-image {\r\n  position: absolute;\r\n  top: 55%; /* 调整位置 */\r\n  left: 60%;\r\n  transform: translate(-50%, -50%); /* 居中 */\r\n  width: 5%; /* 调整图片大小 */\r\n  max-width: 10vw; /* 根据屏幕宽度限制图片大小 */\r\n  max-height: 15vw; /* 根据屏幕高度限制图片大小 */\r\n  height: auto; /* 保持图片比例 */\r\n  z-index: 1000; /* 根据需要调整叠加次序 */\r\n}\r\n.top-content {\r\n  width: 100%;\r\n  height: 50%;\r\n  background-color: #f9f9f9;\r\n  margin-bottom: 15px; /* 为了分隔上下内容 */\r\n  overflow-y: auto;  /* 允许内容滚动 */\r\n}\r\n\r\n.bottom-content {\r\n  width: 100%;\r\n  height: 50%;\r\n  background-color: #f0f0f0;\r\n  overflow-y: auto;  /* 允许内容滚动 */\r\n}\r\n.inner-content{\r\n  font-size: 20px;\r\n  color: #333;\r\n  line-height: 2.0;\r\n  margin-bottom: 10px;\r\n  text-indent: 2em;  /* 首段空两格 */\r\n  overflow-y: auto;  /* 超过高度时出现滚动条 */\r\n}\r\n.title {\r\n  font-size: 36px;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}