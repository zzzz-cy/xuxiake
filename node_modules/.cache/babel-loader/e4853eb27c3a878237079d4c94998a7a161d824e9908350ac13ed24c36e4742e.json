{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"page-container\"\n};\nconst _hoisted_2 = {\n  class: \"chapter-list\"\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  class: \"page-content\"\n};\nconst _hoisted_5 = {\n  ref: \"mapContainer\",\n  class: \"map-container\"\n};\nconst _hoisted_6 = {\n  class: \"story-content\"\n};\nconst _hoisted_7 = {\n  id: \"place-impo-container\",\n  class: \"top-content\"\n};\nconst _hoisted_8 = [\"innerHTML\"];\nconst _hoisted_9 = {\n  id: \"place-info-container\",\n  class: \"bottom-content\"\n};\nconst _hoisted_10 = [\"innerHTML\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 左侧章节容器 \"), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.chapters, (chapter, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"chapter-item\", {\n        active: $data.activeChapter === index\n      }]),\n      onClick: $event => $options.selectChapter(index)\n    }, _toDisplayString(chapter), 11 /* TEXT, CLASS, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 中间章节容器 \"), _createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" 矢量容器 \"), _createElementVNode(\"div\", _hoisted_5, _cache[0] || (_cache[0] = [_createElementVNode(\"img\", {\n    src: \"/images/south_china_sea.jpg\",\n    alt: \"南海\",\n    class: \"south-china-sea-image\"\n  }, null, -1 /* HOISTED */)]), 512 /* NEED_PATCH */)]), _createCommentVNode(\" 右侧故事容器 \"), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createCommentVNode(\" 上面的内容 \"), _cache[1] || (_cache[1] = _createElementVNode(\"h3\", {\n    class: \"title\"\n  }, \"地点信息\", -1 /* HOISTED */)), _createElementVNode(\"p\", {\n    class: \"inner-content\",\n    innerHTML: $data.placeInfoDisplay\n  }, null, 8 /* PROPS */, _hoisted_8)]), _createElementVNode(\"div\", _hoisted_9, [_createCommentVNode(\" 下面的内容 \"), _cache[2] || (_cache[2] = _createElementVNode(\"h3\", {\n    class: \"title\"\n  }, \"重要事件\", -1 /* HOISTED */)), _createElementVNode(\"p\", {\n    class: \"inner-content\",\n    innerHTML: $data.placeImpoDisplay\n  }, null, 8 /* PROPS */, _hoisted_10)])])]);\n}","map":{"version":3,"names":["class","ref","id","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","chapters","chapter","index","key","_normalizeClass","active","activeChapter","onClick","$event","$options","selectChapter","_hoisted_3","_hoisted_4","_hoisted_5","_cache","src","alt","_hoisted_6","_hoisted_7","innerHTML","placeInfoDisplay","_hoisted_8","_hoisted_9","placeImpoDisplay","_hoisted_10"],"sources":["D:\\desk\\数据可视化\\project\\xuxiake\\src\\components\\PageOne.vue"],"sourcesContent":["<template>\r\n  <div class=\"page-container\">\r\n    <!-- 左侧章节容器 -->\r\n    <div class=\"chapter-list\">\r\n      <div\r\n        v-for=\"(chapter, index) in chapters\"\r\n        :key=\"index\"\r\n        class=\"chapter-item\"\r\n        :class=\"{ active: activeChapter === index }\"\r\n        @click=\"selectChapter(index)\"\r\n      >\r\n        {{ chapter }}\r\n      </div>\r\n    </div>\r\n    <!-- 中间章节容器 -->\r\n    <div class=\"page-content\">\r\n      <!-- 矢量容器 -->\r\n      <div ref=\"mapContainer\" class=\"map-container\">\r\n        <img src=\"/images/south_china_sea.jpg\" alt=\"南海\" class=\"south-china-sea-image\" />\r\n      </div>\r\n    </div>\r\n    <!-- 右侧故事容器 -->   \r\n    <div class=\"story-content\">\r\n      <div id=\"place-impo-container\" class=\"top-content\">\r\n        <!-- 上面的内容 -->\r\n        <h3 class=\"title\">地点信息</h3>\r\n        <p class=\"inner-content\" v-html=\"placeInfoDisplay\"></p>\r\n      </div>\r\n      <div id=\"place-info-container\" class=\"bottom-content\">\r\n        <!-- 下面的内容 -->\r\n        <h3 class=\"title\">重要事件</h3>\r\n        <p class=\"inner-content\" v-html=\"placeImpoDisplay\"></p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from \"d3\";\r\n\r\nexport default {\r\n  name: \"PageOne\",\r\n  data() {\r\n    return {\r\n      svg: null,        // SVG 对象\r\n      projection: null, // 存储地图投影对象\r\n\r\n      chapters: [], // 存储章节名\r\n      activeChapter: null, // 当前选中的章节索引\r\n\r\n      locations: [], // 存储地点信息\r\n      selectedLocations: [], // 存储选中的地点数据\r\n\r\n      timeData: [], // 存储有时间信息的数据\r\n      selectedTimeData: [], // 存储选中的时间数据\r\n\r\n      lines: [],  // 动态存储曲线数据\r\n\r\n      placeInfoDisplay: \"这里会显示地点信息\", // 默认信息\r\n      placeImpoDisplay: \"这里会显示重要事件信息\", // 默认信息.\", // 默认重要事件信息\r\n    };\r\n  },\r\n  async mounted() {\r\n    await Promise.all([\r\n      this.loadChapters(), // 异步加载章节数据\r\n      this.loadLocationData(), // 异步加载地点数据\r\n      this.loadTimeData(),// 异步加载时间数据\r\n    ]);\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    // 加载章节名\r\n    async loadChapters() {\r\n      try {\r\n        const response = await fetch(\"/data/chapters.json\"); // JSON 文件路径\r\n        const data = await response.json();\r\n        this.chapters = data.chapters;\r\n      } catch (error) {\r\n        console.error(\"Failed to load chapters:\", error);\r\n      }\r\n    },\r\n    // 提取时间中的第一个年份\r\n    extractDate(timeString) {\r\n      if (timeString == null) {\r\n        return new Date(1940, 0, 1); // 如果没有时间，默认为 1940 年 1 月 1 日\r\n      }\r\n\r\n      // 1. 提取年份（括号中的四位数字）\r\n      const yearRegex = /[（(](\\d{4})[）)]/;\r\n      const yearMatch = timeString.match(yearRegex); // 获取年份匹配结果\r\n      const year = yearMatch ? parseInt(yearMatch[1], 10) : 1940;  // 如果找到年份，返回年份，否则默认为 1940 年\r\n\r\n      // 2. 提取月份（如果有月字）\r\n      const monthRegex = /(\\d+)(?=月)/;  // 匹配数字和后面的\"月\"\r\n      const monthMatch = timeString.match(monthRegex);\r\n      const month = monthMatch ? parseInt(monthMatch[1], 10) - 1 : 0;  // 月份从0开始，没找到则默认为1月\r\n\r\n      // 3. 提取日期（如果有日字）\r\n      const dayRegex = /(\\d+)(?=日)/;  // 匹配数字和后面的\"日\"\r\n      const dayMatch = timeString.match(dayRegex);\r\n      const day = dayMatch ? parseInt(dayMatch[1], 10) : 1;  // 没找到则默认为1日\r\n\r\n      // 返回构造的日期对象\r\n      return new Date(year, month, day);  // 返回根据提取的年份、月份、日期生成的日期对象\r\n    },\r\n\r\n    // 加载地点数据\r\n    async loadLocationData() {\r\n      try {\r\n        const response = await fetch(\"/data/dataset_total.json\"); // 数据文件路径\r\n        const data = await response.json();\r\n        // 只提取地名和经纬度\r\n        this.locations = data.map(item => ({\r\n          name: item[\"地名\"],\r\n          lon: item[\"地点经度（默认东经）\"],\r\n          lat: item[\"地点纬度（默认北纬）\"],\r\n          chapter: item[\"所属篇目\"],  // 添加“所属篇目”字段\r\n          route: item[\"详细路线\"],    // 添加“详细路线”字段\r\n          // time: this.extractYear(item[\"游历时间\"])  // 提取年份\r\n        }));\r\n        \r\n      } catch (error) {\r\n        console.error(\"Failed to load location data:\", error);\r\n      }\r\n    },\r\n    // 加载时间数据\r\n    async loadTimeData() {\r\n      try {\r\n        const response = await fetch(\"/data/dataset_time.json\"); // 数据文件路径\r\n        const data = await response.json();\r\n        // 只提取地名和经纬度\r\n        this.timeData = data.map(item => ({\r\n          name: item[\"地名\"],\r\n          lon: item[\"地点经度（默认东经）\"],\r\n          lat: item[\"地点纬度（默认北纬）\"],\r\n          chapter: item[\"所属篇目\"],  // 添加“所属篇目”字段\r\n          route: item[\"详细路线\"],    // 添加“详细路线”字段\r\n          time: this.extractDate(item[\"游历时间\"]),  // 提取年份\r\n          info: item[\"地点信息补充（来自百科）\"],\r\n          impo: item[\"重要事件\"],\r\n        }));\r\n        console.log(\"Original data length:\", data.length);\r\n        console.log(\"Processed timeData length:\", this.timeData.length);\r\n\r\n      } catch (error) {\r\n        console.error(\"Failed to load location data:\", error);\r\n      }\r\n    },\r\n\r\n    // 选择章节\r\n    selectChapter(index) {\r\n      this.activeChapter = index;\r\n      const selectedChapter = this.chapters[index];\r\n      console.log(\"1\");\r\n      // 筛选出\"所属篇目\"为选中章节的数据\r\n      this.selectedLocations = this.locations.filter(item => item.chapter === selectedChapter);\r\n      // 筛选出\"所属篇目\"为选中章节的数据\r\n      this.selectedTimeData = this.timeData.filter(item => item.chapter === selectedChapter);\r\n      // 关联地点和时间数据\r\n      this.relate();\r\n    },\r\n    // 绘制地图路径\r\n    async drawMapPath(svg, projection) {\r\n      return new Promise((resolve, reject) => {\r\n        d3.json(\"/data/china.geo.json\").then(mapData => {\r\n          const path = d3.geoPath().projection(projection);\r\n          svg.append(\"g\")\r\n            .selectAll(\"path\")\r\n            .data(mapData.features)\r\n            .enter()\r\n            .append(\"path\")\r\n            .attr(\"d\", path)\r\n            .style(\"fill\", \"#404466\")\r\n            .on(\"mouseover\", (event, d) => {\r\n              d3.select(event.currentTarget).style(\"fill\", \"#2CD8FF\");\r\n              this.createTooltip(svg, d, event);\r\n            })\r\n            .on(\"mousemove\", (event) => {\r\n              this.removeTooltip();\r\n              this.createTooltip(svg, null, event);\r\n            })\r\n            .on(\"mouseout\", (event) => {\r\n              d3.select(event.currentTarget).style(\"fill\", \"#404466\");\r\n              this.removeTooltip();\r\n            });\r\n\r\n          // 绘制完成后调用 resolve\r\n          resolve();\r\n        }).catch(reject); // 如果失败，则调用 reject\r\n      });\r\n    },\r\n    // 在选择章节时关联地图上的点和时间标尺\r\n    async relate() {\r\n      const svg = d3.select(this.$refs.mapContainer).select(\"svg\");  // 选择地图的 svg 容器\r\n      svg.selectAll(\"circle\").remove();  // 清除之前绘制的地点圆圈\r\n      svg.selectAll(\".location-line\").remove();\r\n      svg.selectAll(\".tick\").remove();\r\n      // 高亮当前章节的地点，灰色其他地点\r\n      await this.drawLocationCircles(svg, this.projection, this.selectedLocations);\r\n      await this.drawLocationLines(svg, this.projection, this.selectedLocations);\r\n      \r\n      // 获取时间标尺容器的 g 元素\r\n      const timelineGroup = svg.select(\".timeline-group\");\r\n      \r\n      const timelineWidth = svg.node().getBoundingClientRect().width;\r\n      const timelineHeight = 60;  // 时间标尺的高度\r\n      // 1. 清除之前的时间连接线和时间点\r\n      svg.selectAll(\".timeline-link\").remove();\r\n      svg.selectAll(\".location-circle\").remove();  // 清除之前绘制的地点圆圈\r\n      timelineGroup.selectAll(\".timeline-point\").remove(); // axis-label清除之前的时间点\r\n      svg.selectAll(\".axis-label\").remove();\r\n      timelineGroup.selectAll(\".timeline-text\").remove();\r\n      // 清除之前绘制的时间轴\r\n      timelineGroup.select(\".timeline-axis\").remove();\r\n\r\n      // 时间数据范围\r\n      const minDate = d3.min(this.selectedTimeData, d => new Date(d.time));\r\n      const maxDate = d3.max(this.selectedTimeData, d => new Date(d.time));\r\n\r\n      // 计算时间跨度（以毫秒为单位）\r\n      const timeSpan = maxDate - minDate;\r\n\r\n      // 根据时间跨度动态调整最小和最大日期\r\n      let adjustedMinDate, adjustedMaxDate;\r\n      if (timeSpan <= 365 * 24 * 60 * 60 * 1000) {  // 小于一年\r\n        adjustedMinDate = d3.timeMonth.offset(minDate, -1);  // 最小日期为实际最小日期的前1个月\r\n        adjustedMaxDate = d3.timeMonth.offset(maxDate, 1);   // 最大日期为实际最大日期的后1个月\r\n      } else {  // 大于一年\r\n        adjustedMinDate = d3.timeYear.offset(minDate, -1);   // 最小日期为实际最小日期的前1年\r\n        adjustedMaxDate = d3.timeYear.offset(maxDate, 1);    // 最大日期为实际最大日期的后1年\r\n      }\r\n\r\n      // 2. 根据选中的时间数据，更新时间标尺\r\n      const xScale = d3.scaleTime()\r\n        .domain([adjustedMinDate, adjustedMaxDate])\r\n        .range([30, timelineWidth - 30]);\r\n\r\n      // 动态设置时间刻度的间隔\r\n      const interval = timeSpan <= 365 * 24 * 60 * 60 * 1000 // 小于一年\r\n        ? d3.timeMonth.every(1)  // 每月一个刻度\r\n        : d3.timeYear.every(1);  // 每年一个刻度\r\n\r\n      // 绘制时间轴刻度\r\n      const axisBottom = d3.axisBottom(xScale).ticks(interval).tickFormat(d3.timeFormat(\"%Y-%m\"));\r\n      timelineGroup.append(\"g\")\r\n          .attr(\"class\", \"timeline-axis\")\r\n          .attr(\"transform\", `translate(0, ${620 + timelineHeight / 2})`)\r\n          .call(axisBottom)\r\n          .selectAll(\".tick line\") // 修改刻度线的颜色\r\n          .attr(\"y1\", -30)\r\n          .attr(\"y2\", timelineHeight -30)\r\n          .style(\"stroke\", \"#8918cf4a\") // 红色\r\n          .style(\"stroke-width\", \"1\"); // 调整线宽\r\n\r\n      // 隐藏横轴线 (即 path 元素)\r\n      timelineGroup.select(\".timeline-axis path\")\r\n          .style(\"display\", \"none\"); // 隐藏横轴线\r\n\r\n      // 绘制时间轴上的每个点\r\n      timelineGroup.selectAll(\".timeline-point\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"class\", \"timeline-point\")\r\n        .attr(\"cx\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\r\n          const offsetX = i * 5;  // 根据索引为点添加水平偏移（你可以调整这个值）\r\n          return baseX + offsetX; // 添加偏移后的X坐标\r\n        })\r\n        .attr(\"cy\", 620 + timelineHeight / 2) // 在时间标尺中居中显示\r\n        .attr(\"r\", 6)\r\n        .attr(\"fill\", \"#FF0000\")\r\n        .style(\"opacity\", 0.7);      \r\n      // 2. 绘制时间文本\r\n      timelineGroup.selectAll(\".timeline-text\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"text\")\r\n        .attr(\"class\", \"timeline-text\")\r\n        .attr(\"x\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\r\n          const offsetX = i * 5;  // 根据索引为点添加水平偏移\r\n          return baseX + offsetX;\r\n        })\r\n        .attr(\"y\", 640 + timelineHeight / 2) // 文字位置稍微在点的下方\r\n        .attr(\"dy\", -30) // 微调文字的垂直位置\r\n        .attr(\"text-anchor\", \"middle\") // 文字居中显示\r\n        .text(d => new Date(d.time).toLocaleDateString()) // 格式化时间为日期\r\n        .style(\"font-size\", \"12px\")\r\n        .style(\"fill\", \"#000000\");\r\n\r\n      // 3. 添加坐标轴名称（时间轴名称）\r\n      svg.append(\"text\")\r\n        .attr(\"class\", \"axis-label\")\r\n        .attr(\"x\", (timelineWidth *0.95))  // 将文本放置在画布的中心\r\n        .attr(\"y\", 650 + timelineHeight / 2) // 放置在时间轴下方\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .text(\"时间轴\")  // 设置坐标轴的名称\r\n        .style(\"font-size\", \"16px\")\r\n        .style(\"font-weight\", \"bold\");\r\n\r\n      // 4. 绘制时间连接线（从每个地点到时间点）\r\n      const lineGroup = svg.append(\"g\").attr(\"class\", \"timeline-link\");\r\n\r\n\r\n      // 创建一个时间轴上的点与地图上地点之间的连接曲线\r\n      lineGroup.selectAll(\"path\")  // 使用path而不是line来绘制曲线\r\n          .data(this.selectedTimeData)\r\n          .enter()\r\n          .append(\"path\")\r\n          .attr(\"class\", \"timeline-link\")\r\n          .attr(\"d\", (d, i) => {\r\n            // 为终点添加偏移量，避免重叠\r\n            const offsetX = i * 5;  // 可以根据索引调整偏移量（例如 5px）\r\n            const offsetY = 0;  // 可以根据需要在y方向上加偏移，调整终点的y位置\r\n\r\n            // 定义曲线的起点和终点以及控制点\r\n            const start = [xScale(new Date(d.time)) + offsetX, 620 + timelineHeight / 2 + offsetY];  // 时间点的x坐标和y坐标\r\n            \r\n\r\n            // 地点的x坐标和y坐标，添加偏移量\r\n            const end = this.projection([d.lon, d.lat]);\r\n            \r\n\r\n            // 定义控制点用于绘制曲线 (你可以根据需要调整控制点的位置)\r\n            const controlPoint = [\r\n                (start[0] + end[0]) / 2, // 控制点的x坐标\r\n                (start[1] + end[1]) / 2 - 50  // 控制点的y坐标，偏移使曲线有弯曲\r\n            ];\r\n\r\n              // 使用贝塞尔曲线进行绘制\r\n            return d3.line().curve(d3.curveCardinal).x(d => d[0]).y(d => d[1])([start, controlPoint, end]);\r\n              // 曲线的起点、控制点和终点\r\n          })\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", \"#FF0000\")\r\n          .attr(\"stroke-width\", 2)\r\n          .style(\"opacity\", 0.5)\r\n          .style(\"stroke-dasharray\", \"4,4\");  // 添加虚线效果\r\n      // 绘制每个时间点下方的圆角矩形\r\n      const rectWidth = 30;  // 设置矩形宽度\r\n      const rectHeight = 80; // 设置矩形高度\r\n\r\n      lineGroup.selectAll(\".timeline-rect\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"class\", \"timeline-rect\")\r\n        .attr(\"x\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\r\n          const offsetX = i * 5;  // 根据索引为点添加水平偏移\r\n          return baseX + offsetX - rectWidth / 2; // 确保矩形居中\r\n        })\r\n        .attr(\"y\", (d, i) => {\r\n          const baseY = 750; // 根据时间绘制位置\r\n          const offsetY = (-1)**i * 60;  // 根据索引为每个矩形添加垂直偏移\r\n          return baseY + offsetY;  // 确保矩形有足够的垂直间距\r\n        })\r\n        .attr(\"width\", rectWidth)\r\n        .attr(\"height\", rectHeight)\r\n        .attr(\"rx\", 8)  // 圆角矩形\r\n        .attr(\"ry\", 8)\r\n        .attr(\"fill\", \"#FFD700\")\r\n        .on(\"click\", (event, d) => {  // 使用箭头函数\r\n          const placeImpo = d.impo;\r\n          const placeInfo = d.info;\r\n          this.placeImpoDisplay = placeImpo ? placeImpo : \"无\";\r\n          this.placeInfoDisplay = placeInfo ? placeInfo : \"无\";\r\n        \r\n        })\r\n        .on(\"mouseover\", function() {\r\n          d3.select(this)  // 选择当前的矩形\r\n            .transition()  // 添加过渡效果\r\n            .duration(300)  // 设置过渡时间为300ms\r\n            .attr(\"fill\", \"#FF6347\")  // 鼠标经过时改变矩形颜色\r\n            .attr(\"cursor\", \"pointer\")  // 改变鼠标光标为手形\r\n            .style(\"opacity\", 0.8);  // 改变透明度\r\n        })\r\n        .on(\"mouseout\", function() {\r\n          d3.select(this)  // 选择当前的矩形\r\n            .transition()  // 添加过渡效果\r\n            .duration(300)  // 设置过渡时间为300ms\r\n            .attr(\"fill\", \"#FFD700\")  // 恢复原来的颜色\r\n            .style(\"opacity\", 1);  // 恢复透明度\r\n        });\r\n\r\n\r\n      // 绘制每个矩形和时间点之间的连接线\r\n      lineGroup.selectAll(\".timeline-line\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"line\")\r\n        .attr(\"class\", \"timeline-line\")\r\n        .attr(\"x1\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 时间点x坐标\r\n          const offsetX = i * 5;  // 水平偏移\r\n          return baseX + offsetX;\r\n        })\r\n        .attr(\"y1\", 620 + timelineHeight / 2) // 时间点y坐标\r\n        .attr(\"x2\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 时间点x坐标\r\n          const offsetX = i * 5;  // 水平偏移\r\n          return baseX + offsetX;\r\n        })\r\n        .attr(\"y2\", (d, i) => {\r\n          const baseY = 750; // 根据时间绘制位置\r\n          const offsetY = (-1)**i * 60;  // 根据索引为每个矩形添加垂直偏移\r\n          return baseY + offsetY;  // 确保矩形有足够的垂直间距\r\n        })\r\n        .attr(\"stroke\", \"#FF0000\")\r\n        .attr(\"stroke-width\", 2)\r\n        .style(\"opacity\", 0.5);\r\n\r\n      // 在矩形中添加文本\r\n      lineGroup.selectAll(\".timeline-text\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"text\")\r\n        .attr(\"class\", \"timeline-text\")\r\n        .attr(\"x\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\r\n          const offsetX = i * 5;  // 根据索引为点添加水平偏移\r\n          return baseX + offsetX;\r\n        })\r\n        .attr(\"y\", (d, i) => {\r\n          const baseY = 770; // 根据时间绘制位置\r\n          const offsetY = (-1)**i * 60;  // 根据索引为每个矩形添加垂直偏移\r\n          return baseY + offsetY;  // 确保矩形有足够的垂直间距\r\n        })\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"font-size\", \"12px\")\r\n        .attr(\"fill\", \"#000\")\r\n        .text(d => d.name);  // 显示选中的name字段\r\n\r\n\r\n      console.log(\"Relating data completed\");\r\n    },\r\n\r\n    // 绘制地点圆圈\r\n    async drawLocationCircles(svg, projection, locations) {\r\n      return new Promise((resolve) => {\r\n        svg.append(\"g\")\r\n          .selectAll(\"circle\")\r\n          .data(this.locations)\r\n          .enter()\r\n          .append(\"circle\")\r\n          .attr(\"cx\", (d) => projection([d.lon, d.lat])[0]) // 经度和纬度转为坐标\r\n          .attr(\"cy\", (d) => projection([d.lon, d.lat])[1])\r\n          .attr(\"r\", 5) // 圆圈半径\r\n          .attr(\"fill\", d => {\r\n            // 如果该地点属于当前章节，显示为红色，否则为灰色\r\n            return locations.includes(d) ? \"#FF0000\" : \"#808080\";\r\n          }) // 圆圈颜色为红色\r\n          .on(\"click\", (d) => {\r\n            console.log(`Clicked on location: ${d.name}`);\r\n          });\r\n\r\n        // 圆圈绘制完成后调用 resolve\r\n        resolve();\r\n      });\r\n    },\r\n\r\n    // 绘制地点之间的连接线\r\n    async drawLocationLines(svg, projection, locations) {\r\n      return new Promise((resolve) => {\r\n        const lineGroup = svg.append(\"g\");\r\n        for (let i = 0; i < this.locations.length - 1; i++) {\r\n          const start = this.locations[i];\r\n          const end = this.locations[i + 1];\r\n          lineGroup.append(\"line\")\r\n            .attr(\"class\", \"location-line\") // 为每条线添加一个 class，便于后续清除\r\n            .attr(\"x1\", projection([start.lon, start.lat])[0])\r\n            .attr(\"y1\", projection([start.lon, start.lat])[1])\r\n            .attr(\"x2\", projection([end.lon, end.lat])[0])\r\n            .attr(\"y2\", projection([end.lon, end.lat])[1])\r\n            .attr(\"stroke\", locations.includes(start)&&locations.includes(end) ? \"#FF0000\" : \"#808080\")\r\n           // 线的颜色\r\n            .attr(\"stroke-width\", 2); // 线的宽度\r\n        }\r\n\r\n        // 连接线绘制完成后调用 resolve\r\n        resolve();\r\n      });\r\n    },\r\n    async initMap() {\r\n       // 获取视口宽高\r\n      const viewportWidth = window.innerWidth;\r\n      const viewportHeight = window.innerHeight;\r\n      // 地图容器宽高\r\n      const width = viewportWidth * 0.7; // 放大宽度\r\n      const height = viewportHeight * 0.93; // 放大高度\r\n      console.log(`Viewport width: ${viewportWidth}, height: ${viewportHeight}`);\r\n      // 定义地图投影\r\n      this.projection = d3.geoMercator()\r\n        .center([107, 31]) // 地图中心位置\r\n        .scale(750) // 设置缩放量\r\n        .translate([width / 2 + 20, height / 2 + 5]); // 设置平移量\r\n\r\n      // 创建 SVG\r\n      this.svg = d3\r\n          .select(this.$refs.mapContainer)\r\n          .append(\"svg\")\r\n          .attr(\"width\", width)\r\n          .attr(\"height\", height);\r\n\r\n      try {\r\n        // 调用绘制地图路径函数\r\n        await this.drawMapPath(this.svg, this.projection);\r\n        // 调用绘制地点圆圈函数\r\n        await this.drawLocationCircles(this.svg, this.projection, this.locations);\r\n        // 调用绘制连接线函数\r\n        await this.drawLocationLines(this.svg, this.projection, this.locations);\r\n\r\n        // 创建时间标尺，并放置在地图下方\r\n        this.initTimeline(this.svg, 600); // 添加到地图的 SVG 中\r\n      } catch (error) {\r\n        console.error(\"地图数据加载失败:\", error);\r\n      }\r\n    },\r\n    initTimeline(mapSvg, mapHeight) {\r\n      // 检查 mapSvg 是否有效\r\n      if (!mapSvg || !mapSvg.node()) {\r\n        console.error('SVG is not initialized correctly.');\r\n        return;\r\n      }\r\n      const svg = mapSvg.append(\"g\").attr(\"class\", \"timeline-group\");\r\n\r\n      const timelineWidth = mapSvg.node().getBoundingClientRect().width;\r\n      const timelineHeight = 60;  // 高度设置为固定的 60px\r\n\r\n      // 设置时间标尺的 y 坐标，使其位于地图下方\r\n      const timelineYPosition = mapHeight + 20; // 调整时间标尺的位置，放置在地图下方\r\n\r\n      // 创建一个时间轴的比例尺\r\n      const xScale = d3.scaleTime()\r\n        .domain([d3.min(this.timeData, d => new Date(d.time)),\r\n          d3.max(this.timeData, d => new Date(d.time))])\r\n        .range([0, timelineWidth]);\r\n\r\n      // 绘制时间线的路径\r\n      const line = d3.line()\r\n        .x(d => xScale(new Date(d.time)))  // 根据时间来定位位置\r\n        .y(timelineHeight / 2)  // 固定在垂直中心\r\n        .curve(d3.curveMonotoneX);  // 平滑曲线\r\n      svg.append(\"path\")\r\n        .data([this.timeData]) // 将所有地点数据作为路径\r\n        .attr(\"d\", line)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", \"#8918cfc9\")\r\n        .attr(\"stroke-width\", 3)\r\n        .attr(\"marker-end\", \"url(#arrow)\")  // 为路径添加箭头标记\r\n        .attr(\"transform\", `translate(0, ${timelineYPosition})`); // 设置时间标尺的位置\r\n\r\n      console.log(xScale(new Date(this.timeData[50].time))); // 打印时间对应的X坐标\r\n\r\n      // 可选：添加时间轴刻度\r\n      const ticks = xScale.ticks(d3.timeYear.every(1)); // 每年一格\r\n      svg.selectAll(\".tick\")\r\n        .data(ticks)\r\n        .enter().append(\"line\")\r\n        .attr(\"class\", \"tick\")\r\n        .attr(\"x1\", d => xScale(d))\r\n        .attr(\"x2\", d => xScale(d))\r\n        .attr(\"y1\", 0)\r\n        .attr(\"y2\", timelineHeight)\r\n        .attr(\"stroke\", \"#8918cf4a\")\r\n        .attr(\"stroke-width\", 1)\r\n        .attr(\"transform\", `translate(0, ${timelineYPosition})`); // 设置刻度的位置\r\n\r\n      // 定义箭头的marker\r\n      svg.append(\"defs\").append(\"marker\")\r\n        .attr(\"id\", \"arrow\")  // 给箭头设置ID\r\n        .attr(\"viewBox\", \"0 0 10 10\")  // 设置箭头的视口\r\n        .attr(\"refX\", 8)  // 设置箭头的位置偏移量\r\n        .attr(\"refY\", 5)  // 设置箭头的Y偏移量\r\n        .attr(\"markerWidth\", 4)  // 箭头宽度\r\n        .attr(\"markerHeight\", 4)  // 箭头高度\r\n        .attr(\"orient\", \"auto\")  // 自动旋转以适应路径\r\n        .attr(\"transform\", `translate(0, ${timelineYPosition})`) // 设置刻度的位置\r\n        .append(\"path\")\r\n        .attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\")  // 绘制箭头路径\r\n        .attr(\"fill\", \"#8918cfc9\");  // 设置箭头颜色\r\n        \r\n    },    \r\n\r\n    \r\n    createTooltip(svg, d, event) {\r\n      const { x, y } = this.mouseXY(svg, event);\r\n\r\n      svg\r\n        .append(\"rect\")\r\n        .attr(\"id\", \"tooltip-box\")\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"width\", 100)\r\n        .attr(\"height\", 40)\r\n        .attr(\"fill\", \"#000\")\r\n        .attr(\"opacity\", 0.6);\r\n\r\n      svg\r\n        .append(\"text\")\r\n        .attr(\"id\", \"tooltip-text\")\r\n        .attr(\"x\", x + 50)\r\n        .attr(\"y\", y + 25)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"font-size\", \"14px\")\r\n        .attr(\"fill\", \"#fff\")\r\n        .text(d ? d.properties.name : \"\");\r\n    },\r\n    removeTooltip() {\r\n      d3.select(\"#tooltip-box\").remove();\r\n      d3.select(\"#tooltip-text\").remove();\r\n    },\r\n    mouseXY(svg, event) {\r\n      const rect = svg.node().getBoundingClientRect();\r\n      return { x: event.clientX - rect.left, y: event.clientY - rect.top };\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.page-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-start;  /* 内容从左侧开始 */\r\n  padding-top: 50px; /* 给顶部导航栏留空间 */\r\n  padding-bottom: 0px;\r\n  width: 100vw;\r\n  height: calc(100vh - padding-top - padding-bottom); /* 减去顶部和底部 padding */\r\n  overflow: hidden;\r\n   /* 根据需要调整此值，避免与导航栏重叠 */\r\n}\r\n.chapter-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 20%; /* 动态调整宽度 */\r\n  max-width: 250px; /* 最大宽度限制 */\r\n  min-width: 150px; /* 最小宽度限制 */\r\n  padding-top: 15px;\r\n  padding-bottom: 15px;\r\n  height: calc(100% - padding-top - padding-bottom);\r\n  overflow-y: auto;\r\n  background-color: #ffadad;\r\n  border-right: 1px solid #ddd;\r\n  box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);\r\n  flex-shrink: 0; /* 防止缩小 */\r\n}\r\n.chapter-item {\r\n  padding: 10px;\r\n  margin: 5px 10px 5px 12px;\r\n  border-radius: 8px;\r\n  background-color: #ffffff;\r\n  color: #333;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s, color 0.3s;\r\n}\r\n.chapter-item:hover {\r\n  background-color: #e0f7fa;\r\n  color: #00796b;\r\n}\r\n\r\n.chapter-item.active {\r\n  background-color: #00796b;\r\n  color: #ffffff;\r\n}\r\n.story-content{\r\n  flex-direction: column;  /* 子容器上下排列 */\r\n  width: auto;\r\n  max-width: 340px; /* 最大宽度限制 */\r\n  min-width: 250px; /* 最小宽度限制 */\r\n  flex-shrink: 0; /* 防止缩小 */\r\n  padding-right: 40px; \r\n  padding-top: 45px;\r\n  padding-bottom: 45px;\r\n  padding-left: 45px;\r\n  height: calc(100% - padding-top - padding-bottom);\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  background-color: #3cdb9b7a;\r\n}\r\n.page-content {\r\n  flex-direction: column;  /* 子容器上下排列 */\r\n  flex-grow: 1; /* 填充剩余空间 */\r\n  width: 50%;  /* 不设置固定宽度 */\r\n  height: 100%;            /* 父容器占满可用空间 */\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  background-color: #8918cf4a;\r\n}\r\n.map-container {\r\n  margin: 0;\r\n  width: 100%; /* 使用百分比宽度适配父容器 */\r\n  height: 100%; /* 使用百分比高度适配父容器 */\r\n  overflow: hidden; /* 隐藏超出的部分 */\r\n  background-color: #3cb1db4a;\r\n  z-index: 2;\r\n}\r\n.south-china-sea-image {\r\n  position: absolute;\r\n  top: 55%; /* 调整位置 */\r\n  left: 60%;\r\n  transform: translate(-50%, -50%); /* 居中 */\r\n  width: 5%; /* 调整图片大小 */\r\n  max-width: 10vw; /* 根据屏幕宽度限制图片大小 */\r\n  max-height: 15vw; /* 根据屏幕高度限制图片大小 */\r\n  height: auto; /* 保持图片比例 */\r\n  z-index: 1000; /* 根据需要调整叠加次序 */\r\n}\r\n.top-content {\r\n  width: 100%;\r\n  height: 45%;\r\n  background-color: #f9f9f9;\r\n  margin-bottom: 15px; /* 为了分隔上下内容 */\r\n  overflow-y: auto;  /* 允许内容滚动 */\r\n}\r\n\r\n.bottom-content {\r\n  width: 100%;\r\n  height: 45%;\r\n  background-color: #f0f0f0;\r\n  overflow-y: auto;  /* 允许内容滚动 */\r\n}\r\n.inner-content{\r\n  font-size: 20px;\r\n  color: #333;\r\n  line-height: 2.0;\r\n  margin-bottom: 10px;\r\n  text-indent: 2em;  /* 首段空两格 */\r\n  overflow-y: auto;  /* 超过高度时出现滚动条 */\r\n}\r\n.title {\r\n  font-size: 36px;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EAEpBA,KAAK,EAAC;AAAc;mBAH7B;;EAeSA,KAAK,EAAC;AAAc;;EAElBC,GAAG,EAAC,cAAc;EAACD,KAAK,EAAC;;;EAK3BA,KAAK,EAAC;AAAe;;EACnBE,EAAE,EAAC,sBAAsB;EAACF,KAAK,EAAC;;mBAvB3C;;EA4BWE,EAAE,EAAC,sBAAsB;EAACF,KAAK,EAAC;;oBA5B3C;;uBACEG,mBAAA,CAiCM,OAjCNC,UAiCM,GAhCJC,mBAAA,YAAe,EACfC,mBAAA,CAUM,OAVNC,UAUM,I,kBATJJ,mBAAA,CAQMK,SAAA,QAZZC,WAAA,CAKmCC,KAAA,CAAAC,QAAQ,EAL3C,CAKgBC,OAAO,EAAEC,KAAK;yBADxBV,mBAAA,CAQM;MANHW,GAAG,EAAED,KAAK;MACXb,KAAK,EAPbe,eAAA,EAOc,cAAc;QAAAC,MAAA,EACFN,KAAA,CAAAO,aAAa,KAAKJ;MAAK;MACxCK,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,aAAa,CAACR,KAAK;wBAExBD,OAAO,gCAXlBU,UAAA;oCAcIjB,mBAAA,YAAe,EACfC,mBAAA,CAKM,OALNiB,UAKM,GAJJlB,mBAAA,UAAa,EACbC,mBAAA,CAEM,OAFNkB,UAEM,EAAAC,MAAA,QAAAA,MAAA,OADJnB,mBAAA,CAAgF;IAA3EoB,GAAG,EAAC,6BAA6B;IAACC,GAAG,EAAC,IAAI;IAAC3B,KAAK,EAAC;yDAG1DK,mBAAA,YAAe,EACfC,mBAAA,CAWM,OAXNsB,UAWM,GAVJtB,mBAAA,CAIM,OAJNuB,UAIM,GAHJxB,mBAAA,WAAc,E,0BACdC,mBAAA,CAA2B;IAAvBN,KAAK,EAAC;EAAO,GAAC,MAAI,sBACtBM,mBAAA,CAAuD;IAApDN,KAAK,EAAC,eAAe;IAAC8B,SAAyB,EAAjBpB,KAAA,CAAAqB;0BA1BzCC,UAAA,E,GA4BM1B,mBAAA,CAIM,OAJN2B,UAIM,GAHJ5B,mBAAA,WAAc,E,0BACdC,mBAAA,CAA2B;IAAvBN,KAAK,EAAC;EAAO,GAAC,MAAI,sBACtBM,mBAAA,CAAuD;IAApDN,KAAK,EAAC,eAAe;IAAC8B,SAAyB,EAAjBpB,KAAA,CAAAwB;0BA/BzCC,WAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}