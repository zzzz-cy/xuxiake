{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"chart\",\n  class: \"chart-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\desk\\数据可视化\\project\\xuxiake\\src\\components\\PageFive.vue"],"sourcesContent":["<template>\r\n  <div ref=\"chart\" class=\"chart-container\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\n\r\nexport default {\r\n  name: 'PageOne',\r\n  data() {\r\n    return {\r\n      colors: ['#FFAE57', '#FF7853', '#EA5151', '#CC3F57', '#9A2555'],\r\n      bgColor: '#2E2733',\r\n      itemStyle: {\r\n        star5: { color: '#FFAE57' },\r\n        star4: { color: '#FF7853' },\r\n        star3: { color: '#EA5151' },\r\n        star2: { color: '#CC3F57' }\r\n      },\r\n      data: [\r\n        {\r\n          name: '虚构',\r\n          itemStyle: { color: '#FF7853' },\r\n          children: [\r\n            {\r\n              name: '小说',\r\n              children: [\r\n                { name: '5☆', children: [{ name: '疼' }, { name: '慈悲' }, { name: '楼下的房客' }] },\r\n                { name: '4☆', children: [{ name: '虚无的十字架' }, { name: '无声告白' }, { name: '童年的终结' }] },\r\n                { name: '3☆', children: [{ name: '疯癫老人日记' }] }\r\n              ]\r\n            },\r\n            // 省略部分数据\r\n          ]\r\n        },\r\n        {\r\n          name: '非虚构',\r\n          itemStyle: { color: '#EA5151' },\r\n          children: [\r\n            {\r\n              name: '设计',\r\n              children: [\r\n                { name: '5☆', children: [{ name: '无界面交互' }] },\r\n                { name: '4☆', children: [{ name: '数字绘图的光照与渲染技术' }, { name: '日本建筑解剖书' }] },\r\n                { name: '3☆', children: [{ name: '奇幻世界艺术\\n&RPG地图绘制讲座' }] }\r\n              ]\r\n            },\r\n            // 省略部分数据\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  },\r\n  mounted() {\r\n    this.formatData();\r\n    this.initChart();\r\n  },\r\n  methods: {\r\n    formatData() {\r\n      const { data, colors, itemStyle } = this;\r\n      for (let j = 0; j < data.length; ++j) {\r\n        const level1 = data[j].children;\r\n        for (let i = 0; i < level1.length; ++i) {\r\n          const block = level1[i].children;\r\n          const bookScore = [];\r\n          let bookScoreId;\r\n          for (let star = 0; star < block.length; ++star) {\r\n            let style = (function (name) {\r\n              switch (name) {\r\n                case '5☆':\r\n                  bookScoreId = 0;\r\n                  return itemStyle.star5;\r\n                case '4☆':\r\n                  bookScoreId = 1;\r\n                  return itemStyle.star4;\r\n                case '3☆':\r\n                  bookScoreId = 2;\r\n                  return itemStyle.star3;\r\n                case '2☆':\r\n                  bookScoreId = 3;\r\n                  return itemStyle.star2;\r\n              }\r\n            })(block[star].name);\r\n            block[star].label = { color: style.color, downplay: { opacity: 0.5 } };\r\n            if (block[star].children) {\r\n              style = { opacity: 1, color: style.color };\r\n              block[star].children.forEach((book) => {\r\n                book.value = 1;\r\n                book.itemStyle = style;\r\n                book.label = { color: style.color };\r\n                let value = bookScoreId === 0 || bookScoreId === 3 ? 5 : 1;\r\n                if (bookScore[bookScoreId]) {\r\n                  bookScore[bookScoreId].value += value;\r\n                } else {\r\n                  bookScore[bookScoreId] = { color: colors[bookScoreId], value };\r\n                }\r\n              });\r\n            }\r\n          }\r\n          level1[i].itemStyle = { color: data[j].itemStyle.color };\r\n        }\r\n      }\r\n    },\r\n    initChart() {\r\n      const chart = echarts.init(this.$refs.chart);\r\n      chart.setOption({\r\n        backgroundColor: 'transparent',\r\n        color: this.colors,\r\n        series: [\r\n          {\r\n            type: 'sunburst',\r\n            center: ['50%', '50%'],\r\n            radius: ['0%', '150%'],\r\n            data: this.data,\r\n            sort: function (a, b) {\r\n              if (a.depth === 1) return b.getValue() - a.getValue();\r\n              return a.dataIndex - b.dataIndex;\r\n            },\r\n            label: { rotate: 'radial', color: this.bgColor },\r\n            itemStyle: { borderColor: this.bgColor, borderWidth: 2 },\r\n            levels: [\r\n              {},\r\n              { r0: 0, r: 60, label: { rotate: 0 } },\r\n              { r0: 60, r: 150 },\r\n              {\r\n                r0: 170,\r\n                r: 210,\r\n                itemStyle: { shadowBlur: 2, shadowColor: this.colors[2], color: 'transparent' },\r\n                label: { rotate: 'tangential', fontSize: 10, color: this.colors[0] }\r\n              },\r\n              {\r\n                r0: 210,\r\n                r: 220,\r\n                itemStyle: { shadowBlur: 80, shadowColor: this.colors[0] },\r\n                label: { position: 'outside', textShadowBlur: 5, textShadowColor: '#333' },\r\n                downplay: { label: { opacity: 0.5 } }\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.page-content {\r\n  text-align: center;\r\n  padding-top: 20px;\r\n}\r\n.chart-container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n</style>\r\n"],"mappings":";;EACOA,GAAG,EAAC,OAAO;EAACC,KAAK,EAAC;;;uBAAvBC,mBAAA,CAA+C,OAA/CC,UAA+C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}