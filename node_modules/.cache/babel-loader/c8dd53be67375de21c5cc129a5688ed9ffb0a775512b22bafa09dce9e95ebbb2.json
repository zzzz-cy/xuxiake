{"ast":null,"code":"import * as d3 from \"d3\";\nexport default {\n  name: \"PageOne\",\n  data() {\n    return {\n      timelineY: 0,\n      timelineX: 0,\n      len: 4,\n      svg: null,\n      // SVG 对象\n      projection: null,\n      // 存储地图投影对象\n\n      chapters: [],\n      // 存储章节名\n      activeChapter: null,\n      // 当前选中的章节索引\n\n      locations: [],\n      // 存储地点信息\n      selectedLocations: [],\n      // 存储选中的地点数据\n\n      timeData: [],\n      // 存储有时间信息的数据\n      selectedTimeData: [],\n      // 存储选中的时间数据\n\n      lines: [],\n      // 动态存储曲线数据\n\n      placeInfoDisplay: \"这里会显示地点信息\",\n      // 默认信息\n      placeImpoDisplay: \"这里会显示重要事件信息\" // 默认信息.\", // 默认重要事件信息\n    };\n  },\n  async mounted() {\n    // 首次加载时\n    await this.initOnResize();\n    // 监听窗口大小变化\n    window.addEventListener('resize', this.initOnResize);\n  },\n  beforeUnmount() {\n    // 移除监听，避免内存泄漏\n    window.removeEventListener('resize', this.initOnResize);\n  },\n  methods: {\n    async initOnResize() {\n      this.resetData();\n      // 等待异步数据加载\n      await Promise.all([this.loadChapters(),\n      // 异步加载章节数据\n      this.loadLocationData(),\n      // 异步加载地点数据\n      this.loadTimeData() // 异步加载时间数据\n      ]);\n      this.initMap(); // 初始化地图\n    },\n    resetData() {\n      this.timelineY = 0;\n      this.timelineX = 0;\n      const container = this.$refs.mapContainer; // 获取地图容器\n      // // 清空所有图像\n      // const images = container.querySelectorAll('img');\n      // images.forEach(img => img.remove());  // 移除所有图像\n\n      // 清空所有 SVG 元素\n      const svgs = container.querySelectorAll('svg');\n      svgs.forEach(svg => svg.remove()); // 移除所有 SVG 元素\n      this.svg = null; // SVG 对象\n      this.projection = null; // 地图投影对象\n    },\n    // 加载章节名\n    async loadChapters() {\n      try {\n        const response = await fetch(\"/data/chapters.json\"); // JSON 文件路径\n        const data = await response.json();\n        this.chapters = data.chapters;\n      } catch (error) {\n        console.error(\"Failed to load chapters:\", error);\n      }\n    },\n    // 提取时间中的第一个年份\n    extractDate(timeString) {\n      if (timeString == null) {\n        return new Date(1940, 0, 1); // 如果没有时间，默认为 1940 年 1 月 1 日\n      }\n\n      // 1. 提取年份（括号中的四位数字）\n      const yearRegex = /[（(](\\d{4})[）)]/;\n      const yearMatch = timeString.match(yearRegex); // 获取年份匹配结果\n      const year = yearMatch ? parseInt(yearMatch[1], 10) : 1940; // 如果找到年份，返回年份，否则默认为 1940 年\n\n      // 2. 提取月份（如果有月字）\n      const monthRegex = /(\\d+)(?=月)/; // 匹配数字和后面的\"月\"\n      const monthMatch = timeString.match(monthRegex);\n      const month = monthMatch ? parseInt(monthMatch[1], 10) - 1 : 0; // 月份从0开始，没找到则默认为1月\n\n      // 3. 提取日期（如果有日字）\n      const dayRegex = /(\\d+)(?=日)/; // 匹配数字和后面的\"日\"\n      const dayMatch = timeString.match(dayRegex);\n      const day = dayMatch ? parseInt(dayMatch[1], 10) : 1; // 没找到则默认为1日\n\n      // 返回构造的日期对象\n      return new Date(year, month, day); // 返回根据提取的年份、月份、日期生成的日期对象\n    },\n    // 加载地点数据\n    async loadLocationData() {\n      try {\n        const response = await fetch(\"/data/dataset_total.json\"); // 数据文件路径\n        const data = await response.json();\n        // 只提取地名和经纬度\n        this.locations = data.map(item => ({\n          name: item[\"地名\"],\n          lon: item[\"地点经度（默认东经）\"],\n          lat: item[\"地点纬度（默认北纬）\"],\n          chapter: item[\"所属篇目\"],\n          // 添加“所属篇目”字段\n          route: item[\"详细路线\"] // 添加“详细路线”字段\n          // time: this.extractYear(item[\"游历时间\"])  // 提取年份\n        }));\n      } catch (error) {\n        console.error(\"Failed to load location data:\", error);\n      }\n    },\n    // 加载时间数据\n    async loadTimeData() {\n      try {\n        const response = await fetch(\"/data/dataset_time.json\"); // 数据文件路径\n        const data = await response.json();\n        // 只提取地名和经纬度\n        this.timeData = data.map(item => ({\n          name: item[\"地名\"],\n          lon: item[\"地点经度（默认东经）\"],\n          lat: item[\"地点纬度（默认北纬）\"],\n          chapter: item[\"所属篇目\"],\n          // 添加“所属篇目”字段\n          route: item[\"详细路线\"],\n          // 添加“详细路线”字段\n          time: this.extractDate(item[\"游历时间\"]),\n          // 提取年份\n          info: item[\"地点信息补充（来自百科）\"],\n          impo: item[\"重要事件\"]\n        }));\n        console.log(\"Original data length:\", data.length);\n        console.log(\"Processed timeData length:\", this.timeData.length);\n      } catch (error) {\n        console.error(\"Failed to load location data:\", error);\n      }\n    },\n    // 选择章节\n    selectChapter(index) {\n      this.activeChapter = index;\n      const selectedChapter = this.chapters[index];\n      console.log(\"1\");\n      // 筛选出\"所属篇目\"为选中章节的数据\n      this.selectedLocations = this.locations.filter(item => item.chapter === selectedChapter);\n      // 筛选出\"所属篇目\"为选中章节的数据\n      this.selectedTimeData = this.timeData.filter(item => item.chapter === selectedChapter);\n      // 关联地点和时间数据\n      this.relate();\n    },\n    // 绘制地图路径\n    async drawMapPath(svg, projection) {\n      return new Promise((resolve, reject) => {\n        d3.json(\"/data/china.geo.json\").then(mapData => {\n          const path = d3.geoPath().projection(projection);\n          svg.append(\"g\").selectAll(\"path\").data(mapData.features).enter().append(\"path\").attr(\"d\", path).style(\"fill\", \"#f9f9f9\").on(\"mouseover\", (event, d) => {\n            d3.select(event.currentTarget).style(\"fill\", \"#b7ae8f\");\n            this.createTooltip(svg, d, event);\n          }).on(\"mousemove\", event => {\n            this.removeTooltip();\n            this.createTooltip(svg, null, event);\n          }).on(\"mouseout\", event => {\n            d3.select(event.currentTarget).style(\"fill\", \"#f9f9f9\");\n            this.removeTooltip();\n          });\n\n          // 绘制完成后调用 resolve\n          resolve();\n        }).catch(reject); // 如果失败，则调用 reject\n      });\n    },\n    // 在选择章节时关联地图上的点和时间标尺\n    async relate() {\n      // const container = this.$refs.mapContainer;\n      // const width = container.clientWidth;\n      // const height = container.clientHeight;\n      // const centerX = width / 2;\n\n      const svg = d3.select(this.$refs.mapContainer).select(\"svg\"); // 选择地图的 svg 容器\n      svg.selectAll(\"circle\").remove(); // 清除之前绘制的地点圆圈\n      svg.selectAll(\".location-line\").remove();\n      svg.selectAll(\".tick\").remove();\n      // 高亮当前章节的地点，灰色其他地点\n      await this.drawLocationCircles(svg, this.projection, this.selectedLocations);\n      await this.drawLocationLines(svg, this.projection, this.selectedLocations, this.len);\n\n      // 获取时间标尺容器的 g 元素\n      const timelineGroup = svg.select(\".timeline-group\");\n\n      // const timelineWidth = svg.node().getBoundingClientRect().width;\n      const timelineWidth = this.timelineX;\n      const timelineHeight = 60; // 时间标尺的高度\n\n      const centerY = this.timelineY;\n\n      // 1. 清除之前的时间连接线和时间点\n      svg.selectAll(\".timeline-link\").remove();\n      svg.selectAll(\".location-circle\").remove(); // 清除之前绘制的地点圆圈\n      timelineGroup.selectAll(\".timeline-point\").remove(); // axis-label清除之前的时间点\n      svg.selectAll(\".axis-label\").remove();\n      timelineGroup.selectAll(\".timeline-text\").remove();\n      // 清除之前绘制的时间轴\n      timelineGroup.select(\".timeline-axis\").remove();\n\n      // 时间数据范围\n      const minDate = d3.min(this.selectedTimeData, d => new Date(d.time));\n      const maxDate = d3.max(this.selectedTimeData, d => new Date(d.time));\n\n      // 计算时间跨度（以毫秒为单位）\n      const timeSpan = maxDate - minDate;\n\n      // 根据时间跨度动态调整最小和最大日期\n      let adjustedMinDate, adjustedMaxDate;\n      if (timeSpan <= 365 * 24 * 60 * 60 * 1000) {\n        // 小于一年\n        adjustedMinDate = d3.timeMonth.offset(minDate, -1); // 最小日期为实际最小日期的前1个月\n        adjustedMaxDate = d3.timeMonth.offset(maxDate, 1); // 最大日期为实际最大日期的后1个月\n      } else {\n        // 大于一年\n        adjustedMinDate = d3.timeYear.offset(minDate, -1); // 最小日期为实际最小日期的前1年\n        adjustedMaxDate = d3.timeYear.offset(maxDate, 1); // 最大日期为实际最大日期的后1年\n      }\n\n      // 2. 根据选中的时间数据，更新时间标尺\n      const xScale = d3.scaleTime().domain([adjustedMinDate, adjustedMaxDate]).range([30, timelineWidth - 30]);\n\n      // 动态设置时间刻度的间隔\n      const interval = timeSpan <= 365 * 24 * 60 * 60 * 1000 // 小于一年\n      ? d3.timeMonth.every(1) // 每月一个刻度\n      : d3.timeYear.every(1); // 每年一个刻度\n\n      // 绘制时间轴刻度\n      const axisBottom = d3.axisBottom(xScale).ticks(interval).tickFormat(d3.timeFormat(\"%Y-%m\"));\n      timelineGroup.append(\"g\").attr(\"class\", \"timeline-axis\").attr(\"transform\", `translate(0, ${centerY + timelineHeight / 2})`).call(axisBottom).selectAll(\".tick text\") // 选择刻度文本\n      .style(\"font-size\", \"15px\") // 调大字体\n      .style(\"font-weight\", \"bold\") // 加粗字体\n      .style(\"fill\", \"#000000\"); // 设置字体颜色\n\n      // 修改刻度线的样式\n      timelineGroup.selectAll(\".tick line\") // 修改刻度线的颜色\n      .attr(\"y1\", -30).attr(\"y2\", timelineHeight - 30).style(\"stroke\", \"#b7ae8f\") // 红色\n      .style(\"stroke-width\", \"1\"); // 调整线宽\n\n      // 隐藏横轴线 (即 path 元素)\n      timelineGroup.select(\".timeline-axis path\").style(\"display\", \"none\"); // 隐藏横轴线\n\n      // 绘制时间轴上的每个点\n      timelineGroup.selectAll(\".timeline-point\").data(this.selectedTimeData).enter().append(\"circle\").attr(\"class\", \"timeline-point\").attr(\"cx\", (d, i) => {\n        const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\n        const offsetX = i * 5; // 根据索引为点添加水平偏移（你可以调整这个值）\n        return baseX + offsetX; // 添加偏移后的X坐标\n      }).attr(\"cy\", centerY + timelineHeight / 2) // 在时间标尺中居中显示\n      .attr(\"r\", 6).attr(\"fill\", \"#b7ae8f\").style(\"opacity\", 0.7);\n      // 2. 绘制时间文本\n      timelineGroup.selectAll(\".timeline-text\").data(this.selectedTimeData).enter().append(\"text\").attr(\"class\", \"timeline-text\").attr(\"x\", (d, i) => {\n        const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\n        const offsetX = i * 5; // 根据索引为点添加水平偏移\n        return baseX + offsetX;\n      }).attr(\"y\", centerY + 20 + timelineHeight / 2) // 文字位置稍微在点的下方\n      .attr(\"dy\", -30) // 微调文字的垂直位置\n      .attr(\"text-anchor\", \"middle\") // 文字居中显示\n      .text(d => new Date(d.time).toLocaleDateString()) // 格式化时间为日期\n      .style(\"font-size\", \"15px\").style(\"font-weight\", \"bold\") // 加粗字体\n      .style(\"fill\", \"#000000\");\n\n      // 3. 添加坐标轴名称（时间轴名称）\n      svg.append(\"text\").attr(\"class\", \"axis-label\").attr(\"x\", timelineWidth * 0.95) // 将文本放置在画布的中心\n      .attr(\"y\", centerY + timelineHeight / 2 - 10) // 放置在时间轴下方\n      .attr(\"text-anchor\", \"middle\").text(\"时间轴\") // 设置坐标轴的名称\n      .style(\"font-size\", \"16px\").style(\"font-weight\", \"bold\");\n\n      // 4. 绘制时间连接线（从每个地点到时间点）\n      const lineGroup = svg.append(\"g\").attr(\"class\", \"timeline-link\");\n\n      // 创建一个时间轴上的点与地图上地点之间的连接曲线\n      lineGroup.selectAll(\"path\") // 使用path而不是line来绘制曲线\n      .data(this.selectedTimeData).enter().append(\"path\").attr(\"class\", \"timeline-link\").attr(\"d\", (d, i) => {\n        // 为终点添加偏移量，避免重叠\n        const offsetX = i * 5; // 可以根据索引调整偏移量（例如 5px）\n        const offsetY = 0; // 可以根据需要在y方向上加偏移，调整终点的y位置\n\n        // 定义曲线的起点和终点以及控制点\n        const start = [xScale(new Date(d.time)) + offsetX, centerY + timelineHeight / 2 + offsetY]; // 时间点的x坐标和y坐标\n\n        // 地点的x坐标和y坐标，添加偏移量\n        const end = this.projection([d.lon, d.lat]);\n\n        // 定义控制点用于绘制曲线 (你可以根据需要调整控制点的位置)\n        const controlPoint = [(start[0] + end[0]) / 2,\n        // 控制点的x坐标\n        (start[1] + end[1]) / 2 - 50 // 控制点的y坐标，偏移使曲线有弯曲\n        ];\n\n        // 使用贝塞尔曲线进行绘制\n        return d3.line().curve(d3.curveCardinal).x(d => d[0]).y(d => d[1])([start, controlPoint, end]);\n        // 曲线的起点、控制点和终点\n      }).attr(\"fill\", \"none\").attr(\"stroke\", \"#b7ae8f\").attr(\"stroke-width\", 2).style(\"opacity\", 0.5).style(\"stroke-dasharray\", \"4,4\"); // 添加虚线效果\n      // 绘制每个时间点下方的圆角矩形\n      const rectWidth = 30; // 设置矩形宽度\n      const rectHeight = 80; // 设置矩形高度\n\n      lineGroup.selectAll(\".timeline-rect\").data(this.selectedTimeData).enter().append(\"rect\").attr(\"class\", \"timeline-rect\").attr(\"x\", (d, i) => {\n        const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\n        const offsetX = i * 5; // 根据索引为点添加水平偏移\n        return baseX + offsetX - rectWidth / 2; // 确保矩形居中\n      }).attr(\"y\", (d, i) => {\n        const baseY = centerY + 130; // 根据时间绘制位置\n        const offsetY = (-1) ** i * 60; // 根据索引为每个矩形添加垂直偏移\n        return baseY + offsetY; // 确保矩形有足够的垂直间距\n      }).attr(\"width\", rectWidth).attr(\"height\", rectHeight).attr(\"rx\", 8) // 圆角矩形\n      .attr(\"ry\", 8).attr(\"fill\", \"#b7ae8f\").on(\"click\", (event, d) => {\n        // 使用箭头函数\n        const placeImpo = d.impo;\n        const placeInfo = d.info;\n        this.placeImpoDisplay = placeImpo ? placeImpo : \"无\";\n        this.placeInfoDisplay = placeInfo ? placeInfo : \"无\";\n      }).on(\"mouseover\", function () {\n        d3.select(this) // 选择当前的矩形\n        .transition() // 添加过渡效果\n        .duration(300) // 设置过渡时间为300ms\n        .attr(\"fill\", \"#f9f9f9\") // 鼠标经过时改变矩形颜色\n        .attr(\"cursor\", \"pointer\") // 改变鼠标光标为手形\n        .style(\"opacity\", 0.8); // 改变透明度\n      }).on(\"mouseout\", function () {\n        d3.select(this) // 选择当前的矩形\n        .transition() // 添加过渡效果\n        .duration(300) // 设置过渡时间为300ms\n        .attr(\"fill\", \"#b7ae8f\") // 恢复原来的颜色\n        .style(\"opacity\", 1); // 恢复透明度\n      });\n\n      // 绘制每个矩形和时间点之间的连接线\n      lineGroup.selectAll(\".timeline-line\").data(this.selectedTimeData).enter().append(\"line\").attr(\"class\", \"timeline-line\").attr(\"x1\", (d, i) => {\n        const baseX = xScale(new Date(d.time)); // 时间点x坐标\n        const offsetX = i * 5; // 水平偏移\n        return baseX + offsetX;\n      }).attr(\"y1\", centerY + timelineHeight / 2) // 时间点y坐标\n      .attr(\"x2\", (d, i) => {\n        const baseX = xScale(new Date(d.time)); // 时间点x坐标\n        const offsetX = i * 5; // 水平偏移\n        return baseX + offsetX;\n      }).attr(\"y2\", (d, i) => {\n        const baseY = centerY + 130; // 根据时间绘制位置\n        const offsetY = (-1) ** i * 60; // 根据索引为每个矩形添加垂直偏移\n        return baseY + offsetY; // 确保矩形有足够的垂直间距\n      }).attr(\"stroke\", \"#b7ae8f\").attr(\"stroke-width\", 2).style(\"opacity\", 0.5);\n      // const rectWidth = 30;  // 设置矩形宽度\n      // const rectHeight = 80; // 设置矩形高度\n      // 在矩形中添加文本\n      lineGroup.selectAll(\".timeline-text\").data(this.selectedTimeData).enter().append(\"text\").attr(\"class\", \"timeline-text\").attr(\"x\", (d, i) => {\n        const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\n        const offsetX = i * 5; // 根据索引为点添加水平偏移\n        return baseX + offsetX;\n      }).attr(\"y\", (d, i) => {\n        const baseY = centerY + 150; // 根据时间绘制位置\n        const offsetY = (-1) ** i * 60; // 根据索引为每个矩形添加垂直偏移\n        return baseY + offsetY; // 确保矩形有足够的垂直间距\n      }).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"12px\").attr(\"fill\", \"#000\").each(function (d) {\n        const textElement = d3.select(this);\n        const characters = d.name.split(\"\"); // 将 name 拆分为字符数组\n        const num = 5; // 每列最大字符数\n        const columnOffset = 10; // 列的水平偏移距离\n        // 动态计算行高\n        const lineHeight = characters.length <= num ? 5 / characters.length : 1;\n        characters.forEach((char, index) => {\n          const column = Math.floor(index / num); // 当前字符的列号\n          const row = index % num; // 当前字符在列中的行号\n\n          textElement.append(\"tspan\").attr(\"x\", +textElement.attr(\"x\") - column * columnOffset) // 向左偏移\n          .attr(\"dy\", row === 0 && column > 0 ? `-${(num - 1) * lineHeight}em` : lineHeight + \"em\").text(char); // 设置 tspan 的文本内容\n        });\n      });\n      console.log(\"Relating data completed\");\n    },\n    // 绘制地点圆圈\n    async drawLocationCircles(svg, projection, locations) {\n      return new Promise(resolve => {\n        svg.append(\"g\").selectAll(\"circle\").data(this.locations).enter().append(\"circle\").attr(\"cx\", d => projection([d.lon, d.lat])[0]) // 经度和纬度转为坐标\n        .attr(\"cy\", d => projection([d.lon, d.lat])[1]).attr(\"r\", 2) // 圆圈半径\n        .attr(\"fill\", d => {\n          // 如果该地点属于当前章节，显示为红色，否则为灰色\n          return locations.includes(d) ? \"#b7ae8f\" : \"#808080\";\n        }) // 圆圈颜色为红色\n        .on(\"click\", d => {\n          console.log(`Clicked on location: ${d.name}`);\n        });\n\n        // 圆圈绘制完成后调用 resolve\n        resolve();\n      });\n    },\n    // 绘制地点之间的连接线\n    async drawLocationLines(svg, projection, locations, len) {\n      return new Promise(resolve => {\n        const lineGroup = svg.append(\"g\");\n        for (let i = 0; i < this.locations.length - 1; i++) {\n          const start = this.locations[i];\n          const end = this.locations[i + 1];\n          // 判断经度或纬度差是否超过阈值 len\n          if (Math.abs(start.lon - end.lon) < len && Math.abs(start.lat - end.lat) < len) {\n            lineGroup.append(\"line\").attr(\"class\", \"location-line\") // 为每条线添加一个 class，便于后续清除\n            .attr(\"x1\", projection([start.lon, start.lat])[0]).attr(\"y1\", projection([start.lon, start.lat])[1]).attr(\"x2\", projection([end.lon, end.lat])[0]).attr(\"y2\", projection([end.lon, end.lat])[1]).attr(\"stroke\", locations.includes(start) && locations.includes(end) ? \"#b7ae8f\" : \"#808080\") // 线的颜色\n            .attr(\"stroke-width\", 1); // 线的宽度\n          }\n        }\n\n        // 连接线绘制完成后调用 resolve\n        resolve();\n      });\n    },\n    async initMap() {\n      try {\n        // // 清除所有容器内的图像和矢量图形（SVG）\n        // const images = container.querySelectorAll('img');\n        // images.forEach(img => img.remove());  // 移除所有图像\n\n        // const svgs = container.querySelectorAll('svg');\n        // svgs.forEach(svg => svg.remove());  // 移除所有 SVG 元素\n        // 获取 `mapContainer` 的 DOM 元素\n        const container = this.$refs.mapContainer;\n        console.log(\"Container height:\", container.clientHeight);\n        // 定义地图投影\n        this.projection = d3.geoMercator().center([107, 20]) // 地图中心位置\n        .scale(container.clientHeight * 0.8) // 设置缩放量\n        .translate([container.clientWidth / 1.85, container.clientHeight / 1.62]);\n\n        // 创建 SVG，宽高使用 CSS 控制\n        this.svg = d3.select(container).append(\"svg\").attr(\"preserveAspectRatio\", \"xMidYMid meet\") // 保持宽高比\n        .attr(\"viewBox\", `0 0 ${container.clientWidth} ${container.clientHeight}`);\n\n        // 绘制地图路径、地点圆圈、连接线等\n        await this.drawMapPath(this.svg, this.projection);\n        await this.drawLocationCircles(this.svg, this.projection, this.locations);\n        await this.drawLocationLines(this.svg, this.projection, this.locations, this.len);\n\n        // 初始化时间标尺\n        this.initTimeline(this.svg, container.clientHeight / 1.6); // 调整时间标尺的位置\n      } catch (error) {\n        console.error(\"地图数据加载失败:\", error);\n      }\n    },\n    initTimeline(mapSvg, mapHeight) {\n      // 检查 mapSvg 是否有效\n      if (!mapSvg || !mapSvg.node()) {\n        console.error('SVG is not initialized correctly.');\n        return;\n      }\n      const svg = mapSvg.append(\"g\").attr(\"class\", \"timeline-group\");\n      const timelineWidth = mapSvg.node().getBoundingClientRect().width;\n      const timelineHeight = 60; // 高度设置为固定的 60px\n\n      // 设置时间标尺的 y 坐标，使其位于地图下方\n      const timelineYPosition = mapHeight + 20; // 调整时间标尺的位置，放置在地图下方\n      this.timelineY = timelineYPosition; // 时间轴的 y 坐标\n      this.timelineX = timelineWidth;\n      // 创建一个时间轴的比例尺\n      const xScale = d3.scaleTime().domain([d3.min(this.timeData, d => new Date(d.time)), d3.max(this.timeData, d => new Date(d.time))]).range([0, timelineWidth]);\n\n      // 绘制时间线的路径\n      const line = d3.line().x(d => xScale(new Date(d.time))) // 根据时间来定位位置\n      .y(timelineHeight / 2) // 固定在垂直中心\n      .curve(d3.curveMonotoneX); // 平滑曲线\n      svg.append(\"path\").data([this.timeData]) // 将所有地点数据作为路径\n      .attr(\"d\", line).attr(\"fill\", \"none\").attr(\"stroke\", \"#b7ae8f\").attr(\"stroke-width\", 3).attr(\"marker-end\", \"url(#arrow)\") // 为路径添加箭头标记\n      .attr(\"transform\", `translate(0, ${timelineYPosition})`); // 设置时间标尺的位置\n\n      console.log(xScale(new Date(this.timeData[50].time))); // 打印时间对应的X坐标\n\n      // 可选：添加时间轴刻度\n      const ticks = xScale.ticks(d3.timeYear.every(1)); // 每年一格\n      svg.selectAll(\".tick\").data(ticks).enter().append(\"line\").attr(\"class\", \"tick\").attr(\"x1\", d => xScale(d)).attr(\"x2\", d => xScale(d)).attr(\"y1\", 0).attr(\"y2\", timelineHeight).attr(\"stroke\", \"#b7ae8f\").attr(\"stroke-width\", 1).attr(\"transform\", `translate(0, ${timelineYPosition})`); // 设置刻度的位置\n\n      // 定义箭头的marker\n      svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrow\") // 给箭头设置ID\n      .attr(\"viewBox\", \"0 0 10 10\") // 设置箭头的视口\n      .attr(\"refX\", 8) // 设置箭头的位置偏移量\n      .attr(\"refY\", 5) // 设置箭头的Y偏移量\n      .attr(\"markerWidth\", 4) // 箭头宽度\n      .attr(\"markerHeight\", 4) // 箭头高度\n      .attr(\"orient\", \"auto\") // 自动旋转以适应路径\n      .attr(\"transform\", `translate(0, ${timelineYPosition})`) // 设置刻度的位置\n      .append(\"path\").attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\") // 绘制箭头路径\n      .attr(\"fill\", \"#b7ae8f\"); // 设置箭头颜色\n    },\n    createTooltip(svg, d, event) {\n      const {\n        x,\n        y\n      } = this.mouseXY(svg, event);\n      svg.append(\"rect\").attr(\"id\", \"tooltip-box\").attr(\"x\", x).attr(\"y\", y).attr(\"width\", 100).attr(\"height\", 40).attr(\"fill\", \"#000\").attr(\"opacity\", 0.6);\n      svg.append(\"text\").attr(\"id\", \"tooltip-text\").attr(\"x\", x + 50).attr(\"y\", y + 25).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"14px\").attr(\"fill\", \"#fff\").text(d ? d.properties.name : \"\");\n    },\n    removeTooltip() {\n      d3.select(\"#tooltip-box\").remove();\n      d3.select(\"#tooltip-text\").remove();\n    },\n    mouseXY(svg, event) {\n      const rect = svg.node().getBoundingClientRect();\n      return {\n        x: event.clientX - rect.left,\n        y: event.clientY - rect.top\n      };\n    }\n  }\n};","map":{"version":3,"names":["d3","name","data","timelineY","timelineX","len","svg","projection","chapters","activeChapter","locations","selectedLocations","timeData","selectedTimeData","lines","placeInfoDisplay","placeImpoDisplay","mounted","initOnResize","window","addEventListener","beforeUnmount","removeEventListener","methods","resetData","Promise","all","loadChapters","loadLocationData","loadTimeData","initMap","container","$refs","mapContainer","svgs","querySelectorAll","forEach","remove","response","fetch","json","error","console","extractDate","timeString","Date","yearRegex","yearMatch","match","year","parseInt","monthRegex","monthMatch","month","dayRegex","dayMatch","day","map","item","lon","lat","chapter","route","time","info","impo","log","length","selectChapter","index","selectedChapter","filter","relate","drawMapPath","resolve","reject","then","mapData","path","geoPath","append","selectAll","features","enter","attr","style","on","event","d","select","currentTarget","createTooltip","removeTooltip","catch","drawLocationCircles","drawLocationLines","timelineGroup","timelineWidth","timelineHeight","centerY","minDate","min","maxDate","max","timeSpan","adjustedMinDate","adjustedMaxDate","timeMonth","offset","timeYear","xScale","scaleTime","domain","range","interval","every","axisBottom","ticks","tickFormat","timeFormat","call","i","baseX","offsetX","text","toLocaleDateString","lineGroup","offsetY","start","end","controlPoint","line","curve","curveCardinal","x","y","rectWidth","rectHeight","baseY","placeImpo","placeInfo","transition","duration","each","textElement","characters","split","num","columnOffset","lineHeight","char","column","Math","floor","row","includes","abs","clientHeight","geoMercator","center","scale","translate","clientWidth","initTimeline","mapSvg","mapHeight","node","getBoundingClientRect","width","timelineYPosition","curveMonotoneX","mouseXY","properties","rect","clientX","left","clientY","top"],"sources":["D:\\desk\\数据可视化\\project\\xuxiake\\src\\components\\PageOne.vue"],"sourcesContent":["<template>\r\n  <div class=\"page-container\">\r\n    <!-- 左侧章节容器 -->\r\n    <div class=\"chapter-list\">\r\n      <div\r\n        v-for=\"(chapter, index) in chapters\"\r\n        :key=\"index\"\r\n        class=\"chapter-item\"\r\n        :class=\"{ active: activeChapter === index }\"\r\n        @click=\"selectChapter(index)\"\r\n      >\r\n        {{ chapter }}\r\n      </div>\r\n    </div>\r\n    <!-- 中间章节容器 -->\r\n    <div class=\"page-content\">\r\n      <!-- 矢量容器 -->\r\n      <div ref=\"mapContainer\" class=\"map-container\">\r\n        <img src=\"/images/south.png\" alt=\"南海\" class=\"south-china-sea-image\" />\r\n      </div>\r\n    </div>\r\n    <!-- 右侧故事容器 -->   \r\n    <div class=\"story-content\">\r\n      <div id=\"place-impo-container\" class=\"top-content\">\r\n        <!-- 上面的内容 -->\r\n        <h3 class=\"title\">地点信息</h3>\r\n        <p class=\"inner-content\" v-html=\"placeInfoDisplay\"></p>\r\n      </div>\r\n      <div id=\"place-info-container\" class=\"bottom-content\">\r\n        <!-- 下面的内容 -->\r\n        <h3 class=\"title\">重要事件</h3>\r\n        <p class=\"inner-content\" v-html=\"placeImpoDisplay\"></p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from \"d3\";\r\n\r\nexport default {\r\n  name: \"PageOne\",\r\n  data() {\r\n    return {\r\n      timelineY: 0,\r\n      timelineX: 0,\r\n      len: 4,\r\n\r\n      svg: null,        // SVG 对象\r\n      projection: null, // 存储地图投影对象\r\n\r\n      chapters: [], // 存储章节名\r\n      activeChapter: null, // 当前选中的章节索引\r\n\r\n      locations: [], // 存储地点信息\r\n      selectedLocations: [], // 存储选中的地点数据\r\n\r\n      timeData: [], // 存储有时间信息的数据\r\n      selectedTimeData: [], // 存储选中的时间数据\r\n\r\n      lines: [],  // 动态存储曲线数据\r\n\r\n      placeInfoDisplay: \"这里会显示地点信息\", // 默认信息\r\n      placeImpoDisplay: \"这里会显示重要事件信息\", // 默认信息.\", // 默认重要事件信息\r\n    };\r\n  },\r\n  async mounted() {\r\n    // 首次加载时\r\n    await this.initOnResize();\r\n    // 监听窗口大小变化\r\n    window.addEventListener('resize', this.initOnResize);\r\n  },\r\n  beforeUnmount() {\r\n    // 移除监听，避免内存泄漏\r\n    window.removeEventListener('resize', this.initOnResize);\r\n  },\r\n  methods: {\r\n\r\n    async initOnResize() {\r\n      this.resetData();\r\n      // 等待异步数据加载\r\n      await Promise.all([\r\n        this.loadChapters(),  // 异步加载章节数据\r\n        this.loadLocationData(),  // 异步加载地点数据\r\n        this.loadTimeData(),  // 异步加载时间数据\r\n      ]);\r\n      this.initMap();  // 初始化地图\r\n    },\r\n    resetData() {\r\n      this.timelineY = 0;\r\n      this.timelineX = 0;\r\n      const container = this.$refs.mapContainer; // 获取地图容器\r\n      // // 清空所有图像\r\n      // const images = container.querySelectorAll('img');\r\n      // images.forEach(img => img.remove());  // 移除所有图像\r\n\r\n      // 清空所有 SVG 元素\r\n      const svgs = container.querySelectorAll('svg');\r\n      svgs.forEach(svg => svg.remove());  // 移除所有 SVG 元素\r\n      this.svg = null;        // SVG 对象\r\n      this.projection = null; // 地图投影对象\r\n    },\r\n       // 加载章节名\r\n    async loadChapters() {\r\n      try {\r\n        const response = await fetch(\"/data/chapters.json\"); // JSON 文件路径\r\n        const data = await response.json();\r\n        this.chapters = data.chapters;\r\n      } catch (error) {\r\n        console.error(\"Failed to load chapters:\", error);\r\n      }\r\n    },\r\n    // 提取时间中的第一个年份\r\n    extractDate(timeString) {\r\n      if (timeString == null) {\r\n        return new Date(1940, 0, 1); // 如果没有时间，默认为 1940 年 1 月 1 日\r\n      }\r\n\r\n      // 1. 提取年份（括号中的四位数字）\r\n      const yearRegex = /[（(](\\d{4})[）)]/;\r\n      const yearMatch = timeString.match(yearRegex); // 获取年份匹配结果\r\n      const year = yearMatch ? parseInt(yearMatch[1], 10) : 1940;  // 如果找到年份，返回年份，否则默认为 1940 年\r\n\r\n      // 2. 提取月份（如果有月字）\r\n      const monthRegex = /(\\d+)(?=月)/;  // 匹配数字和后面的\"月\"\r\n      const monthMatch = timeString.match(monthRegex);\r\n      const month = monthMatch ? parseInt(monthMatch[1], 10) - 1 : 0;  // 月份从0开始，没找到则默认为1月\r\n\r\n      // 3. 提取日期（如果有日字）\r\n      const dayRegex = /(\\d+)(?=日)/;  // 匹配数字和后面的\"日\"\r\n      const dayMatch = timeString.match(dayRegex);\r\n      const day = dayMatch ? parseInt(dayMatch[1], 10) : 1;  // 没找到则默认为1日\r\n\r\n      // 返回构造的日期对象\r\n      return new Date(year, month, day);  // 返回根据提取的年份、月份、日期生成的日期对象\r\n    },\r\n\r\n    // 加载地点数据\r\n    async loadLocationData() {\r\n      try {\r\n        const response = await fetch(\"/data/dataset_total.json\"); // 数据文件路径\r\n        const data = await response.json();\r\n        // 只提取地名和经纬度\r\n        this.locations = data.map(item => ({\r\n          name: item[\"地名\"],\r\n          lon: item[\"地点经度（默认东经）\"],\r\n          lat: item[\"地点纬度（默认北纬）\"],\r\n          chapter: item[\"所属篇目\"],  // 添加“所属篇目”字段\r\n          route: item[\"详细路线\"],    // 添加“详细路线”字段\r\n          // time: this.extractYear(item[\"游历时间\"])  // 提取年份\r\n        }));\r\n        \r\n      } catch (error) {\r\n        console.error(\"Failed to load location data:\", error);\r\n      }\r\n    },\r\n    // 加载时间数据\r\n    async loadTimeData() {\r\n      try {\r\n        const response = await fetch(\"/data/dataset_time.json\"); // 数据文件路径\r\n        const data = await response.json();\r\n        // 只提取地名和经纬度\r\n        this.timeData = data.map(item => ({\r\n          name: item[\"地名\"],\r\n          lon: item[\"地点经度（默认东经）\"],\r\n          lat: item[\"地点纬度（默认北纬）\"],\r\n          chapter: item[\"所属篇目\"],  // 添加“所属篇目”字段\r\n          route: item[\"详细路线\"],    // 添加“详细路线”字段\r\n          time: this.extractDate(item[\"游历时间\"]),  // 提取年份\r\n          info: item[\"地点信息补充（来自百科）\"],\r\n          impo: item[\"重要事件\"],\r\n        }));\r\n        console.log(\"Original data length:\", data.length);\r\n        console.log(\"Processed timeData length:\", this.timeData.length);\r\n\r\n      } catch (error) {\r\n        console.error(\"Failed to load location data:\", error);\r\n      }\r\n    },\r\n\r\n    // 选择章节\r\n    selectChapter(index) {\r\n      this.activeChapter = index;\r\n      const selectedChapter = this.chapters[index];\r\n      console.log(\"1\");\r\n      // 筛选出\"所属篇目\"为选中章节的数据\r\n      this.selectedLocations = this.locations.filter(item => item.chapter === selectedChapter);\r\n      // 筛选出\"所属篇目\"为选中章节的数据\r\n      this.selectedTimeData = this.timeData.filter(item => item.chapter === selectedChapter);\r\n      // 关联地点和时间数据\r\n      this.relate();\r\n    },\r\n    // 绘制地图路径\r\n    async drawMapPath(svg, projection) {\r\n      return new Promise((resolve, reject) => {\r\n        d3.json(\"/data/china.geo.json\").then(mapData => {\r\n          const path = d3.geoPath().projection(projection);\r\n          svg.append(\"g\")\r\n            .selectAll(\"path\")\r\n            .data(mapData.features)\r\n            .enter()\r\n            .append(\"path\")\r\n            .attr(\"d\", path)\r\n            .style(\"fill\", \"#f9f9f9\")\r\n            .on(\"mouseover\", (event, d) => {\r\n              d3.select(event.currentTarget).style(\"fill\", \"#b7ae8f\");\r\n              this.createTooltip(svg, d, event);\r\n            })\r\n            .on(\"mousemove\", (event) => {\r\n              this.removeTooltip();\r\n              this.createTooltip(svg, null, event);\r\n            })\r\n            .on(\"mouseout\", (event) => {\r\n              d3.select(event.currentTarget).style(\"fill\", \"#f9f9f9\");\r\n              this.removeTooltip();\r\n            });\r\n\r\n          // 绘制完成后调用 resolve\r\n          resolve();\r\n        }).catch(reject); // 如果失败，则调用 reject\r\n      });\r\n    },\r\n    // 在选择章节时关联地图上的点和时间标尺\r\n    async relate() {\r\n      // const container = this.$refs.mapContainer;\r\n      // const width = container.clientWidth;\r\n      // const height = container.clientHeight;\r\n      // const centerX = width / 2;\r\n      \r\n\r\n      const svg = d3.select(this.$refs.mapContainer).select(\"svg\");  // 选择地图的 svg 容器\r\n      svg.selectAll(\"circle\").remove();  // 清除之前绘制的地点圆圈\r\n      svg.selectAll(\".location-line\").remove();\r\n      svg.selectAll(\".tick\").remove();\r\n      // 高亮当前章节的地点，灰色其他地点\r\n      await this.drawLocationCircles(svg, this.projection, this.selectedLocations);\r\n      await this.drawLocationLines(svg, this.projection, this.selectedLocations, this.len);\r\n      \r\n      // 获取时间标尺容器的 g 元素\r\n      const timelineGroup = svg.select(\".timeline-group\");\r\n    \r\n      // const timelineWidth = svg.node().getBoundingClientRect().width;\r\n      const timelineWidth = this.timelineX;\r\n      const timelineHeight = 60;  // 时间标尺的高度\r\n\r\n      const centerY = this.timelineY;\r\n\r\n      // 1. 清除之前的时间连接线和时间点\r\n      svg.selectAll(\".timeline-link\").remove();\r\n      svg.selectAll(\".location-circle\").remove();  // 清除之前绘制的地点圆圈\r\n      timelineGroup.selectAll(\".timeline-point\").remove(); // axis-label清除之前的时间点\r\n      svg.selectAll(\".axis-label\").remove();\r\n      timelineGroup.selectAll(\".timeline-text\").remove();\r\n      // 清除之前绘制的时间轴\r\n      timelineGroup.select(\".timeline-axis\").remove();\r\n\r\n      // 时间数据范围\r\n      const minDate = d3.min(this.selectedTimeData, d => new Date(d.time));\r\n      const maxDate = d3.max(this.selectedTimeData, d => new Date(d.time));\r\n\r\n      // 计算时间跨度（以毫秒为单位）\r\n      const timeSpan = maxDate - minDate;\r\n\r\n      // 根据时间跨度动态调整最小和最大日期\r\n      let adjustedMinDate, adjustedMaxDate;\r\n      if (timeSpan <= 365 * 24 * 60 * 60 * 1000) {  // 小于一年\r\n        adjustedMinDate = d3.timeMonth.offset(minDate, -1);  // 最小日期为实际最小日期的前1个月\r\n        adjustedMaxDate = d3.timeMonth.offset(maxDate, 1);   // 最大日期为实际最大日期的后1个月\r\n      } else {  // 大于一年\r\n        adjustedMinDate = d3.timeYear.offset(minDate, -1);   // 最小日期为实际最小日期的前1年\r\n        adjustedMaxDate = d3.timeYear.offset(maxDate, 1);    // 最大日期为实际最大日期的后1年\r\n      }\r\n\r\n      // 2. 根据选中的时间数据，更新时间标尺\r\n      const xScale = d3.scaleTime()\r\n        .domain([adjustedMinDate, adjustedMaxDate])\r\n        .range([30, timelineWidth - 30]);\r\n\r\n      // 动态设置时间刻度的间隔\r\n      const interval = timeSpan <= 365 * 24 * 60 * 60 * 1000 // 小于一年\r\n        ? d3.timeMonth.every(1)  // 每月一个刻度\r\n        : d3.timeYear.every(1);  // 每年一个刻度\r\n\r\n      // 绘制时间轴刻度\r\n      const axisBottom = d3.axisBottom(xScale).ticks(interval).tickFormat(d3.timeFormat(\"%Y-%m\"));\r\n      timelineGroup.append(\"g\")\r\n        .attr(\"class\", \"timeline-axis\")\r\n        .attr(\"transform\", `translate(0, ${centerY + timelineHeight / 2})`)\r\n        .call(axisBottom)\r\n        .selectAll(\".tick text\") // 选择刻度文本\r\n        .style(\"font-size\", \"15px\") // 调大字体\r\n        .style(\"font-weight\", \"bold\") // 加粗字体\r\n        .style(\"fill\", \"#000000\"); // 设置字体颜色\r\n\r\n      // 修改刻度线的样式\r\n      timelineGroup.selectAll(\".tick line\") // 修改刻度线的颜色\r\n        .attr(\"y1\", -30)\r\n        .attr(\"y2\", timelineHeight - 30)\r\n        .style(\"stroke\", \"#b7ae8f\") // 红色\r\n        .style(\"stroke-width\", \"1\"); // 调整线宽\r\n\r\n      // 隐藏横轴线 (即 path 元素)\r\n      timelineGroup.select(\".timeline-axis path\")\r\n          .style(\"display\", \"none\"); // 隐藏横轴线\r\n\r\n      // 绘制时间轴上的每个点\r\n      timelineGroup.selectAll(\".timeline-point\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"class\", \"timeline-point\")\r\n        .attr(\"cx\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\r\n          const offsetX = i * 5;  // 根据索引为点添加水平偏移（你可以调整这个值）\r\n          return baseX + offsetX; // 添加偏移后的X坐标\r\n        })\r\n        .attr(\"cy\", centerY + timelineHeight / 2) // 在时间标尺中居中显示\r\n        .attr(\"r\", 6)\r\n        .attr(\"fill\", \"#b7ae8f\")\r\n        .style(\"opacity\", 0.7);      \r\n      // 2. 绘制时间文本\r\n      timelineGroup.selectAll(\".timeline-text\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"text\")\r\n        .attr(\"class\", \"timeline-text\")\r\n        .attr(\"x\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\r\n          const offsetX = i * 5;  // 根据索引为点添加水平偏移\r\n          return baseX + offsetX;\r\n        })\r\n        .attr(\"y\", centerY + 20 + timelineHeight / 2) // 文字位置稍微在点的下方\r\n        .attr(\"dy\", -30) // 微调文字的垂直位置\r\n        .attr(\"text-anchor\", \"middle\") // 文字居中显示\r\n        .text(d => new Date(d.time).toLocaleDateString()) // 格式化时间为日期\r\n        .style(\"font-size\", \"15px\")\r\n        .style(\"font-weight\", \"bold\") // 加粗字体\r\n        .style(\"fill\", \"#000000\");\r\n\r\n      // 3. 添加坐标轴名称（时间轴名称）\r\n      svg.append(\"text\")\r\n        .attr(\"class\", \"axis-label\")\r\n        .attr(\"x\", (timelineWidth *0.95))  // 将文本放置在画布的中心\r\n        .attr(\"y\", centerY + timelineHeight / 2 - 10) // 放置在时间轴下方\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .text(\"时间轴\")  // 设置坐标轴的名称\r\n        .style(\"font-size\", \"16px\")\r\n        .style(\"font-weight\", \"bold\");\r\n\r\n      // 4. 绘制时间连接线（从每个地点到时间点）\r\n      const lineGroup = svg.append(\"g\").attr(\"class\", \"timeline-link\");\r\n\r\n\r\n      // 创建一个时间轴上的点与地图上地点之间的连接曲线\r\n      lineGroup.selectAll(\"path\")  // 使用path而不是line来绘制曲线\r\n          .data(this.selectedTimeData)\r\n          .enter()\r\n          .append(\"path\")\r\n          .attr(\"class\", \"timeline-link\")\r\n          .attr(\"d\", (d, i) => {\r\n            // 为终点添加偏移量，避免重叠\r\n            const offsetX = i * 5;  // 可以根据索引调整偏移量（例如 5px）\r\n            const offsetY = 0;  // 可以根据需要在y方向上加偏移，调整终点的y位置\r\n\r\n            // 定义曲线的起点和终点以及控制点\r\n            const start = [xScale(new Date(d.time)) + offsetX, centerY + timelineHeight / 2 + offsetY];  // 时间点的x坐标和y坐标\r\n            \r\n\r\n            // 地点的x坐标和y坐标，添加偏移量\r\n            const end = this.projection([d.lon, d.lat]);\r\n            \r\n\r\n            // 定义控制点用于绘制曲线 (你可以根据需要调整控制点的位置)\r\n            const controlPoint = [\r\n                (start[0] + end[0]) / 2, // 控制点的x坐标\r\n                (start[1] + end[1]) / 2 - 50  // 控制点的y坐标，偏移使曲线有弯曲\r\n            ];\r\n\r\n              // 使用贝塞尔曲线进行绘制\r\n            return d3.line().curve(d3.curveCardinal).x(d => d[0]).y(d => d[1])([start, controlPoint, end]);\r\n              // 曲线的起点、控制点和终点\r\n          })\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", \"#b7ae8f\")\r\n          .attr(\"stroke-width\", 2)\r\n          .style(\"opacity\", 0.5)\r\n          .style(\"stroke-dasharray\", \"4,4\");  // 添加虚线效果\r\n      // 绘制每个时间点下方的圆角矩形\r\n      const rectWidth = 30;  // 设置矩形宽度\r\n      const rectHeight = 80; // 设置矩形高度\r\n\r\n      lineGroup.selectAll(\".timeline-rect\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"class\", \"timeline-rect\")\r\n        .attr(\"x\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\r\n          const offsetX = i * 5;  // 根据索引为点添加水平偏移\r\n          return baseX + offsetX - rectWidth / 2; // 确保矩形居中\r\n        })\r\n        .attr(\"y\", (d, i) => {\r\n          const baseY = centerY + 130; // 根据时间绘制位置\r\n          const offsetY = (-1)**i * 60;  // 根据索引为每个矩形添加垂直偏移\r\n          return baseY + offsetY;  // 确保矩形有足够的垂直间距\r\n        })\r\n        .attr(\"width\", rectWidth)\r\n        .attr(\"height\", rectHeight)\r\n        .attr(\"rx\", 8)  // 圆角矩形\r\n        .attr(\"ry\", 8)\r\n        .attr(\"fill\", \"#b7ae8f\")\r\n        .on(\"click\", (event, d) => {  // 使用箭头函数\r\n          const placeImpo = d.impo;\r\n          const placeInfo = d.info;\r\n          this.placeImpoDisplay = placeImpo ? placeImpo : \"无\";\r\n          this.placeInfoDisplay = placeInfo ? placeInfo : \"无\";\r\n        \r\n        })\r\n        .on(\"mouseover\", function() {\r\n          d3.select(this)  // 选择当前的矩形\r\n            .transition()  // 添加过渡效果\r\n            .duration(300)  // 设置过渡时间为300ms\r\n            .attr(\"fill\", \"#f9f9f9\")  // 鼠标经过时改变矩形颜色\r\n            .attr(\"cursor\", \"pointer\")  // 改变鼠标光标为手形\r\n            .style(\"opacity\", 0.8);  // 改变透明度\r\n        })\r\n        .on(\"mouseout\", function() {\r\n          d3.select(this)  // 选择当前的矩形\r\n            .transition()  // 添加过渡效果\r\n            .duration(300)  // 设置过渡时间为300ms\r\n            .attr(\"fill\", \"#b7ae8f\")  // 恢复原来的颜色\r\n            .style(\"opacity\", 1);  // 恢复透明度\r\n        });\r\n\r\n\r\n      // 绘制每个矩形和时间点之间的连接线\r\n      lineGroup.selectAll(\".timeline-line\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"line\")\r\n        .attr(\"class\", \"timeline-line\")\r\n        .attr(\"x1\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 时间点x坐标\r\n          const offsetX = i * 5;  // 水平偏移\r\n          return baseX + offsetX;\r\n        })\r\n        .attr(\"y1\", centerY + timelineHeight / 2) // 时间点y坐标\r\n        .attr(\"x2\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 时间点x坐标\r\n          const offsetX = i * 5;  // 水平偏移\r\n          return baseX + offsetX;\r\n        })\r\n        .attr(\"y2\", (d, i) => {\r\n          const baseY = centerY+ 130; // 根据时间绘制位置\r\n          const offsetY = (-1)**i * 60;  // 根据索引为每个矩形添加垂直偏移\r\n          return baseY + offsetY;  // 确保矩形有足够的垂直间距\r\n        })\r\n        .attr(\"stroke\", \"#b7ae8f\")\r\n        .attr(\"stroke-width\", 2)\r\n        .style(\"opacity\", 0.5);\r\n      // const rectWidth = 30;  // 设置矩形宽度\r\n      // const rectHeight = 80; // 设置矩形高度\r\n      // 在矩形中添加文本\r\n      lineGroup.selectAll(\".timeline-text\")\r\n        .data(this.selectedTimeData)\r\n        .enter()\r\n        .append(\"text\")\r\n        .attr(\"class\", \"timeline-text\")\r\n        .attr(\"x\", (d, i) => {\r\n          const baseX = xScale(new Date(d.time)); // 根据时间绘制位置\r\n          const offsetX = i * 5;  // 根据索引为点添加水平偏移\r\n          return baseX + offsetX;\r\n        })\r\n        .attr(\"y\", (d, i) => {\r\n          const baseY = centerY + 150; // 根据时间绘制位置\r\n          const offsetY = (-1)**i * 60;  // 根据索引为每个矩形添加垂直偏移\r\n          return baseY + offsetY;  // 确保矩形有足够的垂直间距\r\n        })\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"font-size\", \"12px\")\r\n        .attr(\"fill\", \"#000\")\r\n        .each(function(d) {\r\n          const textElement = d3.select(this);\r\n          const characters = d.name.split(\"\"); // 将 name 拆分为字符数组\r\n          const num = 5; // 每列最大字符数\r\n          const columnOffset = 10; // 列的水平偏移距离\r\n          // 动态计算行高\r\n          const lineHeight = characters.length <= num ? 5 / characters.length : 1;\r\n\r\n          characters.forEach((char, index) => {\r\n            const column = Math.floor(index / num); // 当前字符的列号\r\n            const row = index % num; // 当前字符在列中的行号\r\n\r\n            textElement.append(\"tspan\")\r\n              .attr(\"x\", +textElement.attr(\"x\") - column * columnOffset) // 向左偏移\r\n              .attr(\"dy\", row === 0 && column > 0 ? `-${(num - 1) * lineHeight}em` : lineHeight + \"em\")\r\n              .text(char); // 设置 tspan 的文本内容\r\n          });\r\n        });\r\n\r\n      console.log(\"Relating data completed\");\r\n    },\r\n\r\n    // 绘制地点圆圈\r\n    async drawLocationCircles(svg, projection, locations) {\r\n      return new Promise((resolve) => {\r\n        svg.append(\"g\")\r\n          .selectAll(\"circle\")\r\n          .data(this.locations)\r\n          .enter()\r\n          .append(\"circle\")\r\n          .attr(\"cx\", (d) => projection([d.lon, d.lat])[0]) // 经度和纬度转为坐标\r\n          .attr(\"cy\", (d) => projection([d.lon, d.lat])[1])\r\n          .attr(\"r\", 2) // 圆圈半径\r\n          .attr(\"fill\", d => {\r\n            // 如果该地点属于当前章节，显示为红色，否则为灰色\r\n            return locations.includes(d) ? \"#b7ae8f\" : \"#808080\";\r\n          }) // 圆圈颜色为红色\r\n          .on(\"click\", (d) => {\r\n            console.log(`Clicked on location: ${d.name}`);\r\n          });\r\n\r\n        // 圆圈绘制完成后调用 resolve\r\n        resolve();\r\n      });\r\n    },\r\n\r\n    // 绘制地点之间的连接线\r\n    async drawLocationLines(svg, projection, locations, len) {\r\n      return new Promise((resolve) => {\r\n        const lineGroup = svg.append(\"g\");\r\n        for (let i = 0; i < this.locations.length - 1; i++) {\r\n          const start = this.locations[i];\r\n          const end = this.locations[i + 1];\r\n          // 判断经度或纬度差是否超过阈值 len\r\n          if (Math.abs(start.lon - end.lon) < len && Math.abs(start.lat - end.lat) < len) {\r\n            lineGroup.append(\"line\")\r\n              .attr(\"class\", \"location-line\") // 为每条线添加一个 class，便于后续清除\r\n              .attr(\"x1\", projection([start.lon, start.lat])[0])\r\n              .attr(\"y1\", projection([start.lon, start.lat])[1])\r\n              .attr(\"x2\", projection([end.lon, end.lat])[0])\r\n              .attr(\"y2\", projection([end.lon, end.lat])[1])\r\n              .attr(\"stroke\", locations.includes(start) && locations.includes(end) ? \"#b7ae8f\" : \"#808080\") // 线的颜色\r\n              .attr(\"stroke-width\", 1); // 线的宽度\r\n          }\r\n        }\r\n\r\n        // 连接线绘制完成后调用 resolve\r\n        resolve();\r\n      });\r\n    },\r\n    async initMap() {\r\n      try {\r\n        // // 清除所有容器内的图像和矢量图形（SVG）\r\n        // const images = container.querySelectorAll('img');\r\n        // images.forEach(img => img.remove());  // 移除所有图像\r\n\r\n        // const svgs = container.querySelectorAll('svg');\r\n        // svgs.forEach(svg => svg.remove());  // 移除所有 SVG 元素\r\n        // 获取 `mapContainer` 的 DOM 元素\r\n        const container = this.$refs.mapContainer;\r\n        console.log(\"Container height:\", container.clientHeight);\r\n        // 定义地图投影\r\n        this.projection = d3.geoMercator()\r\n          .center([107, 20]) // 地图中心位置\r\n          .scale(container.clientHeight * 0.8) // 设置缩放量\r\n          .translate([container.clientWidth / 1.85, container.clientHeight / 1.62]);\r\n\r\n        // 创建 SVG，宽高使用 CSS 控制\r\n        this.svg = d3\r\n          .select(container)\r\n          .append(\"svg\")\r\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\") // 保持宽高比\r\n          .attr(\"viewBox\", `0 0 ${container.clientWidth} ${container.clientHeight}`);\r\n\r\n        // 绘制地图路径、地点圆圈、连接线等\r\n        await this.drawMapPath(this.svg, this.projection);\r\n        await this.drawLocationCircles(this.svg, this.projection, this.locations);\r\n        await this.drawLocationLines(this.svg, this.projection, this.locations, this.len);\r\n\r\n        // 初始化时间标尺\r\n        this.initTimeline(this.svg, container.clientHeight / 1.6); // 调整时间标尺的位置\r\n      } catch (error) {\r\n        console.error(\"地图数据加载失败:\", error);\r\n      }\r\n    },\r\n    initTimeline(mapSvg, mapHeight) {\r\n      // 检查 mapSvg 是否有效\r\n      if (!mapSvg || !mapSvg.node()) {\r\n        console.error('SVG is not initialized correctly.');\r\n        return;\r\n      }\r\n      const svg = mapSvg.append(\"g\").attr(\"class\", \"timeline-group\");\r\n\r\n      const timelineWidth = mapSvg.node().getBoundingClientRect().width;\r\n      const timelineHeight = 60;  // 高度设置为固定的 60px\r\n\r\n      // 设置时间标尺的 y 坐标，使其位于地图下方\r\n      const timelineYPosition = mapHeight + 20; // 调整时间标尺的位置，放置在地图下方\r\n      this.timelineY = timelineYPosition; // 时间轴的 y 坐标\r\n      this.timelineX = timelineWidth;\r\n      // 创建一个时间轴的比例尺\r\n      const xScale = d3.scaleTime()\r\n        .domain([d3.min(this.timeData, d => new Date(d.time)),\r\n          d3.max(this.timeData, d => new Date(d.time))])\r\n        .range([0, timelineWidth]);\r\n\r\n      // 绘制时间线的路径\r\n      const line = d3.line()\r\n        .x(d => xScale(new Date(d.time)))  // 根据时间来定位位置\r\n        .y(timelineHeight / 2)  // 固定在垂直中心\r\n        .curve(d3.curveMonotoneX);  // 平滑曲线\r\n      svg.append(\"path\")\r\n        .data([this.timeData]) // 将所有地点数据作为路径\r\n        .attr(\"d\", line)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", \"#b7ae8f\")\r\n        .attr(\"stroke-width\", 3)\r\n        .attr(\"marker-end\", \"url(#arrow)\")  // 为路径添加箭头标记\r\n        .attr(\"transform\", `translate(0, ${timelineYPosition})`); // 设置时间标尺的位置\r\n\r\n      console.log(xScale(new Date(this.timeData[50].time))); // 打印时间对应的X坐标\r\n\r\n      // 可选：添加时间轴刻度\r\n      const ticks = xScale.ticks(d3.timeYear.every(1)); // 每年一格\r\n      svg.selectAll(\".tick\")\r\n        .data(ticks)\r\n        .enter().append(\"line\")\r\n        .attr(\"class\", \"tick\")\r\n        .attr(\"x1\", d => xScale(d))\r\n        .attr(\"x2\", d => xScale(d))\r\n        .attr(\"y1\", 0)\r\n        .attr(\"y2\", timelineHeight)\r\n        .attr(\"stroke\", \"#b7ae8f\")\r\n        .attr(\"stroke-width\", 1)\r\n        .attr(\"transform\", `translate(0, ${timelineYPosition})`); // 设置刻度的位置\r\n\r\n      // 定义箭头的marker\r\n      svg.append(\"defs\").append(\"marker\")\r\n        .attr(\"id\", \"arrow\")  // 给箭头设置ID\r\n        .attr(\"viewBox\", \"0 0 10 10\")  // 设置箭头的视口\r\n        .attr(\"refX\", 8)  // 设置箭头的位置偏移量\r\n        .attr(\"refY\", 5)  // 设置箭头的Y偏移量\r\n        .attr(\"markerWidth\", 4)  // 箭头宽度\r\n        .attr(\"markerHeight\", 4)  // 箭头高度\r\n        .attr(\"orient\", \"auto\")  // 自动旋转以适应路径\r\n        .attr(\"transform\", `translate(0, ${timelineYPosition})`) // 设置刻度的位置\r\n        .append(\"path\")\r\n        .attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\")  // 绘制箭头路径\r\n        .attr(\"fill\", \"#b7ae8f\");  // 设置箭头颜色\r\n        \r\n    },    \r\n\r\n    \r\n    createTooltip(svg, d, event) {\r\n      const { x, y } = this.mouseXY(svg, event);\r\n\r\n      svg\r\n        .append(\"rect\")\r\n        .attr(\"id\", \"tooltip-box\")\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"width\", 100)\r\n        .attr(\"height\", 40)\r\n        .attr(\"fill\", \"#000\")\r\n        .attr(\"opacity\", 0.6);\r\n\r\n      svg\r\n        .append(\"text\")\r\n        .attr(\"id\", \"tooltip-text\")\r\n        .attr(\"x\", x + 50)\r\n        .attr(\"y\", y + 25)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"font-size\", \"14px\")\r\n        .attr(\"fill\", \"#fff\")\r\n        .text(d ? d.properties.name : \"\");\r\n    },\r\n    removeTooltip() {\r\n      d3.select(\"#tooltip-box\").remove();\r\n      d3.select(\"#tooltip-text\").remove();\r\n    },\r\n    mouseXY(svg, event) {\r\n      const rect = svg.node().getBoundingClientRect();\r\n      return { x: event.clientX - rect.left, y: event.clientY - rect.top };\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.page-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-start;  /* 内容从左侧开始 */\r\n  padding-top: 50px; /* 给顶部导航栏留空间 */\r\n  padding-bottom: 0px;\r\n  width: 100vw;\r\n  height: calc(100vh - 50px); /* 减去顶部和底部 padding */\r\n  overflow: hidden;\r\n   /* 根据需要调整此值，避免与导航栏重叠 */\r\n}\r\n.chapter-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 20%; /* 动态调整宽度 */\r\n  max-width: 250px; /* 最大宽度限制 */\r\n  min-width: 150px; /* 最小宽度限制 */\r\n  padding-top: 15px;\r\n  padding-bottom: 15px;\r\n  height: calc(100% - 30px);\r\n  overflow-y: auto;\r\n  background-color: #e4e0cf;\r\n  border-right: 1px solid #ddd;\r\n  box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);\r\n  flex-shrink: 0; /* 防止缩小 */\r\n}\r\n.chapter-item {\r\n  padding: 10px;\r\n  margin: 5px 10px 5px 12px;\r\n  border-radius: 8px;\r\n  background-color: #ffffff;\r\n  color: #333;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s, color 0.3s;\r\n}\r\n.chapter-item:hover {\r\n  background-color: #b7ae8f;\r\n  color: #ffffff;\r\n}\r\n\r\n.chapter-item.active {\r\n  background-color: #e4e0cf;\r\n  color: #ffffff;\r\n}\r\n.story-content{\r\n  flex-direction: column;  /* 子容器上下排列 */\r\n  width: calc(30% - 80px);\r\n  max-width: 340px; /* 最大宽度限制 */\r\n  min-width: 250px; /* 最小宽度限制 */\r\n  flex-shrink: 0; /* 防止缩小 */\r\n  padding-right: 40px; \r\n  padding-top: 40px;\r\n  padding-bottom: 40px;\r\n  padding-left: 45px;\r\n  height: calc(100% - 80px);\r\n  display: flex;\r\n  justify-content: center; /* 垂直方向居中 */\r\n  align-items: center;\r\n  background-color: #e4e0cf;\r\n}\r\n.page-content {\r\n  flex-grow: 1; /* 填充剩余空间 */\r\n  width: 50%;  /* 不设置固定宽度 */\r\n  height: 100%;            /* 父容器占满可用空间 */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #e4e0cf;\r\n  flex-shrink: 0; /* 防止缩小 */\r\n}\r\n.map-container {\r\n  position: relative; /* 保证子元素可以相对定位 */\r\n  margin: 0;\r\n  width: 100%; /* 使用百分比宽度适配父容器 */\r\n  \r\n  height: 100%; /* 使用百分比高度适配父容器 */\r\n  display: flex; /* 使用 flex 布局 */\r\n  justify-content: center; /* 水平方向居中 */\r\n  align-items: center; /* 垂直方向顶部对齐 */\r\n  overflow: hidden; /* 隐藏超出的部分 */\r\n  background-color: #e4e0cf;\r\n  z-index: auto;\r\n  flex-shrink: 0; /* 防止缩小 */\r\n}\r\n.map-container svg {\r\n  width: 90%; /* 宽度占比 */\r\n  height: 100%; /* 高度占比 */\r\n}\r\n.south-china-sea-image {\r\n  position: absolute;\r\n  top: 49%; /* 调整位置 */\r\n  left: 84%;\r\n  transform: translate(-50%, -50%); /* 居中 */\r\n  width: 11%; /* 调整图片大小 */\r\n  max-width: 10vw; /* 根据屏幕宽度限制图片大小 */\r\n  max-height: 15vw; /* 根据屏幕高度限制图片大小 */\r\n  height: auto; /* 保持图片比例 */\r\n  z-index: 100; /* 根据需要调整叠加次序 */\r\n}\r\n.top-content {\r\n  width: 100%;\r\n  height: 50%;\r\n  background-color: #f9f9f9;\r\n  margin-bottom: 15px; /* 为了分隔上下内容 */\r\n  overflow-y: auto;  /* 允许内容滚动 */\r\n}\r\n.bottom-content {\r\n  width: 100%;\r\n  height: 50%;\r\n  background-color: #f9f9f9;\r\n  overflow-y: auto;  /* 允许内容滚动 */\r\n}\r\n.inner-content{\r\n  font-size: 20px;\r\n  color: #333;\r\n  line-height: 2.0;\r\n  margin-bottom: 10px;\r\n  text-indent: 2em;  /* 首段空两格 */\r\n  overflow-y: auto;  /* 超过高度时出现滚动条 */\r\n}\r\n.title {\r\n  font-size: 36px;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}