import { _ as _defineProperty } from '../_chunks/dep-931ef437.js';
import { defineComponent, computed } from 'vue';
import renderFn from '../utils/render-fn.js';
import useSizeProps from '../utils/use-size-props.js';
import '../style/css.js';
import '../utils/use-common-classname.js';
import '../utils/config-context.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M7.48 2.58L1 .66v12.05C1.23 18.46 6.1 23 12 23c5.91 0 10.78-4.54 11-10.29V.66l-6.48 1.92a11.24 11.24 0 00-9.04 0zm-2.34 1.4C4.32 4.6 3.6 5.34 3 6.17V3.34l2.14.63zM21 3.33v2.84c-.6-.83-1.32-1.58-2.14-2.2L21 3.33zM9 12H7V9h2v3zm8 0h-2V9h2v3zm-4.1 2.05c.37.76.85.99 1.18 1.02.34.02.76-.14 1.09-.62l.55-.84 1.67 1.11-.56.83a3.2 3.2 0 01-2.91 1.5 3.16 3.16 0 01-1.92-.88c-.55.52-1.2.83-1.92.89a3.2 3.2 0 01-2.91-1.5l-.56-.84 1.67-1.1.55.83c.33.48.75.64 1.09.62.33-.03.8-.26 1.19-1.02l.89-1.79.9 1.8z"
    }
  }]
};
var catFilled = defineComponent({
  name: "CatFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-cat-filled", className.value]);
    var finalStyle = computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => renderFn(element, finalProps.value);
  }
});

export default catFilled;
//# sourceMappingURL=cat-filled.js.map
