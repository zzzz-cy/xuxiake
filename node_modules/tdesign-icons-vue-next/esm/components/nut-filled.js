import { _ as _defineProperty } from '../_chunks/dep-931ef437.js';
import { defineComponent, computed } from 'vue';
import renderFn from '../utils/render-fn.js';
import useSizeProps from '../utils/use-size-props.js';
import '../style/css.js';
import '../utils/use-common-classname.js';
import '../utils/config-context.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M20.77 2.37l-.32.95a11.75 11.75 0 01-1.52 2.9 10.83 10.83 0 012.34 4.6c.47 2.06.25 4.4-1.5 6.13l-2.11 2.12-.73-.72c-1.9 1.7-4.1 2.96-6.26 3.48-2.47.6-5 .25-6.88-1.62-1.87-1.88-2.22-4.4-1.62-6.88a14.94 14.94 0 013.49-6.26l-.73-.73 2.12-2.12c1.73-1.72 4.06-1.95 6.11-1.5 1.6.35 3.14 1.13 4.31 2.09a9.4 9.4 0 001.08-2.13l.32-.94 1.9.63zM15.5 16.93l-.97-.98v-2.24h-2.25L7.07 8.49a12.9 12.9 0 00-2.96 5.31c-.48 2-.15 3.75 1.1 5 1.25 1.24 2.99 1.57 4.99 1.09a12.9 12.9 0 005.31-2.96z"
    }
  }]
};
var nutFilled = defineComponent({
  name: "NutFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-nut-filled", className.value]);
    var finalStyle = computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => renderFn(element, finalProps.value);
  }
});

export default nutFilled;
//# sourceMappingURL=nut-filled.js.map
