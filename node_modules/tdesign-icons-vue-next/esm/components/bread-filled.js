import { _ as _defineProperty } from '../_chunks/dep-931ef437.js';
import { defineComponent, computed } from 'vue';
import renderFn from '../utils/render-fn.js';
import useSizeProps from '../utils/use-size-props.js';
import '../style/css.js';
import '../utils/use-common-classname.js';
import '../utils/config-context.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M2.44 13c-.28.22-.39.51-.44.72a6.9 6.9 0 001.89 6.36c1.58 1.63 3.99 2.66 6.41 2.04 2.59-.66 5.2-2.4 7.34-4.46l.01-.01.02-.02c2.06-2.14 3.8-4.75 4.45-7.33.62-2.43-.4-4.84-2.04-6.42a6.87 6.87 0 00-5.31-2.03c-.75.05-1.17.58-1.37.9l3.9 3.9-1.41 1.42-4.52-4.52A3.34 3.34 0 008 4.65c-.14.17-.29.42-.35.72-.07.3-.05.76.3 1.12l4.76 4.76-1.42 1.42L6.54 7.9a1.24 1.24 0 00-1.13-.3c-.3.06-.55.21-.73.36a3.34 3.34 0 00-1.09 3.37l4.52 4.51-1.41 1.41L2.44 13z"
    }
  }]
};
var breadFilled = defineComponent({
  name: "BreadFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-bread-filled", className.value]);
    var finalStyle = computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => renderFn(element, finalProps.value);
  }
});

export default breadFilled;
//# sourceMappingURL=bread-filled.js.map
