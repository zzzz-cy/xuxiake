import { _ as _defineProperty } from '../_chunks/dep-931ef437.js';
import { defineComponent, computed } from 'vue';
import renderFn from '../utils/render-fn.js';
import useSizeProps from '../utils/use-size-props.js';
import '../style/css.js';
import '../utils/use-common-classname.js';
import '../utils/config-context.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M12.03 4.12L9.5 1.6 8.1 2.99l1.05 1.06c-.49 0-.98.04-1.41.16a7.62 7.62 0 00-4.1 2.64C2.56 8.24 2 10.1 2 12.5c0 2.52 1.11 5.06 2.7 6.86 1.55 1.77 3.79 3.06 6.09 2.51.35-.08.61-.16.76-.2l.11-.03a1 1 0 01.34-.04 1 1 0 01.33.03l.12.04c.15.04.4.12.76.2 2.3.55 4.55-.73 6.1-2.5A10.75 10.75 0 0022 12.5c0-2.42-.59-4.27-1.65-5.65a7.72 7.72 0 00-4.07-2.63 4.72 4.72 0 00-1.25-.17l1.07-1-1.36-1.46-2.71 2.53zM12 8C9.74 8 9 6 9 6s1.88.64 3 .64S15 6 15 6s-.74 2-3 2z"
    }
  }]
};
var tomatoFilled = defineComponent({
  name: "TomatoFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-tomato-filled", className.value]);
    var finalStyle = computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => renderFn(element, finalProps.value);
  }
});

export default tomatoFilled;
//# sourceMappingURL=tomato-filled.js.map
