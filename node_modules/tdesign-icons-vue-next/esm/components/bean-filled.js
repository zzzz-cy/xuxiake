import { _ as _defineProperty } from '../_chunks/dep-931ef437.js';
import { defineComponent, computed } from 'vue';
import renderFn from '../utils/render-fn.js';
import useSizeProps from '../utils/use-size-props.js';
import '../style/css.js';
import '../utils/use-common-classname.js';
import '../utils/config-context.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M17.55 2.17a5.9 5.9 0 00-4.35-.2 6.37 6.37 0 00-2.87 2.27c-.49.66-.79 1.4-1.04 2l-.1.28c-.3.7-.57 1.24-1.03 1.7-.46.46-1 .73-1.7 1.03l-.27.1c-.61.26-1.35.56-2.01 1.04a6.38 6.38 0 00-2.31 2.9 5.81 5.81 0 00.24 4.34c1.18 2.82 3.99 4.45 7.08 4.69 3.12.24 6.62-.88 9.4-3.67 2.94-2.94 4.1-6.45 3.81-9.55-.29-3.1-2.03-5.79-4.85-6.93zM6.77 11.03a3.04 3.04 0 01-.2-.2l.17-.08.3-.12c.72-.3 1.5-.67 2.18-1.34a6.42 6.42 0 001.35-2.2l.12-.3.09-.2.23.2a3 3 0 11-4.24 4.24z"
    }
  }]
};
var beanFilled = defineComponent({
  name: "BeanFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-bean-filled", className.value]);
    var finalStyle = computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => renderFn(element, finalProps.value);
  }
});

export default beanFilled;
//# sourceMappingURL=bean-filled.js.map
