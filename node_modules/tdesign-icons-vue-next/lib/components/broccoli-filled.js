'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-304d0f8c.js');
var vue = require('vue');
var utils_renderFn = require('../utils/render-fn.js');
var utils_useSizeProps = require('../utils/use-size-props.js');
require('../utils/use-common-classname.js');
require('../utils/config-context.js');

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M19.86 7a5.22 5.22 0 01-3.7 9.76 5.2 5.2 0 004.66.5 4.53 4.53 0 01-8.88.9c-.17-.01-.43.02-.8.16-.5.18-1.07.5-1.63.87a18.45 18.45 0 00-2.46 2l-.7.71-4.25-4.24.7-.71c.47-.47 1.16-1.66 1.73-3a14.93 14.93 0 00.8-2.45 5.21 5.21 0 015.82-8.65l.25.17a5.22 5.22 0 012.26 3.7v.04a6.8 6.8 0 00-1.36-4.77 5.13 5.13 0 017.57 5zm-7.79 8.28l.11-.27-.89-.89-1.41 1.42-1.42-1.42 1.42-1.41-.27-.27c-.82.22-1.65.2-2.44 0l-.06.23a16.9 16.9 0 01-.74 2.06c-.42 1-.96 2.06-1.51 2.85l1.51 1.52c.53-.46 1.25-1.05 2.03-1.57.63-.42 1.34-.83 2.05-1.09.42-.15.9-.28 1.38-.29.05-.3.14-.6.24-.87z"
    }
  }]
};
var broccoliFilled = vue.defineComponent({
  name: "BroccoliFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = vue.computed(() => props.size);
    var {
      className,
      style
    } = utils_useSizeProps['default'](propsSize);
    var finalCls = vue.computed(() => ["t-icon", "t-icon-broccoli-filled", className.value]);
    var finalStyle = vue.computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = vue.computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => utils_renderFn['default'](element, finalProps.value);
  }
});

exports.default = broccoliFilled;
//# sourceMappingURL=broccoli-filled.js.map
