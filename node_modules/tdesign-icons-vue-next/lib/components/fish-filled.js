'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-304d0f8c.js');
var vue = require('vue');
var utils_renderFn = require('../utils/render-fn.js');
var utils_useSizeProps = require('../utils/use-size-props.js');
require('../utils/use-common-classname.js');
require('../utils/config-context.js');

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M13 3.57a9.5 9.5 0 004.71 8.14 9 9 0 01-6.67-7.9h-.05a13.74 13.74 0 00-4.09.6c-.57.19-1.19.46-1.6.88l-.59.58L6.8 9a9.93 9.93 0 00-1.77 5.06c-.19.02-.4.04-.62.08-.86.13-2.03.4-2.96 1.03l-1.02.67 7.73 7.73.67-1.02A6.42 6.42 0 0010 18.96c1.7-.11 3.84-.54 5.61-1.52l1.12 2.25.98-.98a10.1 10.1 0 002.28-3.65 11.3 11.3 0 00.46-1.65 10.52 10.52 0 001.87-5.55c.12-1.8-.14-3.37-.34-4.12l-.17-.6-.62-.12c-3.1-.59-5.9-.52-8.18.55zm6.42 2.93L18 7.9 16.58 6.5 18 5.08l1.42 1.42z"
    }
  }]
};
var fishFilled = vue.defineComponent({
  name: "FishFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = vue.computed(() => props.size);
    var {
      className,
      style
    } = utils_useSizeProps['default'](propsSize);
    var finalCls = vue.computed(() => ["t-icon", "t-icon-fish-filled", className.value]);
    var finalStyle = vue.computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = vue.computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => utils_renderFn['default'](element, finalProps.value);
  }
});

exports.default = fishFilled;
//# sourceMappingURL=fish-filled.js.map
