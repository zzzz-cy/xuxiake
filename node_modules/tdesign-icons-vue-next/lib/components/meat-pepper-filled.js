'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-304d0f8c.js');
var vue = require('vue');
var utils_renderFn = require('../utils/render-fn.js');
var utils_useSizeProps = require('../utils/use-size-props.js');
require('../utils/use-common-classname.js');
require('../utils/config-context.js');

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M15.08 10.7c.35-1.1.58-2.18.66-3.17.1-1.16 0-2.28-.41-3.24a3.94 3.94 0 00-2.27-2.17 5.24 5.24 0 00-4.75.59c-1.38.85-2.6 2.2-3.6 3.7a21.16 21.16 0 00-2.42 4.74 13.32 13.32 0 00-.92 4.22c-.07 1.3.25 2.36.93 3.15.5.58 1.14.94 1.8 1.14.2.67.57 1.3 1.15 1.8.78.68 1.85 1.01 3.15.94 1.16 0 2.72-.36 4.32-.92 1.63-.58 3.4-1.4 4.96-2.39a12.26 12.26 0 003.82-3.54c.88-1.4 1.2-3.05.34-4.71a7.34 7.34 0 00-4.05-3.5 5.74 5.74 0 012.45-1.37l.97-.24-.48-1.94-.97.24c-1.23.3-2.3.94-3.12 1.64a7.82 7.82 0 01-1.57 5.03z"
    }
  }]
};
var meatPepperFilled = vue.defineComponent({
  name: "MeatPepperFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = vue.computed(() => props.size);
    var {
      className,
      style
    } = utils_useSizeProps['default'](propsSize);
    var finalCls = vue.computed(() => ["t-icon", "t-icon-meat-pepper-filled", className.value]);
    var finalStyle = vue.computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = vue.computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => utils_renderFn['default'](element, finalProps.value);
  }
});

exports.default = meatPepperFilled;
//# sourceMappingURL=meat-pepper-filled.js.map
