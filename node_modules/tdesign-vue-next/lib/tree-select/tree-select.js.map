{"version":3,"file":"tree-select.js","sources":["../../src/tree-select/tree-select.tsx"],"sourcesContent":["import { defineComponent, ref, computed, watch, onMounted, toRefs } from 'vue';\nimport isArray from 'lodash/isArray';\nimport isEmpty from 'lodash/isEmpty';\nimport isBoolean from 'lodash/isBoolean';\nimport isFunction from 'lodash/isFunction';\nimport isNil from 'lodash/isNil';\n\nimport Tree, { TreeProps, TreeNodeModel, TreeNodeValue } from '../tree';\nimport SelectInput, { TdSelectInputProps } from '../select-input';\nimport FakeArrow from '../common-components/fake-arrow';\nimport { PopupVisibleChangeContext } from '../popup';\n\nimport { INodeOptions } from './interface';\nimport { TreeSelectValue, TdTreeSelectProps, TreeSelectValueChangeTrigger } from './type';\nimport { TreeOptionData } from '../common';\nimport props from './props';\n\n// hooks\nimport { usePrefixClass, useConfig } from '../hooks/useConfig';\nimport { useDisabled } from '../hooks/useDisabled';\nimport { useReadonly } from '../hooks/useReadonly';\nimport { useTNodeJSX, useTNodeDefault } from '../hooks/tnode';\nimport useVModel from '../hooks/useVModel';\nimport useDefaultValue from '../hooks/useDefaultValue';\n\nexport default defineComponent({\n  name: 'TTreeSelect',\n  props,\n  setup(props: TdTreeSelectProps, { slots, expose }) {\n    const renderTNodeJSX = useTNodeJSX();\n    const renderDefaultTNode = useTNodeDefault();\n    const classPrefix = usePrefixClass();\n    const { globalConfig } = useConfig('treeSelect');\n    const formDisabled = useDisabled();\n    const isReadonly = useReadonly();\n\n    // ref\n    const treeRef = ref(null);\n\n    // data\n    const actived = ref([]);\n    const expanded = ref([]);\n    const nodeInfo = ref(null);\n    const treeKey = ref(0);\n\n    // model\n    const { value, modelValue, popupVisible, inputValue } = toRefs(props);\n    const [treeSelectValue, setTreeSelectValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n    const [innerVisible, setInnerVisible] = useDefaultValue(\n      popupVisible,\n      false,\n      props.onPopupVisibleChange,\n      'popupVisible',\n    );\n    const [innerInputValue, setInnerInputValue] = useDefaultValue(\n      inputValue,\n      props.defaultInputValue,\n      props.onInputChange,\n      'inputValue',\n    );\n\n    // watch\n    watch(treeSelectValue, async () => {\n      await changeNodeInfo();\n      if (!props.multiple) {\n        actived.value = nodeInfo.value ? [nodeInfo.value.value] : [];\n      }\n    });\n    watch(\n      () => props.data,\n      async () => {\n        await changeNodeInfo();\n        treeRerender();\n      },\n      {\n        deep: true,\n      },\n    );\n\n    // computed\n    /** filterByText keep pace with innerInputValue */\n    const filterByText = computed(() => {\n      const value = innerInputValue.value || '';\n      if (value === '') {\n        return null;\n      }\n      return (node: TreeNodeModel<TreeOptionData>) => {\n        if (isFunction(props.filter)) {\n          const filter: boolean | Promise<boolean> = props.filter(String(value), node);\n          if (isBoolean(filter)) {\n            return filter;\n          }\n        }\n        return node.data[realLabel.value].indexOf(value) >= 0;\n      };\n    });\n    const tDisabled = computed(() => {\n      return formDisabled.value || props.disabled;\n    });\n\n    const inputPlaceholder = computed(\n      () => (innerVisible.value && nodeInfo.value?.label) || props.placeholder || globalConfig.value.placeholder,\n    );\n\n    const popupClass = computed(() => {\n      return [`${classPrefix.value}-select__dropdown`, 'narrow-scrollbar'];\n    });\n\n    const dropdownInnerSize = computed(() => {\n      return {\n        small: 's',\n        medium: 'm',\n        large: 'l',\n      }[props.size];\n    });\n\n    const isObjectValue = computed(() => props.valueType === 'object');\n\n    const checked = computed((): Array<TreeNodeValue> => {\n      if (props.multiple) {\n        if (isObjectValue.value) {\n          return isArray(treeSelectValue.value)\n            ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => (item as INodeOptions).value)\n            : [];\n        }\n        return isArray(treeSelectValue.value)\n          ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => item as TreeNodeValue)\n          : [];\n      }\n      return [];\n    });\n\n    const multiLimitDisabled = computed(() => {\n      return (\n        props.multiple &&\n        !!props.max &&\n        isArray(treeSelectValue.value) &&\n        props.max <= (treeSelectValue.value as Array<TreeSelectValue>).length\n      );\n    });\n\n    const realLabel = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.label || 'label';\n      }\n      return props.keys?.label || 'label';\n    });\n\n    const realValue = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.value || 'value';\n      }\n      return props.keys?.value || 'value';\n    });\n\n    const realChildren = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.children || 'children';\n      }\n      return props.keys?.children || 'children';\n    });\n\n    onMounted(async () => {\n      if (!treeSelectValue.value && props.defaultValue) {\n        await change(props.defaultValue, null, 'uncheck');\n      }\n      if (isObjectValue.value) {\n        actived.value = isArray(treeSelectValue.value)\n          ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => (item as INodeOptions).value)\n          : [(treeSelectValue.value as INodeOptions).value];\n      } else {\n        (actived.value as TreeSelectValue) = isArray(treeSelectValue.value)\n          ? treeSelectValue.value\n          : [treeSelectValue.value];\n      }\n      changeNodeInfo();\n    });\n\n    const change = (\n      valueParam: TreeSelectValue,\n      node: TreeNodeModel<TreeOptionData>,\n      trigger: TreeSelectValueChangeTrigger,\n    ) => {\n      setTreeSelectValue(valueParam, { node, trigger });\n      changeNodeInfo();\n    };\n\n    const clear = (content: { e: MouseEvent }) => {\n      const defaultValue: TreeSelectValue = props.multiple ? [] : '';\n      actived.value = [];\n      change(defaultValue, null, 'clear');\n      props.onClear?.({ e: content.e });\n    };\n\n    const treeNodeChange = (\n      valueParam: Array<TreeNodeValue>,\n      context: { node: TreeNodeModel<TreeOptionData>; e?: MouseEvent },\n    ) => {\n      let current: TreeSelectValue = valueParam;\n      if (isObjectValue.value) {\n        current = valueParam.map(getNodeItem);\n      }\n      change(current, context.node, 'check');\n    };\n\n    const treeNodeActive = (\n      valueParam: Array<TreeNodeValue>,\n      context: { node: TreeNodeModel<TreeOptionData>; e?: MouseEvent },\n    ) => {\n      if (!props.multiple) {\n        setInnerVisible(false, context);\n      }\n      // 多选模式屏蔽 Active 事件\n      if (props.multiple) {\n        return;\n      }\n      // 单选模式重复选择不清空\n      if (treeSelectValue.value === context.node.data[realValue.value]) {\n        return;\n      }\n      let current: TreeSelectValue = valueParam;\n      if (isObjectValue.value) {\n        const nodeValue = isEmpty(valueParam) ? '' : valueParam[0];\n        current = getNodeItem(nodeValue);\n      } else {\n        current = isEmpty(valueParam) ? '' : valueParam[0];\n      }\n      change(current, context.node, 'check');\n      actived.value = valueParam;\n    };\n\n    const treeNodeExpand = (valueParam: Array<TreeNodeValue>) => {\n      expanded.value = valueParam;\n    };\n\n    const treeNodeLoad = () => {\n      changeNodeInfo();\n    };\n\n    const inputChange = (value: string): boolean => {\n      // 未打开状态不处理输入框输入\n      if (!innerVisible.value) {\n        props.onSearch?.(String(value));\n        return;\n      }\n      setInnerInputValue(value);\n      props.onSearch?.(String(value));\n    };\n\n    const tagChange: TdSelectInputProps['onTagChange'] = (value, context) => {\n      const { trigger, index } = context;\n      if (['tag-remove', 'backspace'].includes(trigger)) {\n        isArray(treeSelectValue.value) && (treeSelectValue.value as Array<TreeSelectValue>).splice(index, 1);\n      }\n      props.onRemove?.({ value, data: null, e: context && (context.e as MouseEvent) });\n      change(treeSelectValue.value, null, trigger as 'tag-remove' | 'backspace');\n    };\n\n    const handlePopupVisibleChange = (visible: boolean, context: PopupVisibleChangeContext) => {\n      setInnerVisible(visible, context);\n      // 在通过点击选择器打开弹窗时 清空此前的输入内容 避免在关闭时就清空引起的闪烁问题\n      if (visible && context.trigger === 'trigger-element-click') setInnerInputValue('');\n    };\n    const changeNodeInfo = async () => {\n      await treeSelectValue.value;\n\n      if (!props.multiple) {\n        if (treeSelectValue.value || treeSelectValue.value === 0) {\n          nodeInfo.value = getSingleNodeInfo();\n        } else {\n          nodeInfo.value = '';\n        }\n      } else if (props.multiple) {\n        if (isArray(treeSelectValue.value)) {\n          nodeInfo.value = getMultipleNodeInfo();\n        } else {\n          nodeInfo.value = [];\n        }\n      } else {\n        nodeInfo.value = null;\n      }\n    };\n\n    const getSingleNodeInfo = () => {\n      const nodeValue = isObjectValue.value ? (treeSelectValue.value as INodeOptions).value : treeSelectValue.value;\n      return getNodeItem(nodeValue);\n    };\n\n    const getMultipleNodeInfo = () => {\n      return (treeSelectValue.value as Array<TreeSelectValue>).map((value) => {\n        const nodeValue = isObjectValue.value ? (value as INodeOptions).value : value;\n        return getNodeItem(nodeValue);\n      });\n    };\n\n    const getNodeItem = (targetValue: TreeSelectValue) => {\n      if (treeRef.value) {\n        const node = treeRef.value.getItem(targetValue);\n        if (node) {\n          return {\n            ...node.data,\n            label: node.data[realLabel.value],\n            value: node.data[realValue.value],\n          };\n        }\n      }\n      const node = getTreeNode(props.data, targetValue);\n      if (node) {\n        return node;\n      }\n      return {\n        label: targetValue,\n        value: targetValue,\n      };\n    };\n\n    const getTreeNode = (data: Array<TreeOptionData>, targetValue: TreeSelectValue): TreeSelectValue | null => {\n      for (let i = 0, len = data.length; i < len; i++) {\n        const item = data[i];\n        if (item[realValue.value] === targetValue) {\n          return {\n            ...item,\n            label: item[realLabel.value],\n            value: item[realValue.value],\n          };\n        }\n        if (item?.[realChildren.value]) {\n          const result = getTreeNode(item?.[realChildren.value], targetValue);\n          if (!isNil(result)) {\n            return result;\n          }\n        }\n      }\n      return null;\n    };\n\n    const treeRerender = () => {\n      treeKey.value += 1;\n    };\n\n    const renderTree = () => (\n      <Tree\n        ref={treeRef}\n        v-show={!props.loading}\n        key={treeKey.value}\n        value={[...checked.value]}\n        hover\n        keys={props.keys}\n        data={props.data}\n        activable={!props.multiple}\n        checkable={props.multiple}\n        disabled={tDisabled.value || multiLimitDisabled.value}\n        size={props.size}\n        filter={filterByText.value}\n        icon={!filterByText.value}\n        actived={actived.value}\n        expanded={expanded.value}\n        activeMultiple={props.multiple}\n        onChange={treeNodeChange}\n        onActive={treeNodeActive}\n        onExpand={treeNodeExpand}\n        onLoad={treeNodeLoad}\n        expandOnClickNode={false}\n        v-slots={{\n          empty: () =>\n            renderDefaultTNode('empty', {\n              defaultNode: <div class={`${classPrefix.value}-select__empty`}>{globalConfig.value.empty}</div>,\n            }),\n        }}\n        {...(props.treeProps as TdTreeSelectProps['treeProps'])}\n      />\n    );\n\n    const renderSuffixIcon = () => (\n      <FakeArrow\n        isActive={innerVisible.value}\n        disabled={props.disabled}\n        overlayClassName={{\n          [`${classPrefix.value}-fake-arrow--highlight`]: innerVisible.value,\n          [`${classPrefix.value}-fake-arrow--disable`]: props.disabled,\n        }}\n      />\n    );\n\n    expose({\n      treeRef,\n    });\n\n    return () => (\n      <SelectInput\n        class={`${classPrefix.value}-tree-select`}\n        value={nodeInfo.value}\n        inputValue={innerVisible.value ? innerInputValue.value : ''}\n        popupVisible={innerVisible.value}\n        disabled={tDisabled.value}\n        multiple={props.multiple}\n        loading={props.loading}\n        clearable={props.clearable}\n        autoWidth={props.autoWidth}\n        borderless={props.borderless}\n        readonly={isReadonly.value}\n        placeholder={inputPlaceholder.value}\n        allowInput={props.filterable || isFunction(props.filter)}\n        minCollapsedNum={props.minCollapsedNum}\n        collapsed-items={props.collapsedItems}\n        popupProps={{\n          overlayClassName: popupClass.value,\n          ...(props.popupProps as TdTreeSelectProps['popupProps']),\n        }}\n        inputProps={{\n          size: props.size,\n          ...(props.inputProps as TdTreeSelectProps['inputProps']),\n        }}\n        tagInputProps={{\n          size: props.size,\n        }}\n        tagProps={{\n          maxWidth: 300,\n          ...(props.tagProps as TdTreeSelectProps['tagProps']),\n        }}\n        label={() => renderTNodeJSX('prefixIcon')}\n        suffix={props.suffix}\n        suffixIcon={() => {\n          if (props.suffixIcon || slots.suffixIcon) {\n            return renderTNodeJSX('suffixIcon');\n          }\n\n          return renderSuffixIcon();\n        }}\n        onClear={clear}\n        onBlur={(_: any, context) => {\n          props.onBlur?.({ value: treeSelectValue.value, e: context.e as FocusEvent });\n        }}\n        onFocus={(_: any, context: { e: FocusEvent }) => {\n          props.onFocus?.({ value: treeSelectValue.value, e: context.e });\n        }}\n        valueDisplay={() =>\n          renderTNodeJSX('valueDisplay', {\n            params: props.multiple\n              ? {\n                  value: nodeInfo.value,\n                  onClose: (index: number) => {\n                    const value = nodeInfo.value.map((node: TreeOptionData) => node.value);\n                    tagChange(value, {\n                      trigger: 'tag-remove',\n                      index,\n                      item: value[index],\n                    });\n                  },\n                }\n              : {\n                  value: nodeInfo.value || { [realLabel.value]: '', [realValue.value]: undefined },\n                },\n          })\n        }\n        v-slots={{\n          suffix: slots.suffix,\n          panel: () => (\n            <div\n              class={[\n                `${classPrefix.value}-select__dropdown-inner`,\n                `${classPrefix.value}-select__dropdown-inner--size-${dropdownInnerSize.value}`,\n              ]}\n            >\n              {renderTNodeJSX('panelTopContent')}\n              <p\n                v-show={props.loading && !tDisabled.value}\n                class={[`${classPrefix.value}-select-loading-tips`, `${classPrefix.value}-select__right-icon-polyfill`]}\n              >\n                {renderDefaultTNode('loadingText', {\n                  defaultNode: <div class={`${classPrefix.value}-select__empty`}>{globalConfig.value.loadingText}</div>,\n                })}\n              </p>\n              {renderTree()}\n              {renderTNodeJSX('panelBottomContent')}\n            </div>\n          ),\n          collapsedItems: slots.collapsedItems,\n        }}\n        onInputChange={inputChange}\n        onTagChange={tagChange}\n        onPopupVisibleChange={handlePopupVisibleChange}\n        {...(props.selectInputProps as TdTreeSelectProps['selectInputProps'])}\n      />\n    );\n  },\n});\n"],"names":["defineComponent","name","props","setup","slots","_ref","expose","renderTNodeJSX","useTNodeJSX","renderDefaultTNode","useTNodeDefault","classPrefix","usePrefixClass","_useConfig","useConfig","globalConfig","formDisabled","useDisabled","isReadonly","useReadonly","treeRef","ref","actived","expanded","nodeInfo","treeKey","_toRefs","toRefs","value","modelValue","popupVisible","inputValue","_useVModel","useVModel","defaultValue","onChange","_useVModel2","_slicedToArray","treeSelectValue","setTreeSelectValue","_useDefaultValue","useDefaultValue","onPopupVisibleChange","_useDefaultValue2","innerVisible","setInnerVisible","_useDefaultValue3","defaultInputValue","onInputChange","_useDefaultValue4","innerInputValue","setInnerInputValue","watch","_callee","_regeneratorRuntime","wrap","_callee$","_context","prev","next","changeNodeInfo","multiple","stop","data","_asyncToGenerator","mark","_callee2","_callee2$","_context2","treeRerender","deep","filterByText","computed","node","isFunction","filter","String","isBoolean","realLabel","indexOf","tDisabled","disabled","inputPlaceholder","_nodeInfo$value","label","placeholder","popupClass","concat","dropdownInnerSize","small","medium","large","size","isObjectValue","valueType","checked","isArray","map","item","multiLimitDisabled","max","length","_props2$keys","isEmpty","treeProps","keys","realValue","_props2$keys2","realChildren","_props2$keys3","children","onMounted","_callee3","_callee3$","_context3","change","valueParam","trigger","clear","content","_props2$onClear","onClear","e","treeNodeChange","context","current","getNodeItem","treeNodeActive","nodeValue","treeNodeExpand","treeNodeLoad","inputChange","_props2$onSearch2","_props2$onSearch","onSearch","tagChange","_props2$onRemove","index","includes","splice","onRemove","handlePopupVisibleChange","visible","_callee4","_callee4$","_context4","getSingleNodeInfo","getMultipleNodeInfo","targetValue","getItem","_objectSpread","getTreeNode","i","len","result","isNil","renderTree","_withDirectives","_createVNode","Tree","_mergeProps","empty","defaultNode","_vShow","loading","renderSuffixIcon","FakeArrow","_defineProperty","SelectInput","clearable","autoWidth","borderless","filterable","minCollapsedNum","collapsedItems","overlayClassName","popupProps","inputProps","maxWidth","tagProps","suffix","suffixIcon","onBlur","_","_props2$onBlur","onFocus","_props2$onFocus","valueDisplay","params","onClose","selectInputProps","panel","loadingText"],"mappings":"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"}