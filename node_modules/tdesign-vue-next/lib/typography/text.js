/**
 * tdesign v1.10.5
 * (c) 2024 tdesign
 * @license MIT
 */

import _typeof from '@babel/runtime/helpers/typeof';
import { defineComponent, ref, computed, createVNode, mergeProps, isVNode } from 'vue';
import { usePrefixClass } from '../hooks/useConfig.js';
import props from './text-props.js';
import copy from './utils/copy-to-clipboard/index.js';
import { CheckIcon, CopyIcon } from 'tdesign-icons-vue-next';
import Ellipsis from './ellipsis.js';
import { Tooltip } from '../tooltip/index.js';
import { Button } from '../button/index.js';
import { useConfig } from '../config-provider/useConfig.js';
import { useContent } from '../hooks/tnode.js';
import '@babel/runtime/helpers/defineProperty';
import './paragraph-props.js';
import '../tooltip/tooltip.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/isFunction';
import 'lodash/omit';
import '../tooltip/props.js';
import '../popup/props.js';
import '../popup/index.js';
import '../popup/popup.js';
import '@popperjs/core';
import 'lodash/isObject';
import 'lodash/debounce';
import 'lodash/isString';
import '../hooks/useVModel.js';
import 'lodash/kebabCase';
import '../utils/dom.js';
import '../_chunks/dep-50e7f60c.js';
import 'lodash/isArray';
import '../utils/easing.js';
import '../_common/js/utils/set-style.js';
import '../popup/container.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../hooks/useResizeObserver.js';
import '../utils/withInstall.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_chunks/dep-b80c4eb1.js';
import 'dayjs';
import 'lodash/camelCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import '../tooltip/util.js';
import '../button/button.js';
import '../loading/index.js';
import '../loading/directive.js';
import 'lodash/mapKeys';
import 'lodash/isEqual';
import '../loading/plugin.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import '../loading/props.js';
import '../hooks/useTeleport.js';
import '../button/props.js';
import '../hooks/useRipple.js';
import '../hooks/useKeepAnimation.js';
import '../utils/set-style.js';
import '../hooks/useDisabled.js';
import 'lodash/isBoolean';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var _Text = defineComponent({
  name: "TTypographyText",
  props: props,
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var COMPONENT_NAME = usePrefixClass("typography");
    var _useConfig = useConfig("typography"),
      globalConfig = _useConfig.globalConfig;
    var isCopied = ref(false);
    var renderContent = useContent();
    var wrapperDecorations = function wrapperDecorations(_ref2, content2) {
      var code = _ref2.code,
        underline = _ref2.underline,
        del = _ref2["delete"],
        strong = _ref2.strong,
        keyboard = _ref2.keyboard,
        mark = _ref2.mark,
        italic = _ref2.italic;
      var currentContent = content2;
      function wrap(needed, Tag) {
        var styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        if (!needed) return;
        var _currentContent = function () {
          return currentContent;
        }();
        currentContent = createVNode(Tag, {
          "style": styles
        }, _isSlot(currentContent) ? currentContent : {
          "default": function _default() {
            return [_currentContent];
          }
        });
      }
      wrap(strong, "strong");
      wrap(underline, "u");
      wrap(del, "del");
      wrap(code, "code");
      wrap(mark !== false, "mark", mark ? {
        color: mark
      } : {});
      wrap(keyboard, "kbd");
      wrap(italic, "i");
      return currentContent;
    };
    var classList = computed(function () {
      var theme = props2.theme,
        disabled = props2.disabled;
      var prefix = COMPONENT_NAME.value;
      var list = [prefix];
      if (disabled) {
        list.push("".concat(prefix, "--disabled"));
      } else if (theme && ["primary", "secondary", "success", "warning", "error"].includes(theme)) {
        list.push("".concat(prefix, "--").concat(theme));
      }
      return list;
    });
    var tooltipText = computed(function () {
      var _copyable$tooltipProp;
      var copyable = props2.copyable;
      if (isCopied.value) return globalConfig.value.copiedText;else if (_typeof(copyable) === "object") return (_copyable$tooltipProp = copyable.tooltipProps) === null || _copyable$tooltipProp === void 0 ? void 0 : _copyable$tooltipProp.content;
      return null;
    });
    var content = computed(function () {
      return props2.content || (slots === null || slots === void 0 ? void 0 : slots["default"]());
    });
    var renderCopy = function renderCopy() {
      var copyable = props2.copyable;
      if (!copyable) return;
      var icon = isCopied.value ? function () {
        return createVNode(CheckIcon, null, null);
      } : function () {
        return createVNode(CopyIcon, null, null);
      };
      var tooltipConf = {
        theme: "default"
      };
      var onCopy = function onCopy() {};
      if (_typeof(copyable) === "object") {
        if (copyable.suffix && !isCopied.value) {
          icon = copyable.suffix;
        }
        if (copyable.tooltipProps) {
          tooltipConf = copyable.tooltipProps;
        }
        if (typeof copyable.onCopy === "function") {
          onCopy = copyable.onCopy;
        }
      }
      return createVNode(Tooltip, mergeProps(tooltipConf, {
        "content": tooltipText.value
      }), {
        "default": function _default() {
          return [createVNode(Button, {
            "icon": icon,
            "shape": "square",
            "theme": "primary",
            "variant": "text",
            "onClick": function onClick(e) {
              return onCopyClick(e, onCopy);
            }
          }, null)];
        }
      });
    };
    var getChildrenText = function getChildrenText() {
      if (typeof content.value === "string") {
        return content.value;
      } else if (Array.isArray(content.value)) {
        return content.value.map(function (v) {
          return v.children;
        }).join("");
      }
    };
    var onCopyClick = function onCopyClick(e, cb) {
      e.preventDefault();
      e.stopPropagation();
      isCopied.value = true;
      setTimeout(function () {
        isCopied.value = false;
      }, 1500);
      copy(getChildrenText());
      cb === null || cb === void 0 || cb();
    };
    return function () {
      var content2 = renderContent("default", "content");
      return props2.ellipsis ? createVNode(Ellipsis, mergeProps(props2, {
        "class": classList.value
      }), {
        "default": function _default() {
          return [wrapperDecorations(props2, content2), props2.copyable ? renderCopy() : null];
        }
      }) : createVNode("span", {
        "class": classList.value
      }, [wrapperDecorations(props2, content2), props2.copyable ? renderCopy() : null]);
    };
  }
});

export { _Text as default };
//# sourceMappingURL=text.js.map
