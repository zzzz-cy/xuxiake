export * from './type';
import './style';
export declare const Typography: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{}>>, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{}>>, {}, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{}>>, () => JSX.Element, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{}>>, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const Text: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        code: BooleanConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        copyable: {
            type: import("vue").PropType<boolean | import("./type").TypographyCopyable>;
            default: boolean | import("./type").TypographyCopyable;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        delete: BooleanConstructor;
        disabled: BooleanConstructor;
        ellipsis: {
            type: import("vue").PropType<boolean | import("./type").TypographyEllipsis>;
            default: boolean | import("./type").TypographyEllipsis;
        };
        italic: BooleanConstructor;
        keyboard: BooleanConstructor;
        mark: {
            type: import("vue").PropType<string | boolean>;
            default: string | boolean;
        };
        strong: BooleanConstructor;
        theme: {
            type: import("vue").PropType<"error" | "success" | "primary" | "warning" | "secondary">;
            validator(val: "error" | "success" | "primary" | "warning" | "secondary"): boolean;
        };
        underline: BooleanConstructor;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        code: BooleanConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        copyable: {
            type: import("vue").PropType<boolean | import("./type").TypographyCopyable>;
            default: boolean | import("./type").TypographyCopyable;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        delete: BooleanConstructor;
        disabled: BooleanConstructor;
        ellipsis: {
            type: import("vue").PropType<boolean | import("./type").TypographyEllipsis>;
            default: boolean | import("./type").TypographyEllipsis;
        };
        italic: BooleanConstructor;
        keyboard: BooleanConstructor;
        mark: {
            type: import("vue").PropType<string | boolean>;
            default: string | boolean;
        };
        strong: BooleanConstructor;
        theme: {
            type: import("vue").PropType<"error" | "success" | "primary" | "warning" | "secondary">;
            validator(val: "error" | "success" | "primary" | "warning" | "secondary"): boolean;
        };
        underline: BooleanConstructor;
    }>>, {
        code: boolean;
        mark: string | boolean;
        strong: boolean;
        disabled: boolean;
        delete: boolean;
        ellipsis: boolean | import("./type").TypographyEllipsis;
        italic: boolean;
        underline: boolean;
        copyable: boolean | import("./type").TypographyCopyable;
        keyboard: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        code: BooleanConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        copyable: {
            type: import("vue").PropType<boolean | import("./type").TypographyCopyable>;
            default: boolean | import("./type").TypographyCopyable;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        delete: BooleanConstructor;
        disabled: BooleanConstructor;
        ellipsis: {
            type: import("vue").PropType<boolean | import("./type").TypographyEllipsis>;
            default: boolean | import("./type").TypographyEllipsis;
        };
        italic: BooleanConstructor;
        keyboard: BooleanConstructor;
        mark: {
            type: import("vue").PropType<string | boolean>;
            default: string | boolean;
        };
        strong: BooleanConstructor;
        theme: {
            type: import("vue").PropType<"error" | "success" | "primary" | "warning" | "secondary">;
            validator(val: "error" | "success" | "primary" | "warning" | "secondary"): boolean;
        };
        underline: BooleanConstructor;
    }>>, () => JSX.Element, {}, {}, {}, {
        code: boolean;
        mark: string | boolean;
        strong: boolean;
        disabled: boolean;
        delete: boolean;
        ellipsis: boolean | import("./type").TypographyEllipsis;
        italic: boolean;
        underline: boolean;
        copyable: boolean | import("./type").TypographyCopyable;
        keyboard: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    code: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    copyable: {
        type: import("vue").PropType<boolean | import("./type").TypographyCopyable>;
        default: boolean | import("./type").TypographyCopyable;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    delete: BooleanConstructor;
    disabled: BooleanConstructor;
    ellipsis: {
        type: import("vue").PropType<boolean | import("./type").TypographyEllipsis>;
        default: boolean | import("./type").TypographyEllipsis;
    };
    italic: BooleanConstructor;
    keyboard: BooleanConstructor;
    mark: {
        type: import("vue").PropType<string | boolean>;
        default: string | boolean;
    };
    strong: BooleanConstructor;
    theme: {
        type: import("vue").PropType<"error" | "success" | "primary" | "warning" | "secondary">;
        validator(val: "error" | "success" | "primary" | "warning" | "secondary"): boolean;
    };
    underline: BooleanConstructor;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    code: boolean;
    mark: string | boolean;
    strong: boolean;
    disabled: boolean;
    delete: boolean;
    ellipsis: boolean | import("./type").TypographyEllipsis;
    italic: boolean;
    underline: boolean;
    copyable: boolean | import("./type").TypographyCopyable;
    keyboard: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const Title: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        ellipsis: {
            type: import("vue").PropType<boolean | import("./type").TypographyEllipsis>;
            default: boolean | import("./type").TypographyEllipsis;
        };
        level: {
            type: import("vue").PropType<"h1" | "h2" | "h3" | "h4" | "h5" | "h6">;
            default: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
            validator(val: "h1" | "h2" | "h3" | "h4" | "h5" | "h6"): boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        ellipsis: {
            type: import("vue").PropType<boolean | import("./type").TypographyEllipsis>;
            default: boolean | import("./type").TypographyEllipsis;
        };
        level: {
            type: import("vue").PropType<"h1" | "h2" | "h3" | "h4" | "h5" | "h6">;
            default: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
            validator(val: "h1" | "h2" | "h3" | "h4" | "h5" | "h6"): boolean;
        };
    }>>, {
        ellipsis: boolean | import("./type").TypographyEllipsis;
        level: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        ellipsis: {
            type: import("vue").PropType<boolean | import("./type").TypographyEllipsis>;
            default: boolean | import("./type").TypographyEllipsis;
        };
        level: {
            type: import("vue").PropType<"h1" | "h2" | "h3" | "h4" | "h5" | "h6">;
            default: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
            validator(val: "h1" | "h2" | "h3" | "h4" | "h5" | "h6"): boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        ellipsis: boolean | import("./type").TypographyEllipsis;
        level: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    ellipsis: {
        type: import("vue").PropType<boolean | import("./type").TypographyEllipsis>;
        default: boolean | import("./type").TypographyEllipsis;
    };
    level: {
        type: import("vue").PropType<"h1" | "h2" | "h3" | "h4" | "h5" | "h6">;
        default: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
        validator(val: "h1" | "h2" | "h3" | "h4" | "h5" | "h6"): boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    ellipsis: boolean | import("./type").TypographyEllipsis;
    level: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const Paragraph: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        ellipsis: {
            type: import("vue").PropType<boolean | import("./type").TypographyEllipsis>;
            default: boolean | import("./type").TypographyEllipsis;
        };
        style: {
            type: import("vue").PropType<Record<string, string | number>>;
            default: () => {};
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        ellipsis: {
            type: import("vue").PropType<boolean | import("./type").TypographyEllipsis>;
            default: boolean | import("./type").TypographyEllipsis;
        };
        style: {
            type: import("vue").PropType<Record<string, string | number>>;
            default: () => {};
        };
    }>>, {
        style: Record<string, string | number>;
        ellipsis: boolean | import("./type").TypographyEllipsis;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        ellipsis: {
            type: import("vue").PropType<boolean | import("./type").TypographyEllipsis>;
            default: boolean | import("./type").TypographyEllipsis;
        };
        style: {
            type: import("vue").PropType<Record<string, string | number>>;
            default: () => {};
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        style: Record<string, string | number>;
        ellipsis: boolean | import("./type").TypographyEllipsis;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    ellipsis: {
        type: import("vue").PropType<boolean | import("./type").TypographyEllipsis>;
        default: boolean | import("./type").TypographyEllipsis;
    };
    style: {
        type: import("vue").PropType<Record<string, string | number>>;
        default: () => {};
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    style: Record<string, string | number>;
    ellipsis: boolean | import("./type").TypographyEllipsis;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Typography;
