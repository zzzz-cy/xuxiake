import type { TextareaValue } from './type';
declare const _default: import("vue").DefineComponent<{
    allowInputOverMax: BooleanConstructor;
    autofocus: BooleanConstructor;
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: boolean | {
            minRows?: number;
            maxRows?: number;
        };
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: import("vue").PropType<string | number>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<TextareaValue>;
        default: TextareaValue;
    };
    modelValue: {
        type: import("vue").PropType<TextareaValue>;
        default: TextareaValue;
    };
    defaultValue: {
        type: import("vue").PropType<TextareaValue>;
    };
    onBlur: import("vue").PropType<(value: TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: TextareaValue, context?: {
        e?: InputEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onValidate: import("vue").PropType<(context: {
        error?: "exceed-maximum" | "below-minimum";
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowInputOverMax: BooleanConstructor;
    autofocus: BooleanConstructor;
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: boolean | {
            minRows?: number;
            maxRows?: number;
        };
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: import("vue").PropType<string | number>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<TextareaValue>;
        default: TextareaValue;
    };
    modelValue: {
        type: import("vue").PropType<TextareaValue>;
        default: TextareaValue;
    };
    defaultValue: {
        type: import("vue").PropType<TextareaValue>;
    };
    onBlur: import("vue").PropType<(value: TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: TextareaValue, context?: {
        e?: InputEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onValidate: import("vue").PropType<(context: {
        error?: "exceed-maximum" | "below-minimum";
    }) => void>;
}>>, {
    name: string;
    value: TextareaValue;
    autofocus: boolean;
    disabled: boolean;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    autosize: boolean | {
        minRows?: number;
        maxRows?: number;
    };
    modelValue: TextareaValue;
    allowInputOverMax: boolean;
}, {}>;
export default _default;
