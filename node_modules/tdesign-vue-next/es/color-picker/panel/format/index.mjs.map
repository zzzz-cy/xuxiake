{"version":3,"file":"index.mjs","sources":["../../../../node_modules/lodash/upperCase.js","../../../../src/color-picker/panel/format/index.tsx"],"sourcesContent":["var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string`, as space separated words, to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the upper cased string.\n * @example\n *\n * _.upperCase('--foo-bar');\n * // => 'FOO BAR'\n *\n * _.upperCase('fooBar');\n * // => 'FOO BAR'\n *\n * _.upperCase('__foo_bar__');\n * // => 'FOO BAR'\n */\nvar upperCase = createCompounder(function(result, word, index) {\n  return result + (index ? ' ' : '') + word.toUpperCase();\n});\n\nmodule.exports = upperCase;\n","import { defineComponent, PropType, ref, watch } from 'vue';\nimport upperCase from 'lodash/upperCase';\nimport { TdColorPickerProps } from '../../type';\nimport props from '../../props';\nimport { FORMATS } from '../../../_common/js/color-picker/constants';\nimport { Color } from '../../utils';\nimport { Select as TSelect, Option as TOption } from '../../../select';\nimport FormatInputs from './inputs';\nimport { useBaseClassName } from '../../hooks';\nimport type { TdSelectInputProps } from '../../../select-input/type';\n\nexport default defineComponent({\n  name: 'FormatPanel',\n  inheritAttrs: false,\n  props: {\n    ...props,\n    color: {\n      type: Object as PropType<Color>,\n    },\n    onModeChange: {\n      type: Function,\n      default: () => {\n        return () => {};\n      },\n    },\n    onInputChange: {\n      type: Function,\n      default: () => {\n        return () => {};\n      },\n    },\n  },\n  setup(props) {\n    const baseClassName = useBaseClassName();\n    const formatModel = ref<TdColorPickerProps['format']>(props.format);\n    watch(\n      () => [props.format],\n      () => (formatModel.value = props.format),\n    );\n\n    /**\n     * 格式化类型改变触发\n     * @param v\n     */\n    const handleModeChange = (v: TdColorPickerProps['format']) => {\n      formatModel.value = v;\n      props.onModeChange(v);\n    };\n\n    return {\n      formatModel,\n      baseClassName,\n      handleModeChange,\n    };\n  },\n  render() {\n    const { baseClassName, handleModeChange } = this;\n    const newProps = {\n      ...this.$props,\n      format: this.formatModel,\n    };\n    const selectInputProps = {\n      ...((this.selectInputProps as Object) || {}),\n    };\n    return (\n      <div class={`${baseClassName}__format`}>\n        <div class={`${baseClassName}__format--item`}>\n          <TSelect\n            size=\"small\"\n            class={`${baseClassName}__format-mode-select`}\n            selectInputProps={{ ...selectInputProps }}\n            popupProps={{\n              overlayClassName: `${baseClassName}__select-options`,\n              ...(selectInputProps as TdSelectInputProps).popupProps,\n            }}\n            v-model={this.formatModel}\n            onChange={handleModeChange}\n          >\n            {FORMATS.map((item) => (\n              <TOption key={item} value={item} label={upperCase(item)} style={{ fontSize: '12px' }} />\n            ))}\n          </TSelect>\n        </div>\n        <div class={`${baseClassName}__format--item`}>\n          <FormatInputs {...newProps} />\n        </div>\n      </div>\n    );\n  },\n});\n"],"names":["createCompounder","require$$0","upperCase","result","word","index","toUpperCase","upperCase_1","_isSlot","s","Object","prototype","toString","call","_isVNode","defineComponent","name","inheritAttrs","props","_objectSpread","color","type","onModeChange","Function","default","onInputChange","setup","baseClassName","useBaseClassName","formatModel","ref","format","watch","value","handleModeChange","v","render","_this","_slot","newProps","$props","selectInputProps","_createVNode","concat","TSelect","overlayClassName","popupProps","onUpdateModelValue","$event","FORMATS","map","item","TOption","fontSize","_default"],"mappings":"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"}