/**
 * tdesign v1.10.5
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-fa52aa21.mjs';
import { positiveAdd, positiveSubtract } from '../_common/js/input-number/number.mjs';
import { ref, watch } from 'vue';
import { t as throttle_1 } from '../_chunks/dep-525a54df.mjs';
import '../_chunks/dep-4659d73b.mjs';
import '../_chunks/dep-58a62202.mjs';
import '../_chunks/dep-eca422c3.mjs';
import '../_chunks/dep-03a7fb6c.mjs';
import '../_chunks/dep-bf7257e7.mjs';
import '../_chunks/dep-eae2a67e.mjs';
import '../_chunks/dep-626c497d.mjs';
import '../_chunks/dep-29ef8419.mjs';
import '../_chunks/dep-889e457b.mjs';
import '../_common/js/input-number/large-number.mjs';
import '../_chunks/dep-5efe53d1.mjs';
import '../_chunks/dep-593f2b67.mjs';
import '../_chunks/dep-2b09875b.mjs';
import '../_common/js/log/log.mjs';
import '../_common/js/log/index.mjs';
import '../_chunks/dep-5993931e.mjs';
import '../_chunks/dep-cda4f568.mjs';
import '../_chunks/dep-8dfc9324.mjs';
import '../_chunks/dep-ab4bb9b8.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useDrag(initTransform) {
  var transform = ref(initTransform);
  var mouseDownHandler = function mouseDownHandler(e) {
    var startX = e.pageX,
      startY = e.pageY;
    var _transform$value = transform.value,
      translateX = _transform$value.translateX,
      translateY = _transform$value.translateY;
    var mouseMoveHandler = function mouseMoveHandler(e2) {
      var pageX = e2.pageX,
        pageY = e2.pageY;
      transform.value = {
        translateX: translateX + pageX - startX,
        translateY: translateY + pageY - startY
      };
    };
    var _mouseUpHandler = function mouseUpHandler() {
      document.removeEventListener("mousemove", mouseMoveHandler);
      document.removeEventListener("mouseup", _mouseUpHandler);
    };
    document.addEventListener("mousemove", mouseMoveHandler);
    document.addEventListener("mouseup", _mouseUpHandler);
  };
  var resetTransform = function resetTransform() {
    transform.value = _objectSpread({}, initTransform);
  };
  return {
    transform: transform,
    mouseDownHandler: mouseDownHandler,
    resetTransform: resetTransform
  };
}
function useMirror() {
  var mirror = ref(1);
  var onMirror = function onMirror() {
    mirror.value *= -1;
  };
  var resetMirror = function resetMirror() {
    mirror.value = 1;
  };
  return {
    mirror: mirror,
    onMirror: onMirror,
    resetMirror: resetMirror
  };
}
function useScale() {
  var imageScale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    max: 2,
    min: 0.5,
    step: 0.2
  };
  var max = imageScale.max,
    min = imageScale.min,
    step = imageScale.step,
    defaultScale = imageScale.defaultScale;
  var scale = ref(defaultScale !== null && defaultScale !== void 0 ? defaultScale : 1);
  var onZoomIn = throttle_1(function () {
    var result = positiveAdd(scale.value, step);
    setScale(result);
  }, 50);
  var onZoomOut = throttle_1(function () {
    var result = positiveSubtract(scale.value, step);
    setScale(result);
  }, 50);
  var resetScale = function resetScale() {
    scale.value = defaultScale !== null && defaultScale !== void 0 ? defaultScale : 1;
  };
  var setScale = function setScale(newScale) {
    var value = newScale;
    if (newScale < min) {
      value = min;
    }
    if (newScale > max) {
      value = max;
    }
    scale.value = value;
  };
  watch(function () {
    return imageScale;
  }, function () {
    return resetScale();
  });
  return {
    scale: scale,
    onZoomIn: onZoomIn,
    onZoomOut: onZoomOut,
    resetScale: resetScale
  };
}
function useRotate() {
  var rotate = ref(0);
  var ROTATE_DEG = 90;
  var onRotate = function onRotate() {
    rotate.value += ROTATE_DEG;
  };
  var resetRotate = function resetRotate() {
    rotate.value = 0;
  };
  return {
    rotate: rotate,
    onRotate: onRotate,
    resetRotate: resetRotate
  };
}

export { useDrag, useMirror, useRotate, useScale };
//# sourceMappingURL=hooks.mjs.map
