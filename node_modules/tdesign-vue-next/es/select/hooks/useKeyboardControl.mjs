/**
 * tdesign v1.10.5
 * (c) 2024 tdesign
 * @license MIT
 */

import { ref, watch } from 'vue';
import { usePrefixClass } from '../../hooks/useConfig.mjs';
import { getNewMultipleValue } from '../helper.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-06dcbf4c.mjs';
import '../../_chunks/dep-eca422c3.mjs';
import '../../_chunks/dep-bf7257e7.mjs';
import '../../_chunks/dep-4659d73b.mjs';
import '../../_chunks/dep-2b09875b.mjs';
import '../../_chunks/dep-cda4f568.mjs';
import '../../_chunks/dep-bb899bfd.mjs';
import '../../_chunks/dep-5922c8f3.mjs';
import '../../_chunks/dep-92f86d1d.mjs';
import '../../_chunks/dep-6ab5363f.mjs';
import '../../_chunks/dep-6dc3d0e1.mjs';
import '../../_chunks/dep-76958824.mjs';
import '../../_chunks/dep-e9841b9e.mjs';
import '../../_chunks/dep-1a4bb2f2.mjs';
import '../../_chunks/dep-cc8ebcde.mjs';
import '../../_chunks/dep-29ef8419.mjs';
import '../../_chunks/dep-f5579c03.mjs';
import '../../_chunks/dep-49aeee3c.mjs';
import '../../_chunks/dep-b5bf85f5.mjs';
import '../../_chunks/dep-3c65fae8.mjs';
import '../../_chunks/dep-eae2a67e.mjs';
import '../../_chunks/dep-626c497d.mjs';
import '../../_chunks/dep-ec0bbd9f.mjs';
import '../../_chunks/dep-1b78414a.mjs';
import '../../_chunks/dep-d84f19b3.mjs';
import '../../_chunks/dep-732f0b7d.mjs';
import '../../_chunks/dep-03a7fb6c.mjs';
import '../../_chunks/dep-1b9718a2.mjs';
import '../../_chunks/dep-e065dc25.mjs';
import '../../_chunks/dep-400ec705.mjs';
import '../../_chunks/dep-02f9394e.mjs';
import '../../_chunks/dep-1725b1c7.mjs';
import '../../_chunks/dep-532409c5.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../_chunks/dep-9ed7da3e.mjs';
import '../../_chunks/dep-7f65fc46.mjs';
import '../../_chunks/dep-4f2cabb0.mjs';
import '../../config-provider/type.mjs';

function useKeyboardControl(_ref) {
  var displayOptions = _ref.displayOptions,
    optionsList = _ref.optionsList,
    innerPopupVisible = _ref.innerPopupVisible,
    setInnerPopupVisible = _ref.setInnerPopupVisible,
    selectPanelRef = _ref.selectPanelRef,
    isFilterable = _ref.isFilterable,
    isRemoteSearch = _ref.isRemoteSearch,
    getSelectedOptions = _ref.getSelectedOptions,
    setInnerValue = _ref.setInnerValue,
    innerValue = _ref.innerValue,
    popupContentRef = _ref.popupContentRef,
    multiple = _ref.multiple,
    max = _ref.max;
  var hoverIndex = ref(-1);
  var filteredOptions = ref([]);
  var virtualFilteredOptions = ref([]);
  var classPrefix = usePrefixClass();
  var handleKeyDown = function handleKeyDown(e) {
    var _optionsList$value$ne, _optionsList$value$ne2;
    var optionsListLength = displayOptions.value.length;
    var newIndex = hoverIndex.value;
    switch (e.code) {
      case "ArrowUp":
        e.preventDefault();
        if (hoverIndex.value === -1) {
          newIndex = 0;
        } else if (hoverIndex.value === 0 || hoverIndex.value > displayOptions.value.length - 1) {
          newIndex = optionsListLength - 1;
        } else {
          newIndex--;
        }
        if ((_optionsList$value$ne = optionsList.value[newIndex]) !== null && _optionsList$value$ne !== void 0 && _optionsList$value$ne.disabled) {
          newIndex--;
        }
        hoverIndex.value = newIndex;
        break;
      case "ArrowDown":
        e.preventDefault();
        if (hoverIndex.value === -1 || hoverIndex.value >= optionsListLength - 1) {
          newIndex = 0;
        } else {
          newIndex++;
        }
        if ((_optionsList$value$ne2 = optionsList.value[newIndex]) !== null && _optionsList$value$ne2 !== void 0 && _optionsList$value$ne2.disabled) {
          newIndex++;
        }
        hoverIndex.value = newIndex;
        break;
      case "Enter":
        if (hoverIndex.value === -1) break;
        var finalOptions = selectPanelRef.value.isVirtual && isFilterable.value && virtualFilteredOptions.value.length ? virtualFilteredOptions.value : isRemoteSearch.value ? optionsList.value : filteredOptions.value;
        if (!finalOptions.length) finalOptions = optionsList.value;
        if (!innerPopupVisible.value) {
          setInnerPopupVisible(true, {
            e: e
          });
          break;
        }
        if (!multiple) {
          var selectedOptions = getSelectedOptions(finalOptions[hoverIndex.value].value);
          setInnerValue(finalOptions[hoverIndex.value].value, {
            option: selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions[0],
            selectedOptions: getSelectedOptions(finalOptions[hoverIndex.value].value),
            trigger: "check",
            e: e
          });
          setInnerPopupVisible(false, {
            e: e
          });
        } else {
          var _finalOptions$hoverIn;
          if (hoverIndex.value === -1) return;
          var optionValue = (_finalOptions$hoverIn = finalOptions[hoverIndex.value]) === null || _finalOptions$hoverIn === void 0 ? void 0 : _finalOptions$hoverIn.value;
          if (!optionValue) return;
          var newValue = getNewMultipleValue(innerValue.value, optionValue);
          if (max > 0 && newValue.value.length > max) return;
          var _selectedOptions = getSelectedOptions(newValue.value);
          setInnerValue(newValue.value, {
            option: _selectedOptions.find(function (v) {
              return v.value == optionValue;
            }),
            selectedOptions: _selectedOptions,
            trigger: newValue.isCheck ? "check" : "uncheck",
            e: e
          });
          filteredOptions.value = [];
        }
        break;
      case "Escape":
        setInnerPopupVisible(false, {
          e: e
        });
        break;
    }
  };
  watch(innerPopupVisible, function (value) {
    if (value) {
      hoverIndex.value = -1;
      virtualFilteredOptions.value = [];
      filteredOptions.value = [];
    }
  });
  watch(hoverIndex, function (index) {
    var _selectPanelRef$value;
    var optionHeight = (_selectPanelRef$value = selectPanelRef.value) === null || _selectPanelRef$value === void 0 || (_selectPanelRef$value = _selectPanelRef$value.innerRef) === null || _selectPanelRef$value === void 0 || (_selectPanelRef$value = _selectPanelRef$value.querySelector(".".concat(classPrefix.value, "-select-option"))) === null || _selectPanelRef$value === void 0 ? void 0 : _selectPanelRef$value.clientHeight;
    var scrollHeight = optionHeight * index;
    popupContentRef.value.scrollTo({
      top: scrollHeight,
      behavior: "smooth"
    });
  });
  return {
    hoverIndex: hoverIndex,
    handleKeyDown: handleKeyDown,
    virtualFilteredOptions: virtualFilteredOptions,
    filteredOptions: filteredOptions
  };
}

export { useKeyboardControl as default };
//# sourceMappingURL=useKeyboardControl.mjs.map
