/**
 * tdesign v1.10.5
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../../_chunks/dep-5efe53d1.mjs';
import { i as isNumber_1 } from '../../_chunks/dep-889e457b.mjs';
import { i as isFunction_1 } from '../../_chunks/dep-06dcbf4c.mjs';
import { i as isArray_1 } from '../../_chunks/dep-eae2a67e.mjs';
import { c as cloneDeep_1 } from '../../_chunks/dep-bb899bfd.mjs';
import { getFullPathLabel, getTreeValue, isEmptyValues } from './helper.mjs';
import '../../_chunks/dep-593f2b67.mjs';
import '../../_chunks/dep-eca422c3.mjs';
import '../../_chunks/dep-bf7257e7.mjs';
import '../../_chunks/dep-4659d73b.mjs';
import '../../_chunks/dep-29ef8419.mjs';
import '../../_chunks/dep-2b09875b.mjs';
import '../../_chunks/dep-cda4f568.mjs';
import '../../_chunks/dep-5922c8f3.mjs';
import '../../_chunks/dep-92f86d1d.mjs';
import '../../_chunks/dep-6ab5363f.mjs';
import '../../_chunks/dep-6dc3d0e1.mjs';
import '../../_chunks/dep-76958824.mjs';
import '../../_chunks/dep-e9841b9e.mjs';
import '../../_chunks/dep-1a4bb2f2.mjs';
import '../../_chunks/dep-cc8ebcde.mjs';
import '../../_chunks/dep-f5579c03.mjs';
import '../../_chunks/dep-49aeee3c.mjs';
import '../../_chunks/dep-b5bf85f5.mjs';
import '../../_chunks/dep-3c65fae8.mjs';
import '../../_chunks/dep-626c497d.mjs';
import '../../_chunks/dep-ec0bbd9f.mjs';
import '../../_chunks/dep-1b78414a.mjs';
import '../../_chunks/dep-d84f19b3.mjs';
import '../../_chunks/dep-732f0b7d.mjs';
import '../../_chunks/dep-b91a8171.mjs';

function expendClickEffect(propsTrigger, trigger, node, cascaderContext) {
  var checkStrictly = cascaderContext.checkStrictly,
    multiple = cascaderContext.multiple,
    treeStore = cascaderContext.treeStore,
    setVisible = cascaderContext.setVisible,
    setValue = cascaderContext.setValue,
    setTreeNodes = cascaderContext.setTreeNodes,
    setExpend = cascaderContext.setExpend,
    value = cascaderContext.value,
    max = cascaderContext.max,
    valueType = cascaderContext.valueType;
  var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
  if (isDisabled) return;
  if (propsTrigger === trigger) {
    var expanded = node.setExpanded(true);
    treeStore.refreshNodes();
    treeStore.replaceExpanded(expanded);
    var nodes = treeStore.getNodes().filter(function (node2) {
      return node2.visible;
    });
    setTreeNodes(nodes);
    if (multiple) {
      setExpend(expanded);
    }
  }
  if (!multiple && (node.isLeaf() || checkStrictly) && trigger === "click") {
    treeStore.resetChecked();
    var checked = node.setChecked(!node.checked);
    var _checked = _slicedToArray(checked, 1),
      value2 = _checked[0];
    setValue(valueType === "single" ? value2 : node.getPath().map(function (item) {
      return item.value;
    }), "check", node.getModel());
    if (!checkStrictly || propsTrigger === "hover") {
      setVisible(false, {});
    }
  }
}
function valueChangeEffect(node, cascaderContext) {
  var disabled = cascaderContext.disabled,
    max = cascaderContext.max,
    inputVal = cascaderContext.inputVal,
    multiple = cascaderContext.multiple,
    setVisible = cascaderContext.setVisible,
    setValue = cascaderContext.setValue,
    treeNodes = cascaderContext.treeNodes,
    treeStore = cascaderContext.treeStore,
    valueType = cascaderContext.valueType;
  if (!node || disabled || node.disabled) {
    return;
  }
  var checked = node.setChecked(!node.isChecked());
  if (isNumber_1(max) && max < 0) {
    console.warn("TDesign Warn:", "max should > 0");
  }
  if (checked.length > max && isNumber_1(max) && max > 0) {
    return;
  }
  if (checked.length === 0) {
    var expanded = treeStore.getExpanded();
    setTimeout(function () {
      treeStore.replaceExpanded(expanded);
      treeStore.refreshNodes();
    }, 0);
  }
  if (!multiple) {
    setVisible(false, {});
  }
  var isSelectAll = treeNodes.every(function (item) {
    return checked.indexOf(item.value) > -1;
  });
  if (inputVal && isSelectAll) {
    setVisible(false, {});
  }
  var resValue = valueType === "single" ? checked : checked.map(function (val) {
    return treeStore.getNode(val).getPath().map(function (item) {
      return item.value;
    });
  });
  setValue(resValue, node.checked ? "uncheck" : "check", node.getModel());
}
function closeIconClickEffect(cascaderContext) {
  var setVisible = cascaderContext.setVisible,
    multiple = cascaderContext.multiple,
    setValue = cascaderContext.setValue;
  setVisible(false, {});
  setValue(multiple ? [] : "", "clear");
}
function handleRemoveTagEffect(cascaderContext, index, onRemove) {
  var disabled = cascaderContext.disabled,
    setValue = cascaderContext.setValue,
    value = cascaderContext.value,
    valueType = cascaderContext.valueType,
    treeStore = cascaderContext.treeStore;
  if (disabled) return;
  if (index !== void 0) {
    var newValue = cloneDeep_1(value);
    var res = newValue.splice(index, 1);
    var node = treeStore.getNodes(res[0])[0];
    var checked = node.setChecked(!node.isChecked());
    var resValue = valueType === "single" ? checked : checked.map(function (val) {
      return treeStore.getNode(val).getPath().map(function (item) {
        return item.value;
      });
    });
    setValue(resValue, "uncheck", node.getModel());
    if (isFunction_1(onRemove)) {
      onRemove({
        value: checked,
        node: node
      });
    }
  } else {
    if (isFunction_1(onRemove)) {
      onRemove({
        value: value,
        node: void 0
      });
    }
  }
}
var treeNodesEffect = function treeNodesEffect(inputVal, treeStore, setTreeNodes, filter) {
  if (!treeStore) return;
  var nodes = [];
  if (inputVal) {
    var filterMethods = function filterMethods(node) {
      if (!node.isLeaf()) return;
      if (isFunction_1(filter)) {
        return filter("".concat(inputVal), node);
      }
      var fullPathLabel = getFullPathLabel(node, "");
      return fullPathLabel.indexOf("".concat(inputVal)) > -1;
    };
    nodes = treeStore.nodes.filter(filterMethods);
  } else {
    nodes = treeStore.getNodes().filter(function (node) {
      return node.visible;
    });
  }
  setTreeNodes(nodes);
};
var treeStoreExpendEffect = function treeStoreExpendEffect(treeStore, value, expend) {
  var treeValue = getTreeValue(value);
  if (!treeStore) return;
  if (isArray_1(treeValue) && expend.length === 0) {
    var expandedMap = /* @__PURE__ */new Map();
    var _treeValue = _slicedToArray(treeValue, 1),
      val = _treeValue[0];
    if (!isEmptyValues(val)) {
      expandedMap.set(val, true);
      var node = treeStore.getNode(val);
      if (!node) {
        treeStore.refreshNodes();
        return;
      }
      node.getParents().forEach(function (tn) {
        expandedMap.set(tn.value, true);
      });
      var expandedArr = Array.from(expandedMap.keys());
      treeStore.replaceExpanded(expandedArr);
    }
  }
  if (treeStore.getExpanded() && expend.length) {
    treeStore.replaceExpanded(expend);
  }
  treeStore.refreshNodes();
};

export { closeIconClickEffect, expendClickEffect, handleRemoveTagEffect, treeNodesEffect, treeStoreExpendEffect, valueChangeEffect };
//# sourceMappingURL=effect.mjs.map
