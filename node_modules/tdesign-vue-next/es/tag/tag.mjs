/**
 * tdesign v1.10.5
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-fa52aa21.mjs';
import { defineComponent, getCurrentInstance, computed, h, createVNode } from 'vue';
import { CloseIcon } from 'tdesign-icons-vue-next';
import { i as isString_1 } from '../_chunks/dep-03a7fb6c.mjs';
import { t as tinycolor } from '../_chunks/dep-9ac991f3.mjs';
import props from './props.mjs';
import { usePrefixClass, useCommonClassName } from '../hooks/useConfig.mjs';
import { useGlobalIcon } from '../hooks/useGlobalIcon.mjs';
import { useTNodeJSX, useContent } from '../hooks/tnode.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import '../_chunks/dep-4659d73b.mjs';
import '../_chunks/dep-eca422c3.mjs';
import '../_chunks/dep-bf7257e7.mjs';
import '../_chunks/dep-eae2a67e.mjs';
import '../_chunks/dep-626c497d.mjs';
import '../_chunks/dep-29ef8419.mjs';
import '../_chunks/dep-06dcbf4c.mjs';
import '../_chunks/dep-2b09875b.mjs';
import '../_chunks/dep-cda4f568.mjs';
import '../_chunks/dep-03ad9cda.mjs';
import '../_chunks/dep-7932c2e8.mjs';
import '../_chunks/dep-ab4bb9b8.mjs';
import '../_chunks/dep-d8a34055.mjs';
import '../_chunks/dep-2f6e28a0.mjs';
import '../_chunks/dep-5a17bf21.mjs';
import '../_chunks/dep-bad871d5.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-b91a8171.mjs';
import '../_chunks/dep-1b78414a.mjs';
import '../_chunks/dep-1a4bb2f2.mjs';
import '../_chunks/dep-cc8ebcde.mjs';
import '../_chunks/dep-76958824.mjs';
import '../_chunks/dep-f5579c03.mjs';
import '../_chunks/dep-6dc3d0e1.mjs';
import '../_chunks/dep-d84f19b3.mjs';
import '../_chunks/dep-3c65fae8.mjs';
import '../_chunks/dep-bb899bfd.mjs';
import '../_chunks/dep-5922c8f3.mjs';
import '../_chunks/dep-92f86d1d.mjs';
import '../_chunks/dep-6ab5363f.mjs';
import '../_chunks/dep-e9841b9e.mjs';
import '../_chunks/dep-49aeee3c.mjs';
import '../_chunks/dep-b5bf85f5.mjs';
import '../_chunks/dep-ec0bbd9f.mjs';
import '../_chunks/dep-732f0b7d.mjs';
import '../_chunks/dep-1b9718a2.mjs';
import '../_chunks/dep-e065dc25.mjs';
import '../_chunks/dep-400ec705.mjs';
import '../_chunks/dep-02f9394e.mjs';
import '../_chunks/dep-1725b1c7.mjs';
import '../_chunks/dep-532409c5.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-9ed7da3e.mjs';
import '../_chunks/dep-7f65fc46.mjs';
import '../_chunks/dep-4f2cabb0.mjs';
import '../config-provider/type.mjs';

var _Tag = defineComponent({
  name: "TTag",
  props: props,
  setup: function setup(props2) {
    var _useConfig = useConfig("tag"),
      tagGlobalConfig = _useConfig.globalConfig;
    var COMPONENT_NAME = usePrefixClass("tag");
    var _useGlobalIcon = useGlobalIcon({
        CloseIcon: CloseIcon
      }),
      CloseIcon$1 = _useGlobalIcon.CloseIcon;
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();
    var _useCommonClassName = useCommonClassName(),
      SIZE = _useCommonClassName.SIZE;
    var _getCurrentInstance = getCurrentInstance(),
      vnode = _getCurrentInstance.vnode;
    var tagClass = computed(function () {
      return ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "--").concat(props2.theme), "".concat(COMPONENT_NAME.value, "--").concat(props2.variant), _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(COMPONENT_NAME.value, "--ellipsis"), props2.maxWidth), "".concat(COMPONENT_NAME.value, "--close"), props2.closable), "".concat(COMPONENT_NAME.value, "--disabled"), props2.disabled), SIZE.value[props2.size], props2.size !== "medium"), props2.shape !== "square" && "".concat(COMPONENT_NAME.value, "--").concat(props2.shape)];
    });
    var tagStyle = computed(function () {
      return getTagColorStyle();
    });
    var textStyle = computed(function () {
      if (!props2.maxWidth) return {};
      return {
        maxWidth: isNaN(Number(props2.maxWidth)) ? String(props2.maxWidth) : "".concat(props2.maxWidth, "px")
      };
    });
    var getTagColorStyle = function getTagColorStyle() {
      var color = props2.color,
        variant = props2.variant;
      if (!color) return {};
      var luminance = tinycolor(color).getLuminance();
      var style = {
        color: luminance > 0.5 ? "black" : "white"
      };
      if (variant === "outline" || variant === "light-outline") {
        style.borderColor = color;
      }
      if (variant !== "outline") {
        var getLightestShade = function getLightestShade() {
          var _tinycolor$toRgb = tinycolor(color).toRgb(),
            r = _tinycolor$toRgb.r,
            g = _tinycolor$toRgb.g,
            b = _tinycolor$toRgb.b;
          return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", 0.1)");
        };
        style.backgroundColor = variant === "dark" ? color : getLightestShade();
      }
      if (variant !== "dark") {
        style.color = color;
      }
      return style;
    };
    var handleClick = function handleClick(e) {
      var _props2$onClick;
      if (props2.disabled) return;
      (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, {
        e: e
      });
    };
    var getCloseIcon = function getCloseIcon() {
      if (!props2.closable) return null;
      var iconClassName = "".concat(COMPONENT_NAME.value, "__icon-close");
      if (tagGlobalConfig.value.closeIcon) {
        return h(tagGlobalConfig.value.closeIcon(h), {
          "class": iconClassName
        });
      }
      return createVNode(CloseIcon$1, {
        "onClick": function onClick(_ref2) {
          var _props2$onClose;
          var e = _ref2.e;
          if (e) e.stopPropagation();
          (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 || _props2$onClose.call(props2, {
            e: e
          });
        },
        "class": iconClassName
      }, null);
    };
    var renderTitle = function renderTitle(tagContent) {
      if (!props2.maxWidth) {
        return void 0;
      }
      var vProps = vnode.props || {};
      if (Reflect.has(vProps, "title")) {
        return vProps.title || void 0;
      }
      if (tagContent) {
        return tagContent;
      }
      return void 0;
    };
    return function () {
      var closeIcon = getCloseIcon();
      var tagContent = renderContent("default", "content");
      var icon = renderTNodeJSX("icon");
      var title = renderTitle(isString_1(tagContent) ? tagContent : "");
      return createVNode("div", {
        "class": tagClass.value,
        "style": tagStyle.value,
        "onClick": handleClick
      }, [icon, createVNode("span", {
        "class": props2.maxWidth ? "".concat(COMPONENT_NAME.value, "--text") : void 0,
        "style": textStyle.value,
        "title": title
      }, [tagContent]), !props2.disabled && closeIcon]);
    };
  }
});

export { _Tag as default };
//# sourceMappingURL=tag.mjs.map
