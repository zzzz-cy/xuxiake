{"version":3,"file":"watermark.mjs","sources":["../../src/watermark/watermark.tsx"],"sourcesContent":["import { computed, onMounted, defineComponent, watch, ref, reactive, shallowRef } from 'vue';\nimport props from './props';\nimport generateBase64Url from '../_common/js/watermark/generateBase64Url';\nimport randomMovingStyle from '../_common/js/watermark/randomMovingStyle';\nimport injectStyle from '../_common/js/utils/injectStyle';\nimport { usePrefixClass } from '../hooks/useConfig';\nimport { useMutationObserver } from './hooks';\nimport { useContent } from '../hooks/tnode';\nimport setStyle from '../_common/js/utils/set-style';\n\nexport default defineComponent({\n  name: 'TWatermark',\n  props,\n  setup(props) {\n    const backgroundImage = ref('');\n    const watermarkRef = shallowRef<HTMLElement>();\n    const watermarkContentRef = shallowRef<HTMLElement>();\n\n    const offset = reactive(props.offset || []);\n\n    const gapX = computed(() => {\n      return props.movable ? 0 : props.x;\n    });\n\n    const gapY = computed(() => {\n      return props.movable ? 0 : props.y;\n    });\n\n    const rotate = computed(() => {\n      return props.movable ? 0 : props.rotate;\n    });\n\n    const backgroundRepeat = computed(() => {\n      if (props.movable) {\n        return 'no-repeat';\n      }\n      return props.isRepeat ? 'repeat' : 'no-repeat';\n    });\n\n    const offsetLeft = computed(() => {\n      return offset[0] || gapX.value / 2;\n    });\n\n    const offsetTop = computed(() => {\n      return offset[1] || gapY.value / 2;\n    });\n\n    const bgImageOptions = computed(() => ({\n      width: props.width,\n      height: props.height,\n      rotate: rotate.value,\n      lineSpace: props.lineSpace,\n      alpha: props.alpha,\n      gapX: gapX.value,\n      gapY: gapY.value,\n      watermarkContent: props.watermarkContent,\n      offsetLeft: offsetLeft.value,\n      offsetTop: offsetTop.value,\n    }));\n\n    const removeWaterMark = () => {\n      if (!watermarkContentRef.value) return;\n      watermarkContentRef.value.remove();\n      watermarkContentRef.value = null;\n    };\n\n    const injectWaterMark = () => {\n      generateBase64Url(bgImageOptions.value, (base64Url) => {\n        removeWaterMark();\n\n        backgroundImage.value = base64Url;\n        watermarkContentRef.value = document.createElement('div');\n        setStyle(watermarkContentRef.value, {\n          zIndex: props.zIndex,\n          position: 'absolute',\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0,\n          width: '100%',\n          height: '100%',\n          backgroundSize: `${gapX.value + props.width}px`,\n          pointerEvents: 'none',\n          backgroundRepeat: backgroundRepeat.value,\n          backgroundImage: `url('${backgroundImage.value}')`,\n          animation: props.movable ? `watermark infinite ${(props.moveInterval * 4) / 60}s` : 'none',\n        });\n        watermarkRef.value?.append(watermarkContentRef.value);\n      });\n\n      if (props.movable) {\n        const keyframesStyle = randomMovingStyle();\n        injectStyle(keyframesStyle);\n      }\n    };\n\n    onMounted(() => {\n      injectWaterMark();\n      useMutationObserver(\n        watermarkRef.value,\n        (mutations) => {\n          if (props.removable || !watermarkContentRef.value) return;\n          for (const mutation of mutations) {\n            const isRemoved = Array.from(mutation.removedNodes).includes(watermarkContentRef.value);\n            const isModified = mutation.type === 'attributes' && watermarkContentRef.value === mutation.target;\n            if (isRemoved || isModified) {\n              injectWaterMark();\n              break;\n            }\n          }\n        },\n        {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true,\n        },\n      );\n    });\n\n    watch(() => props, injectWaterMark, { deep: true, flush: 'post' });\n\n    return {\n      gapX,\n      gapY,\n      backgroundRepeat,\n      backgroundImage,\n      watermarkRef,\n      watermarkContentRef,\n      bgImageOptions,\n    };\n  },\n\n  render() {\n    const COMPONENT_NAME = usePrefixClass('watermark');\n    const renderContent = useContent();\n\n    return (\n      <div\n        style={{ position: 'relative', overflow: 'hidden', width: '100%' }}\n        class={COMPONENT_NAME.value}\n        ref=\"watermarkRef\"\n      >\n        {renderContent('default', 'content')}\n      </div>\n    );\n  },\n});\n"],"names":["defineComponent","name","props","setup","backgroundImage","ref","watermarkRef","shallowRef","watermarkContentRef","offset","reactive","gapX","computed","movable","x","gapY","y","rotate","backgroundRepeat","isRepeat","offsetLeft","value","offsetTop","bgImageOptions","width","height","lineSpace","alpha","watermarkContent","removeWaterMark","remove","injectWaterMark","generateBase64Url","base64Url","_watermarkRef$value","document","createElement","setStyle","zIndex","position","left","right","top","bottom","backgroundSize","concat","pointerEvents","animation","moveInterval","append","keyframesStyle","randomMovingStyle","injectStyle","onMounted","useMutationObserver","mutations","removable","_iterator","_createForOfIteratorHelper","_step","s","n","done","mutation","isRemoved","Array","from","removedNodes","includes","isModified","type","target","err","e","f","attributes","childList","characterData","subtree","watch","deep","flush","render","COMPONENT_NAME","usePrefixClass","renderContent","useContent","_createVNode","overflow"],"mappings":"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"}