/**
 * tdesign v1.10.5
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _objectWithoutProperties } from '../_chunks/dep-5d3f7c0e.mjs';
import { _ as _defineProperty } from '../_chunks/dep-fa52aa21.mjs';
import { _ as _slicedToArray } from '../_chunks/dep-5efe53d1.mjs';
import { toRefs, ref, computed, createVNode, mergeProps } from 'vue';
import { i as isObject_1 } from '../_chunks/dep-2b09875b.mjs';
import { TagInput } from '../tag-input/index.mjs';
import { Loading } from '../loading/index.mjs';
import useDefaultValue from '../hooks/useDefaultValue.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useDisabled } from '../hooks/useDisabled.mjs';
import { useReadonly } from '../hooks/useReadonly.mjs';
import '../_chunks/dep-4659d73b.mjs';
import '../_chunks/dep-593f2b67.mjs';
import '../_chunks/dep-eca422c3.mjs';
import '../tag-input/tag-input.mjs';
import 'tdesign-icons-vue-next';
import '../input/index.mjs';
import '../input/input.mjs';
import '../input/props.mjs';
import '../hooks/useGlobalIcon.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-06dcbf4c.mjs';
import '../_chunks/dep-bf7257e7.mjs';
import '../_chunks/dep-cda4f568.mjs';
import '../_chunks/dep-bb899bfd.mjs';
import '../_chunks/dep-5922c8f3.mjs';
import '../_chunks/dep-92f86d1d.mjs';
import '../_chunks/dep-6ab5363f.mjs';
import '../_chunks/dep-6dc3d0e1.mjs';
import '../_chunks/dep-76958824.mjs';
import '../_chunks/dep-e9841b9e.mjs';
import '../_chunks/dep-1a4bb2f2.mjs';
import '../_chunks/dep-cc8ebcde.mjs';
import '../_chunks/dep-29ef8419.mjs';
import '../_chunks/dep-f5579c03.mjs';
import '../_chunks/dep-49aeee3c.mjs';
import '../_chunks/dep-b5bf85f5.mjs';
import '../_chunks/dep-3c65fae8.mjs';
import '../_chunks/dep-eae2a67e.mjs';
import '../_chunks/dep-626c497d.mjs';
import '../_chunks/dep-ec0bbd9f.mjs';
import '../_chunks/dep-1b78414a.mjs';
import '../_chunks/dep-d84f19b3.mjs';
import '../_chunks/dep-732f0b7d.mjs';
import '../_chunks/dep-03a7fb6c.mjs';
import '../_chunks/dep-1b9718a2.mjs';
import '../_chunks/dep-e065dc25.mjs';
import '../_chunks/dep-400ec705.mjs';
import '../_chunks/dep-02f9394e.mjs';
import '../_chunks/dep-1725b1c7.mjs';
import '../_chunks/dep-532409c5.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-9ed7da3e.mjs';
import '../_chunks/dep-7f65fc46.mjs';
import '../_chunks/dep-4f2cabb0.mjs';
import '../config-provider/type.mjs';
import '../hooks/tnode.mjs';
import '../_chunks/dep-03ad9cda.mjs';
import '../_chunks/dep-7932c2e8.mjs';
import '../_chunks/dep-ab4bb9b8.mjs';
import '../_chunks/dep-d8a34055.mjs';
import '../_chunks/dep-2f6e28a0.mjs';
import '../_chunks/dep-5a17bf21.mjs';
import '../_chunks/dep-bad871d5.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-b91a8171.mjs';
import '../input/useInput.mjs';
import '../form/const.mjs';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/useCommonClassName.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useRipple.mjs';
import '../utils/set-style.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../hooks/useVModel.mjs';
import '../hooks/useImagePreviewUrl.mjs';
import '../_common/js/upload/utils.mjs';
import '../_common/js/log/log.mjs';
import '../input/useLengthLimit.mjs';
import '../_common/js/log/index.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-4a990ea3.mjs';
import '../_chunks/dep-73384992.mjs';
import '../_chunks/dep-58a62202.mjs';
import '../_chunks/dep-889e457b.mjs';
import '../_chunks/dep-df472119.mjs';
import '../input/useInputEventHandler.mjs';
import '../input/useInputWidth.mjs';
import '../hooks/useResizeObserver.mjs';
import '../input/input-group.mjs';
import '../input/input-group-props.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../input/type.mjs';
import '../tag-input/props.mjs';
import '../tag-input/hooks/useTagScroll.mjs';
import '../tag-input/useTagList.mjs';
import '../tag/index.mjs';
import '../tag/tag.mjs';
import '../_chunks/dep-9ac991f3.mjs';
import '../tag/props.mjs';
import '../tag/check-tag.mjs';
import '../tag/check-tag-props.mjs';
import '../_common/js/common.mjs';
import '../tag/check-tag-group.mjs';
import '../tag/check-tag-group-props.mjs';
import '../tag/type.mjs';
import '../tag-input/hooks/useHover.mjs';
import '../tag-input/hooks/useDragSorter.mjs';
import '../tag-input/type.mjs';
import '../_chunks/dep-bff7e93a.mjs';
import '../_chunks/dep-0b414bea.mjs';
import '../_chunks/dep-4d4e2af1.mjs';
import '../_chunks/dep-fbd4eddb.mjs';
import '../_chunks/dep-ae202bc0.mjs';
import '../_chunks/dep-aeaef131.mjs';
import '../_chunks/dep-69e0f6fc.mjs';
import '../_chunks/dep-ea20409b.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../_common/js/utils/set-style.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../loading/props.mjs';
import '../hooks/useTeleport.mjs';
import '../loading/type.mjs';

var _excluded = ["tips"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DEFAULT_KEYS = {
  label: "label",
  key: "key",
  children: "children"
};
function useMultiple(props, context, popupRef) {
  var _toRefs = toRefs(props),
    inputValue = _toRefs.inputValue;
  var classPrefix = usePrefixClass();
  var tagInputRef = ref();
  var isMultipleFocus = ref(props.autofocus);
  var _useDefault = useDefaultValue(inputValue, props.defaultInputValue, props.onInputChange, "inputValue"),
    _useDefault2 = _slicedToArray(_useDefault, 2),
    tInputValue = _useDefault2[0],
    setTInputValue = _useDefault2[1];
  var disable = useDisabled();
  var isReadonly = useReadonly();
  var iKeys = computed(function () {
    return _objectSpread(_objectSpread({}, DEFAULT_KEYS), props.keys);
  });
  var tags = computed(function () {
    if (!(props.value instanceof Array)) {
      return isObject_1(props.value) ? [props.value[iKeys.value.label]] : [props.value];
    }
    return props.value.map(function (item) {
      return isObject_1(item) ? item[iKeys.value.label] : item;
    });
  });
  var tPlaceholder = computed(function () {
    return !tags.value || !tags.value.length ? props.placeholder : "";
  });
  var onTagInputChange = function onTagInputChange(val, context2) {
    var _props$onTagChange;
    if (context2.trigger === "tag-remove") {
      var _context2$e;
      (_context2$e = context2.e) === null || _context2$e === void 0 || _context2$e.stopPropagation();
    }
    (_props$onTagChange = props.onTagChange) === null || _props$onTagChange === void 0 || _props$onTagChange.call(props, val, context2);
  };
  var onInputChange = function onInputChange(val, ctx) {
    if (ctx.trigger === "enter" || ctx.trigger === "blur") return;
    setTInputValue(val, {
      trigger: ctx.trigger,
      e: ctx.e
    });
  };
  var onBlur = function onBlur(val, ctx) {
    var _popupRef$value, _props$onBlur;
    var overlayState = (_popupRef$value = popupRef.value) === null || _popupRef$value === void 0 ? void 0 : _popupRef$value.getOverlayState();
    if (overlayState !== null && overlayState !== void 0 && overlayState.hover) return;
    isMultipleFocus.value = false;
    (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, props.value, _objectSpread(_objectSpread({}, ctx), {}, {
      tagInputValue: val
    }));
  };
  var onFocus = function onFocus(val, ctx) {
    var _popupRef$value2, _props$onFocus;
    var overlayState = (_popupRef$value2 = popupRef.value) === null || _popupRef$value2 === void 0 ? void 0 : _popupRef$value2.getOverlayState();
    if (isMultipleFocus.value || overlayState !== null && overlayState !== void 0 && overlayState.hover) return;
    isMultipleFocus.value = true;
    var params = _objectSpread(_objectSpread({}, ctx), {}, {
      tagInputValue: val
    });
    (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, props.value, params);
  };
  var onEnter = function onEnter(val, ctx) {
    var _props$onEnter;
    var params = _objectSpread(_objectSpread({}, ctx), {}, {
      tagInputValue: val
    });
    (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, props.value, params);
  };
  var renderSelectMultiple = function renderSelectMultiple(p) {
    var tagInputProps = _objectSpread(_objectSpread({}, p.commonInputProps), {}, {
      tagProps: props.tagProps,
      label: props.label,
      autoWidth: props.autoWidth,
      readonly: isReadonly.value,
      placeholder: tPlaceholder.value,
      minCollapsedNum: props.minCollapsedNum,
      collapsedItems: props.collapsedItems,
      tag: props.tag,
      value: tags.value,
      valueDisplay: props.valueDisplay,
      inputValue: p.popupVisible && p.allowInput ? tInputValue.value : "",
      inputProps: _objectSpread({
        readonly: !props.allowInput || isReadonly.value,
        inputClass: _defineProperty({}, "".concat(classPrefix.value, "-input--focused"), p.popupVisible)
      }, props.inputProps),
      suffixIcon: !disable.value && props.loading ? function () {
        return createVNode(Loading, {
          "loading": true,
          "size": "small"
        }, null);
      } : props.suffixIcon
    }, props.tagInputProps);
    var _context$slots = context.slots,
      tips = _context$slots.tips,
      slots = _objectWithoutProperties(_context$slots, _excluded);
    return createVNode(TagInput, mergeProps({
      "ref": tagInputRef
    }, tagInputProps, {
      "onInputChange": onInputChange,
      "onChange": onTagInputChange,
      "onClear": p.onInnerClear,
      "onBlur": onBlur,
      "onEnter": onEnter,
      "onFocus": onFocus
    }), slots);
  };
  return {
    tags: tags,
    tPlaceholder: tPlaceholder,
    tagInputRef: tagInputRef,
    isMultipleFocus: isMultipleFocus,
    multipleInputValue: tInputValue,
    renderSelectMultiple: renderSelectMultiple
  };
}

export { useMultiple as default };
//# sourceMappingURL=useMultiple.mjs.map
