/**
 * tdesign v1.10.5
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var hooks_useConfig = require('../../hooks/useConfig.js');
var utils_dom = require('../../utils/dom.js');
require('vue');
require('../../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('lodash/isString');
require('../../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../../_common/js/global-config/default-config.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../_chunks/dep-14f69041.js');
require('@babel/runtime/helpers/typeof');
require('../../_chunks/dep-0a56babd.js');
require('dayjs');
require('lodash/isArray');
require('../../utils/easing.js');

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var nodeList = /* @__PURE__ */new Map();
var startClick;
var uid = 0;
if (!utils_dom.isServer && window.document) {
  utils_dom.on(document, "mousedown", function (e) {
    return startClick = e;
  });
  utils_dom.on(document, "mouseup", function (e) {
    var _iterator = _createForOfIteratorHelper(nodeList.values()),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var handler = _step.value.handler;
        handler(e);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  });
}
var createDocumentHandler = function createDocumentHandler(elements, handler) {
  var includePopup = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var POPUP_SELECTOR = hooks_useConfig.usePrefixClass("popup");
  return function (e) {
    var _startClick;
    if (includePopup) {
      document.querySelectorAll(POPUP_SELECTOR.value).forEach(function (ele) {
        elements.push(ele);
      });
    }
    elements = Array.from(new Set(elements));
    var mouseUpTarget = e.target;
    var mouseDownTarget = (_startClick = startClick) === null || _startClick === void 0 ? void 0 : _startClick.target;
    var isTargetUnExists = !mouseUpTarget || !mouseDownTarget;
    if (isTargetUnExists) {
      return;
    }
    var isContained = elements.some(function (el) {
      var isSelf = el === mouseUpTarget;
      var isContainedByEl = el.contains(mouseUpTarget) || el.contains(mouseDownTarget);
      return isSelf || isContainedByEl;
    });
    if (isContained) {
      return;
    }
    handler();
  };
};
var useClickOutsider = function useClickOutsider() {
  uid++;
  var clickOutsiderId = uid;
  var addClickOutsider = function addClickOutsider(els, handler) {
    var elements = Array.from(new Set(els.filter(function (el) {
      return el;
    }))).map(function (el) {
      var node = el.el || el.$el || el;
      return node;
    });
    var documentHandler = createDocumentHandler(elements, handler, true);
    nodeList.set(clickOutsiderId, {
      elements: elements,
      handler: documentHandler
    });
  };
  var removeClickOutsider = function removeClickOutsider() {
    nodeList.has(clickOutsiderId) && nodeList["delete"](clickOutsiderId);
  };
  return {
    clickOutsiderId: clickOutsiderId,
    addClickOutsider: addClickOutsider,
    removeClickOutsider: removeClickOutsider
  };
};

exports.useClickOutsider = useClickOutsider;
//# sourceMappingURL=click-outsider.js.map
