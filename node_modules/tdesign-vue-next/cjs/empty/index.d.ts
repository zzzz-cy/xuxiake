import type { TdEmptyProps } from './type';
import './style';
export * from './type';
export declare type EmptyProps = TdEmptyProps;
export declare const Empty: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        action: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        description: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        image: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdImageProps>;
        };
        imageStyle: {
            type: import("vue").PropType<import("..").Styles>;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        type: {
            type: import("vue").PropType<"success" | "fail" | "empty" | "network-error" | "maintenance">;
            default: "success" | "fail" | "empty" | "network-error" | "maintenance";
            validator(val: "success" | "fail" | "empty" | "network-error" | "maintenance"): boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        action: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        description: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        image: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdImageProps>;
        };
        imageStyle: {
            type: import("vue").PropType<import("..").Styles>;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        type: {
            type: import("vue").PropType<"success" | "fail" | "empty" | "network-error" | "maintenance">;
            default: "success" | "fail" | "empty" | "network-error" | "maintenance";
            validator(val: "success" | "fail" | "empty" | "network-error" | "maintenance"): boolean;
        };
    }>>, {
        type: "success" | "fail" | "empty" | "network-error" | "maintenance";
        size: import("..").SizeEnum;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        action: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        description: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        image: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdImageProps>;
        };
        imageStyle: {
            type: import("vue").PropType<import("..").Styles>;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        type: {
            type: import("vue").PropType<"success" | "fail" | "empty" | "network-error" | "maintenance">;
            default: "success" | "fail" | "empty" | "network-error" | "maintenance";
            validator(val: "success" | "fail" | "empty" | "network-error" | "maintenance"): boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        type: "success" | "fail" | "empty" | "network-error" | "maintenance";
        size: import("..").SizeEnum;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    action: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    description: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    image: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdImageProps>;
    };
    imageStyle: {
        type: import("vue").PropType<import("..").Styles>;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    type: {
        type: import("vue").PropType<"success" | "fail" | "empty" | "network-error" | "maintenance">;
        default: "success" | "fail" | "empty" | "network-error" | "maintenance";
        validator(val: "success" | "fail" | "empty" | "network-error" | "maintenance"): boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    type: "success" | "fail" | "empty" | "network-error" | "maintenance";
    size: import("..").SizeEnum;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Empty;
