import { TdProgressProps } from './type';
import './style';
export declare type ProgressProps = TdProgressProps;
export * from './type';
export declare const Progress: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: import("vue").PropType<string | string[] | Record<string, string>>;
            default: string | string[] | Record<string, string>;
        };
        label: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        percentage: {
            type: NumberConstructor;
            default: number;
        };
        size: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        status: {
            type: import("vue").PropType<import("./type").ProgressStatus>;
            validator(val: import("./type").ProgressStatus): boolean;
        };
        strokeWidth: {
            type: import("vue").PropType<string | number>;
        };
        theme: {
            type: import("vue").PropType<import("./type").ProgressTheme>;
            default: import("./type").ProgressTheme;
            validator(val: import("./type").ProgressTheme): boolean;
        };
        trackColor: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: import("vue").PropType<string | string[] | Record<string, string>>;
            default: string | string[] | Record<string, string>;
        };
        label: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        percentage: {
            type: NumberConstructor;
            default: number;
        };
        size: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        status: {
            type: import("vue").PropType<import("./type").ProgressStatus>;
            validator(val: import("./type").ProgressStatus): boolean;
        };
        strokeWidth: {
            type: import("vue").PropType<string | number>;
        };
        theme: {
            type: import("vue").PropType<import("./type").ProgressTheme>;
            default: import("./type").ProgressTheme;
            validator(val: import("./type").ProgressTheme): boolean;
        };
        trackColor: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        color: string | string[] | Record<string, string>;
        label: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        size: string | number;
        theme: import("./type").ProgressTheme;
        percentage: number;
        trackColor: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: import("vue").PropType<string | string[] | Record<string, string>>;
            default: string | string[] | Record<string, string>;
        };
        label: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        percentage: {
            type: NumberConstructor;
            default: number;
        };
        size: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        status: {
            type: import("vue").PropType<import("./type").ProgressStatus>;
            validator(val: import("./type").ProgressStatus): boolean;
        };
        strokeWidth: {
            type: import("vue").PropType<string | number>;
        };
        theme: {
            type: import("vue").PropType<import("./type").ProgressTheme>;
            default: import("./type").ProgressTheme;
            validator(val: import("./type").ProgressTheme): boolean;
        };
        trackColor: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        color: string | string[] | Record<string, string>;
        label: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        size: string | number;
        theme: import("./type").ProgressTheme;
        percentage: number;
        trackColor: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: import("vue").PropType<string | string[] | Record<string, string>>;
        default: string | string[] | Record<string, string>;
    };
    label: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    percentage: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: import("vue").PropType<string | number>;
        default: string | number;
    };
    status: {
        type: import("vue").PropType<import("./type").ProgressStatus>;
        validator(val: import("./type").ProgressStatus): boolean;
    };
    strokeWidth: {
        type: import("vue").PropType<string | number>;
    };
    theme: {
        type: import("vue").PropType<import("./type").ProgressTheme>;
        default: import("./type").ProgressTheme;
        validator(val: import("./type").ProgressTheme): boolean;
    };
    trackColor: {
        type: StringConstructor;
        default: string;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    color: string | string[] | Record<string, string>;
    label: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    size: string | number;
    theme: import("./type").ProgressTheme;
    percentage: number;
    trackColor: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Progress;
