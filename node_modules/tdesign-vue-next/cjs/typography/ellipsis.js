/**
 * tdesign v1.10.5
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _typeof = require('@babel/runtime/helpers/typeof');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var hooks_useConfig = require('../hooks/useConfig.js');
var typography_paragraphProps = require('./paragraph-props.js');
var tooltip_index = require('../tooltip/index.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('lodash/isString');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-14f69041.js');
require('../_chunks/dep-0a56babd.js');
require('dayjs');
require('lodash/isArray');
require('../tooltip/tooltip.js');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/omit');
require('../tooltip/props.js');
require('../popup/props.js');
require('../popup/index.js');
require('../popup/popup.js');
require('@popperjs/core');
require('lodash/isObject');
require('lodash/debounce');
require('../hooks/useVModel.js');
require('lodash/kebabCase');
require('../utils/dom.js');
require('../utils/easing.js');
require('../_common/js/utils/set-style.js');
require('../popup/container.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../hooks/useResizeObserver.js');
require('../hooks/tnode.js');
require('lodash/camelCase');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('../utils/withInstall.js');
require('../tooltip/util.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
}
var Ellipsis = Vue.defineComponent({
  name: "TEllipsis",
  components: {
    TTooltip: tooltip_index.Tooltip
  },
  props: _objectSpread({}, typography_paragraphProps["default"]),
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("typography");
    var _useConfig = configProvider_useConfig.useConfig("typography"),
      globalConfig = _useConfig.globalConfig;
    var content = Vue.computed(function () {
      return props2.content || (slots === null || slots === void 0 ? void 0 : slots["default"]());
    });
    var ellipsisState = Vue.computed(function () {
      var ellipsis = props2.ellipsis;
      return _objectSpread({
        row: 1,
        expandable: false
      }, _typeof__default["default"](ellipsis) === "object" ? ellipsis : null);
    });
    var ellipsisStyles = Vue.computed(function () {
      var ellipsis = ellipsisState.value;
      var def = {
        overflow: props2.ellipsis ? "hidden" : "visible",
        textOverflow: props2.ellipsis ? "ellipsis" : "initial",
        whiteSpace: props2.ellipsis ? "normal" : "nowrap",
        display: "-webkit-box",
        WebkitLineClamp: ellipsis.row,
        WebkitBoxOrient: "vertical"
      };
      if (isExpand.value) {
        def.overflow = "visible";
        def.whiteSpace = "normal";
        def.display = "initial";
      }
      return def;
    });
    var isExpand = Vue.ref(false);
    var onExpand = function onExpand() {
      var _props2$ellipsis$onEx, _props2$ellipsis;
      isExpand.value = true;
      if (_typeof__default["default"](props2.ellipsis) === "object") (_props2$ellipsis$onEx = (_props2$ellipsis = props2.ellipsis).onExpand) === null || _props2$ellipsis$onEx === void 0 || _props2$ellipsis$onEx.call(_props2$ellipsis, true);
    };
    var onCollapse = function onCollapse() {
      var _props2$ellipsis$onEx2, _props2$ellipsis2;
      isExpand.value = false;
      if (_typeof__default["default"](props2.ellipsis) === "object") (_props2$ellipsis$onEx2 = (_props2$ellipsis2 = props2.ellipsis).onExpand) === null || _props2$ellipsis$onEx2 === void 0 || _props2$ellipsis$onEx2.call(_props2$ellipsis2, false);
    };
    var renderEllipsisExpand = function renderEllipsisExpand() {
      var suffix = ellipsisState.value.suffix;
      var moreNode = Vue.createVNode("span", {
        "class": "".concat(COMPONENT_NAME.value, "-ellipsis-symbol"),
        "onClick": onExpand,
        "style": "text-decoration:none;white-space:nowrap;flex: 1;"
      }, [suffix || globalConfig.value.expandText]);
      var _ellipsisState$value = ellipsisState.value,
        tooltipProps = _ellipsisState$value.tooltipProps,
        expandable = _ellipsisState$value.expandable,
        collapsible = _ellipsisState$value.collapsible;
      if (!isExpand.value && expandable) {
        return tooltipProps && tooltipProps.content ? Vue.createVNode(tooltip_index.Tooltip, Vue.mergeProps(tooltipProps, {
          "content": tooltipProps.content
        }), _isSlot(moreNode) ? moreNode : {
          "default": function _default() {
            return [moreNode];
          }
        }) : moreNode;
      }
      if (expandable && isExpand.value && collapsible) {
        return Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "-ellipsis-symbol"),
          "onClick": onCollapse,
          "style": "text-decoration:none;white-space:nowrap;flex: 1;"
        }, [globalConfig.value.collapseText]);
      }
    };
    return function () {
      var tooltipProps = ellipsisState.value.tooltipProps;
      return Vue.createVNode("div", {
        "style": {
          display: "flex",
          alignItems: "flex-end"
        }
      }, [tooltipProps && Vue.createVNode(tooltip_index.Tooltip, {
        "content": tooltipProps.content,
        "placement": "top-right"
      }, null), Vue.createVNode("p", {
        "style": props2.ellipsis ? ellipsisStyles.value : {}
      }, [content.value]), renderEllipsisExpand()]);
    };
  }
});

exports["default"] = Ellipsis;
//# sourceMappingURL=ellipsis.js.map
