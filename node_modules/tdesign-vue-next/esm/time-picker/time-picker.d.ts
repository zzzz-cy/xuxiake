import type { InputProps } from '../input';
declare const _default: import("vue").DefineComponent<{
    allowInput: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    disableTime: {
        type: import("vue").PropType<(h: number, m: number, s: number, ms: number) => Partial<{
            hour: number[];
            minute: number[];
            second: number[];
            millisecond: number[];
        }>>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputProps: {
        type: import("vue").PropType<InputProps<import("../input").InputValue>>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetTime>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    selectInputProps: {
        type: import("vue").PropType<import("../select-input").TdSelectInputProps>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    steps: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<string>;
        default: string;
    };
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    defaultValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: string;
        }) => import("..").SlotReturnValue)>;
    };
    onBlur: import("vue").PropType<(context: {
        value: string;
    } & import("..").PopupVisibleChangeContext & {
        inputValue: string;
        tagInputValue?: import("..").TagInputValue;
    }) => void>;
    onChange: import("vue").PropType<(value: string) => void>;
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: string;
        e: FocusEvent;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        value: string;
        e: InputEvent;
    }) => void>;
    onOpen: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPick: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    disableTime: {
        type: import("vue").PropType<(h: number, m: number, s: number, ms: number) => Partial<{
            hour: number[];
            minute: number[];
            second: number[];
            millisecond: number[];
        }>>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputProps: {
        type: import("vue").PropType<InputProps<import("../input").InputValue>>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetTime>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    selectInputProps: {
        type: import("vue").PropType<import("../select-input").TdSelectInputProps>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    steps: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<string>;
        default: string;
    };
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    defaultValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: string;
        }) => import("..").SlotReturnValue)>;
    };
    onBlur: import("vue").PropType<(context: {
        value: string;
    } & import("..").PopupVisibleChangeContext & {
        inputValue: string;
        tagInputValue?: import("..").TagInputValue;
    }) => void>;
    onChange: import("vue").PropType<(value: string) => void>;
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: string;
        e: FocusEvent;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        value: string;
        e: InputEvent;
    }) => void>;
    onOpen: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPick: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
}>>, {
    value: string;
    disabled: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    format: string;
    modelValue: string;
    steps: (string | number)[];
    defaultValue: string;
    borderless: boolean;
    clearable: boolean;
    allowInput: boolean;
    hideDisabledTime: boolean;
}, {}>;
export default _default;
